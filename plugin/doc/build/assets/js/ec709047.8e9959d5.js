"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[6182],{8453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>o});var t=r(6540);const s={},i=t.createContext(s);function c(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),t.createElement(i.Provider,{value:n},e.children)}},8571:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"user-guides/grpc","title":"Mesh Proxy gRPC Examples","description":"This section of the Mesh Proxy documentation explains how to use Mesh as reverse proxy for gRPC applications.","source":"@site/docs/user-guides/grpc.md","sourceDirName":"user-guides","slug":"/user-guides/grpc","permalink":"/doc/docs/user-guides/grpc","draft":false,"unlisted":false,"editUrl":"https://github.com/opendatav/mesh/tree/main/packages/create-docusaurus/templates/shared/docs/user-guides/grpc.md","tags":[],"version":"current","frontMatter":{"title":"Mesh Proxy gRPC Examples","description":"This section of the Mesh Proxy documentation explains how to use Mesh as reverse proxy for gRPC applications."},"sidebar":"tutorialSidebar","previous":{"title":"Mesh FastProxy Experimental Configuration","permalink":"/doc/docs/user-guides/fastproxy"}}');var s=r(4848),i=r(8453);const c={title:"Mesh Proxy gRPC Examples",description:"This section of the Mesh Proxy documentation explains how to use Mesh as reverse proxy for gRPC applications."},o="gRPC Examples",a={},l=[{value:"With HTTP (h2c)",id:"with-http-h2c",level:2},{value:"Mesh Configuration",id:"mesh-configuration",level:3},{value:"Conclusion",id:"conclusion",level:3},{value:"With HTTPS",id:"with-https",level:2},{value:"gRPC Server Certificate",id:"grpc-server-certificate",level:3},{value:"gRPC Client Certificate",id:"grpc-client-certificate",level:3},{value:"Mesh Configuration",id:"mesh-configuration-1",level:3},{value:"A gRPC example in go (modify for https)",id:"a-grpc-example-in-go-modify-for-https",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"grpc-examples",children:"gRPC Examples"})}),"\n",(0,s.jsx)(n.h2,{id:"with-http-h2c",children:"With HTTP (h2c)"}),"\n",(0,s.jsx)(n.p,{children:"This section explains how to use Mesh as reverse proxy for gRPC application."}),"\n",(0,s.jsx)(n.h3,{id:"mesh-configuration",children:"Mesh Configuration"}),"\n",(0,s.jsx)(n.p,{children:"Static configuration:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"entryPoints:\n  web:\n    address: :80\n\nproviders:\n  file:\n    directory: /path/to/dynamic/config\n\napi: {}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[entryPoints]\n  [entryPoints.web]\n    address = ":80"\n\n[api]\n\n[providers.file]\n  directory = "/path/to/dynamic/config"\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="CLI"',children:"--entryPoints.web.address=:80\n--providers.file.directory=/path/to/dynamic/config\n--api.insecure=true\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"/path/to/dynamic/config/dynamic_conf.{yml,toml}"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:"## dynamic configuration ##\n\nhttp:\n  routers:\n    routerTest:\n      service: srv-grpc\n      rule: Host(`frontend.local`)\n\n  services:\n    srv-grpc:\n      loadBalancer:\n        servers:\n        - url: h2c://backend.local:8080\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## dynamic configuration ##\n\n[http]\n\n  [http.routers]\n    [http.routers.routerTest]\n      service = "srv-grpc"\n      rule = "Host(`frontend.local`)"\n\n  [http.services]\n    [http.services.srv-grpc]\n      [http.services.srv-grpc.loadBalancer]\n        [[http.services.srv-grpc.loadBalancer.servers]]\n          url = "h2c://backend.local:8080"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["!!! warning\nFor providers with labels, you will have to specify the ",(0,s.jsx)(n.code,{children:"Mesh.http.services.<my-service-name>.loadbalancer.server.scheme=h2c"})]}),"\n",(0,s.jsx)(n.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsxs)(n.p,{children:["We don't need specific configuration to use gRPC in Mesh, we just need to use ",(0,s.jsx)(n.code,{children:"h2c"})," protocol, or use HTTPS communications to have HTTP2 with the backend."]}),"\n",(0,s.jsx)(n.h2,{id:"with-https",children:"With HTTPS"}),"\n",(0,s.jsx)(n.p,{children:"This section explains how to use Mesh as reverse proxy for gRPC application with self-signed certificates."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"gRPC architecture",src:r(9724).A+"",width:"764",height:"307"})}),"\n",(0,s.jsx)(n.h3,{id:"grpc-server-certificate",children:"gRPC Server Certificate"}),"\n",(0,s.jsx)(n.p,{children:"In order to secure the gRPC server, we generate a self-signed certificate for service url:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ./backend.key -out ./backend.cert\n"})}),"\n",(0,s.jsx)(n.p,{children:"That will prompt for information, the important answer is:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-txt",children:"Common Name (e.g. server FQDN or YOUR name) []: backend.local\n"})}),"\n",(0,s.jsx)(n.h3,{id:"grpc-client-certificate",children:"gRPC Client Certificate"}),"\n",(0,s.jsx)(n.p,{children:"Generate your self-signed certificate for router url:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ./frontend.key -out ./frontend.cert\n"})}),"\n",(0,s.jsx)(n.p,{children:"with"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-txt",children:"Common Name (e.g. server FQDN or YOUR name) []: frontend.local\n"})}),"\n",(0,s.jsx)(n.h3,{id:"mesh-configuration-1",children:"Mesh Configuration"}),"\n",(0,s.jsx)(n.p,{children:"At last, we configure our Mesh instance to use both self-signed certificates."}),"\n",(0,s.jsx)(n.p,{children:"Static configuration:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"entryPoints:\n  websecure:\n    address: :4443\n\nserversTransport:\n  # For secure connection on backend.local\n  rootCAs:\n    - ./backend.cert\n\nproviders:\n  file:\n    directory: /path/to/dynamic/config\n\napi: {}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[entryPoints]\n  [entryPoints.websecure]\n    address = ":4443"\n\n\n[serversTransport]\n  # For secure connection on backend.local\n  rootCAs = [ "./backend.cert" ]\n\n[api]\n\n[provider.file]\n  directory = "/path/to/dynamic/config"\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="CLI"',children:"--entryPoints.websecure.address=:4443\n# For secure connection on backend.local\n--serversTransport.rootCAs=./backend.cert\n--providers.file.directory=/path/to/dynamic/config\n--api.insecure=true\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"/path/to/dynamic/config/dynamic_conf.{yml,toml}"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:"## dynamic configuration ##\n\nhttp:\n  routers:\n    routerTest:\n      service: srv-grpc\n      rule: Host(`frontend.local`)\n  services:\n    srv-grpc:\n      loadBalancer:\n        servers:\n        # Access on backend with HTTPS\n        - url: https://backend.local:8080\ntls:\n  # For secure connection on frontend.local\n  certificates:\n  - certfile: ./frontend.cert\n    keyfile: ./frontend.key\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## dynamic configuration ##\n\n[http]\n\n  [http.routers]\n    [http.routers.routerTest]\n      service = "srv-grpc"\n      rule = "Host(`frontend.local`)"\n\n  [http.services]\n    [http.services.srv-grpc]\n      [http.services.srv-grpc.loadBalancer]\n        [[http.services.srv-grpc.loadBalancer.servers]]\n          # Access on backend with HTTPS\n          url = "https://backend.local:8080"\n\n[tls]\n\n  # For secure connection on frontend.local\n  [[tls.certificates]]\n    certFile = "./frontend.cert"\n    keyFile = "./frontend.key"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["!!! warning\nWith some services, the server URLs use the IP, so you may need to configure ",(0,s.jsx)(n.code,{children:"insecureSkipVerify"})," instead of the ",(0,s.jsx)(n.code,{children:"rootCAs"})," to activate HTTPS without hostname verification."]}),"\n",(0,s.jsx)(n.h3,{id:"a-grpc-example-in-go-modify-for-https",children:"A gRPC example in go (modify for https)"}),"\n",(0,s.jsxs)(n.p,{children:["We use the gRPC greeter example in ",(0,s.jsx)(n.a,{href:"https://github.com/grpc/grpc-go/tree/master/examples/helloworld",children:"grpc-go"})]}),"\n",(0,s.jsx)(n.p,{children:"!!! warning\nIn order to use this gRPC example, we need to modify it to use HTTPS"}),"\n",(0,s.jsx)(n.p,{children:'So we modify the "gRPC server example" to use our own self-signed certificate:'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'// ...\n\n// Read cert and key file\nbackendCert, _ := os.ReadFile("./backend.cert")\nbackendKey, _ := os.ReadFile("./backend.key")\n\n// Generate Certificate struct\ncert, err := tls.X509KeyPair(backendCert, backendKey)\nif err != nil {\n  log.Fatalf("failed to parse certificate: %v", err)\n}\n\n// Create credentials\ncreds := credentials.NewServerTLSFromCert(&cert)\n\n// Use Credentials in gRPC server options\nserverOption := grpc.Creds(creds)\nvar s *grpc.Server = grpc.NewServer(serverOption)\ndefer s.Stop()\n\npb.RegisterGreeterServer(s, &server{})\nerr := s.Serve(lis)\n\n// ...\n'})}),"\n",(0,s.jsx)(n.p,{children:"Next we will modify gRPC Client to use our Mesh self-signed certificate:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'// ...\n\n// Read cert file\nfrontendCert, _ := os.ReadFile("./frontend.cert")\n\n// Create CertPool\nroots := x509.NewCertPool()\nroots.AppendCertsFromPEM(frontendCert)\n\n// Create credentials\ncredsClient := credentials.NewClientTLSFromCert(roots, "")\n\n// Dial with specific Transport (with credentials)\nconn, err := grpc.Dial("frontend.local:4443", grpc.WithTransportCredentials(credsClient))\nif err != nil {\n    log.Fatalf("did not connect: %v", err)\n}\n\ndefer conn.Close()\nclient := pb.NewGreeterClient(conn)\n\nname := "World"\nr, err := client.SayHello(context.Background(), &pb.HelloRequest{Name: name})\n\n// ...\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},9724:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/grpc-b5d0c4b0b5231f9ec02f36b60ec984e3.svg"}}]);