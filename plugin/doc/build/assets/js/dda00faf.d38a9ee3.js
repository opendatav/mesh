"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[5539],{3251:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"observability/metrics/opentelemetry","title":"Mesh OpenTelemetry Documentation","description":"Mesh supports several metrics backends, including OpenTelemetry. Learn how to implement it for observability in Mesh Proxy. Read the technical documentation.","source":"@site/docs/observability/metrics/opentelemetry.md","sourceDirName":"observability/metrics","slug":"/observability/metrics/opentelemetry","permalink":"/doc/docs/observability/metrics/opentelemetry","draft":false,"unlisted":false,"editUrl":"https://github.com/opendatav/mesh/tree/main/packages/create-docusaurus/templates/shared/docs/observability/metrics/opentelemetry.md","tags":[],"version":"current","frontMatter":{"title":"Mesh OpenTelemetry Documentation","description":"Mesh supports several metrics backends, including OpenTelemetry. Learn how to implement it for observability in Mesh Proxy. Read the technical documentation."},"sidebar":"tutorialSidebar","previous":{"title":"InfluxDB v2","permalink":"/doc/docs/observability/metrics/influxdb2"},"next":{"title":"Mesh Metrics Overview","permalink":"/doc/docs/observability/metrics/overview"}}');var r=n(4848),l=n(8453);const c={title:"Mesh OpenTelemetry Documentation",description:"Mesh supports several metrics backends, including OpenTelemetry. Learn how to implement it for observability in Mesh Proxy. Read the technical documentation."},i="OpenTelemetry",a={},o=[{value:"<code>addEntryPointsLabels</code>",id:"addentrypointslabels",level:4},{value:"<code>addRoutersLabels</code>",id:"addrouterslabels",level:4},{value:"<code>addServicesLabels</code>",id:"addserviceslabels",level:4},{value:"<code>explicitBoundaries</code>",id:"explicitboundaries",level:4},{value:"<code>pushInterval</code>",id:"pushinterval",level:4},{value:"<code>serviceName</code>",id:"servicename",level:4},{value:"HTTP configuration",id:"http-configuration",level:3},{value:"<code>endpoint</code>",id:"endpoint",level:4},{value:"<code>headers</code>",id:"headers",level:4},{value:"<code>tls</code>",id:"tls",level:4},{value:"<code>ca</code>",id:"ca",level:5},{value:"<code>cert</code>",id:"cert",level:5},{value:"<code>key</code>",id:"key",level:5},{value:"<code>insecureSkipVerify</code>",id:"insecureskipverify",level:5},{value:"gRPC configuration",id:"grpc-configuration",level:3},{value:"<code>endpoint</code>",id:"endpoint-1",level:4},{value:"<code>insecure</code>",id:"insecure",level:4},{value:"<code>headers</code>",id:"headers-1",level:4},{value:"<code>tls</code>",id:"tls-1",level:4},{value:"<code>ca</code>",id:"ca-1",level:5},{value:"<code>cert</code>",id:"cert-1",level:5},{value:"<code>key</code>",id:"key-1",level:5},{value:"<code>insecureSkipVerify</code>",id:"insecureskipverify-1",level:5}];function d(e){const t={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",h4:"h4",h5:"h5",header:"header",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"opentelemetry",children:"OpenTelemetry"})}),"\n",(0,r.jsx)(t.p,{children:"To enable the OpenTelemetry metrics:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"metrics:\n  otlp: {}\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[metrics]\n  [metrics.otlp]\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--metrics.otlp=true\n"})}),"\n",(0,r.jsx)(t.p,{children:'!!! info "Default protocol"'}),"\n",(0,r.jsxs)(t.p,{children:["The OpenTelemetry exporter will export metrics to the collector using HTTPS by default to ",(0,r.jsx)(t.a,{href:"https://localhost:4318/v1/metrics",children:"https://localhost:4318/v1/metrics"}),", see the ",(0,r.jsx)(t.a,{href:"#grpc-configuration",children:"gRPC Section"})," to use gRPC."]}),"\n",(0,r.jsx)(t.h4,{id:"addentrypointslabels",children:(0,r.jsx)(t.code,{children:"addEntryPointsLabels"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Optional, Default=true"})}),"\n",(0,r.jsx)(t.p,{children:"Enable metrics on entry points."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"metrics:\n  otlp:\n    addEntryPointsLabels: true\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[metrics]\n  [metrics.otlp]\n    addEntryPointsLabels = true\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--metrics.otlp.addEntryPointsLabels=true\n"})}),"\n",(0,r.jsx)(t.h4,{id:"addrouterslabels",children:(0,r.jsx)(t.code,{children:"addRoutersLabels"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Optional, Default=false"})}),"\n",(0,r.jsx)(t.p,{children:"Enable metrics on routers."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"metrics:\n  otlp:\n    addRoutersLabels: true\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[metrics]\n  [metrics.otlp]\n    addRoutersLabels = true\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--metrics.otlp.addRoutersLabels=true\n"})}),"\n",(0,r.jsx)(t.h4,{id:"addserviceslabels",children:(0,r.jsx)(t.code,{children:"addServicesLabels"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Optional, Default=true"})}),"\n",(0,r.jsx)(t.p,{children:"Enable metrics on services."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"metrics:\n  otlp:\n    addServicesLabels: true\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[metrics]\n  [metrics.otlp]\n    addServicesLabels = true\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--metrics.otlp.addServicesLabels=true\n"})}),"\n",(0,r.jsx)(t.h4,{id:"explicitboundaries",children:(0,r.jsx)(t.code,{children:"explicitBoundaries"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:'Optional, Default=".005, .01, .025, .05, .1, .25, .5, 1, 2.5, 5, 10"'})}),"\n",(0,r.jsx)(t.p,{children:"Explicit boundaries for Histogram data points."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"metrics:\n  otlp:\n    explicitBoundaries:\n      - 0.1\n      - 0.3\n      - 1.2\n      - 5.0\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[metrics]\n  [metrics.otlp]\n    explicitBoundaries = [0.1,0.3,1.2,5.0]\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--metrics.otlp.explicitBoundaries=0.1,0.3,1.2,5.0\n"})}),"\n",(0,r.jsx)(t.h4,{id:"pushinterval",children:(0,r.jsx)(t.code,{children:"pushInterval"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Optional, Default=10s"})}),"\n",(0,r.jsx)(t.p,{children:"Interval at which metrics are sent to the OpenTelemetry Collector."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"metrics:\n  otlp:\n    pushInterval: 10s\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[metrics]\n  [metrics.otlp]\n    pushInterval = "10s"\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--metrics.otlp.pushInterval=10s\n"})}),"\n",(0,r.jsx)(t.h4,{id:"servicename",children:(0,r.jsx)(t.code,{children:"serviceName"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:'Optional, Default="Mesh"'})}),"\n",(0,r.jsx)(t.p,{children:"OTEL service name to use."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"metrics:\n  otlp:\n    serviceName: name\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[metrics]\n  [metrics.otlp]\n    serviceName = "name"\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--metrics.otlp.serviceName=name\n"})}),"\n",(0,r.jsx)(t.h3,{id:"http-configuration",children:"HTTP configuration"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Optional"})}),"\n",(0,r.jsx)(t.p,{children:"This instructs the exporter to send the metrics to the OpenTelemetry Collector using HTTP."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"metrics:\n  otlp:\n    http: {}\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[metrics]\n  [metrics.otlp.http]\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--metrics.otlp.http=true\n"})}),"\n",(0,r.jsx)(t.h4,{id:"endpoint",children:(0,r.jsx)(t.code,{children:"endpoint"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsxs)(t.em,{children:['Optional, Default="',(0,r.jsx)(t.a,{href:"https://localhost:4318/v1/metrics",children:"https://localhost:4318/v1/metrics"}),'", Format="',(0,r.jsx)(t.code,{children:"<scheme>://<host>:<port><path>"}),'"']})}),"\n",(0,r.jsx)(t.p,{children:"URL of the OpenTelemetry Collector to send metrics to."}),"\n",(0,r.jsx)(t.p,{children:'!!! info "Insecure mode"'}),"\n",(0,r.jsxs)(t.p,{children:["To disable TLS, use ",(0,r.jsx)(t.code,{children:"http://"})," instead of ",(0,r.jsx)(t.code,{children:"https://"})," in the ",(0,r.jsx)(t.code,{children:"endpoint"})," configuration."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"metrics:\n  otlp:\n    http:\n      endpoint: https://collector:4318/v1/metrics\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[metrics]\n  [metrics.otlp.http]\n    endpoint = "https://collector:4318/v1/metrics"\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--metrics.otlp.http.endpoint=https://collector:4318/v1/metrics\n"})}),"\n",(0,r.jsx)(t.h4,{id:"headers",children:(0,r.jsx)(t.code,{children:"headers"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Optional, Default="})}),"\n",(0,r.jsx)(t.p,{children:"Additional headers sent with metrics by the exporter to the OpenTelemetry Collector."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"metrics:\n  otlp:\n    http:\n      headers:\n        foo: bar\n        baz: buz\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[metrics]\n  [metrics.otlp.http.headers]\n    foo = "bar"\n    baz = "buz"\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--metrics.otlp.http.headers.foo=bar --metrics.otlp.http.headers.baz=buz\n"})}),"\n",(0,r.jsx)(t.h4,{id:"tls",children:(0,r.jsx)(t.code,{children:"tls"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Optional"})}),"\n",(0,r.jsx)(t.p,{children:"Defines the Client TLS configuration used by the exporter to send metrics to the OpenTelemetry Collector."}),"\n",(0,r.jsx)(t.h5,{id:"ca",children:(0,r.jsx)(t.code,{children:"ca"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Optional"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"ca"})," is the path to the certificate authority used for the secure connection to the OpenTelemetry Collector,\nit defaults to the system bundle."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"metrics:\n  otlp:\n    http:\n      tls:\n        ca: path/to/ca.crt\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[metrics.otlp.http.tls]\n  ca = "path/to/ca.crt"\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--metrics.otlp.http.tls.ca=path/to/ca.crt\n"})}),"\n",(0,r.jsx)(t.h5,{id:"cert",children:(0,r.jsx)(t.code,{children:"cert"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Optional"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"cert"})," is the path to the public certificate used for the secure connection to the OpenTelemetry Collector.\nWhen using this option, setting the ",(0,r.jsx)(t.code,{children:"key"})," option is required."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"metrics:\n  otlp:\n    http:\n      tls:\n        cert: path/to/foo.cert\n        key: path/to/foo.key\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[metrics.otlp.http.tls]\n  cert = "path/to/foo.cert"\n  key = "path/to/foo.key"\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--metrics.otlp.http.tls.cert=path/to/foo.cert\n--metrics.otlp.http.tls.key=path/to/foo.key\n"})}),"\n",(0,r.jsx)(t.h5,{id:"key",children:(0,r.jsx)(t.code,{children:"key"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Optional"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"key"})," is the path to the private key used for the secure connection to the OpenTelemetry Collector.\nWhen using this option, setting the ",(0,r.jsx)(t.code,{children:"cert"})," option is required."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"metrics:\n  otlp:\n    http:\n      tls:\n        cert: path/to/foo.cert\n        key: path/to/foo.key\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[metrics.otlp.http.tls]\n  cert = "path/to/foo.cert"\n  key = "path/to/foo.key"\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--metrics.otlp.http.tls.cert=path/to/foo.cert\n--metrics.otlp.http.tls.key=path/to/foo.key\n"})}),"\n",(0,r.jsx)(t.h5,{id:"insecureskipverify",children:(0,r.jsx)(t.code,{children:"insecureSkipVerify"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Optional, Default=false"})}),"\n",(0,r.jsxs)(t.p,{children:["If ",(0,r.jsx)(t.code,{children:"insecureSkipVerify"})," is ",(0,r.jsx)(t.code,{children:"true"}),",\nthe TLS connection to the OpenTelemetry Collector accepts any certificate presented by the server regardless of the hostnames it covers."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"metrics:\n  otlp:\n    http:\n      tls:\n        insecureSkipVerify: true\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[metrics.otlp.http.tls]\n  insecureSkipVerify = true\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--metrics.otlp.http.tls.insecureSkipVerify=true\n"})}),"\n",(0,r.jsx)(t.h3,{id:"grpc-configuration",children:"gRPC configuration"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Optional"})}),"\n",(0,r.jsx)(t.p,{children:"This instructs the exporter to send metrics to the OpenTelemetry Collector using gRPC."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"metrics:\n  otlp:\n    grpc: {}\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[metrics]\n  [metrics.otlp.grpc]\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--metrics.otlp.grpc=true\n"})}),"\n",(0,r.jsx)(t.h4,{id:"endpoint-1",children:(0,r.jsx)(t.code,{children:"endpoint"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsxs)(t.em,{children:['Required, Default="localhost:4317", Format="',(0,r.jsx)(t.code,{children:"<host>:<port>"}),'"']})}),"\n",(0,r.jsx)(t.p,{children:"Address of the OpenTelemetry Collector to send metrics to."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"metrics:\n  otlp:\n    grpc:\n      endpoint: localhost:4317\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[metrics]\n  [metrics.otlp.grpc]\n    endpoint = "localhost:4317"\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--metrics.otlp.grpc.endpoint=localhost:4317\n"})}),"\n",(0,r.jsx)(t.h4,{id:"insecure",children:(0,r.jsx)(t.code,{children:"insecure"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Optional, Default=false"})}),"\n",(0,r.jsx)(t.p,{children:"Allows exporter to send metrics to the OpenTelemetry Collector without using a secured protocol."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"metrics:\n  otlp:\n    grpc:\n      insecure: true\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[metrics]\n  [metrics.otlp.grpc]\n    insecure = true\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--metrics.otlp.grpc.insecure=true\n"})}),"\n",(0,r.jsx)(t.h4,{id:"headers-1",children:(0,r.jsx)(t.code,{children:"headers"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Optional, Default="})}),"\n",(0,r.jsx)(t.p,{children:"Additional headers sent with metrics by the exporter to the OpenTelemetry Collector."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"metrics:\n  otlp:\n    grpc:\n      headers:\n        foo: bar\n        baz: buz\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[metrics]\n  [metrics.otlp.grpc.headers]\n    foo = "bar"\n    baz = "buz"\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--metrics.otlp.grpc.headers.foo=bar --metrics.otlp.grpc.headers.baz=buz\n"})}),"\n",(0,r.jsx)(t.h4,{id:"tls-1",children:(0,r.jsx)(t.code,{children:"tls"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Optional"})}),"\n",(0,r.jsx)(t.p,{children:"Defines the Client TLS configuration used by the exporter to send metrics to the OpenTelemetry Collector."}),"\n",(0,r.jsx)(t.h5,{id:"ca-1",children:(0,r.jsx)(t.code,{children:"ca"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Optional"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"ca"})," is the path to the certificate authority used for the secure connection to the OpenTelemetry Collector,\nit defaults to the system bundle."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"metrics:\n  otlp:\n    grpc:\n      tls:\n        ca: path/to/ca.crt\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[metrics.otlp.grpc.tls]\n  ca = "path/to/ca.crt"\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--metrics.otlp.grpc.tls.ca=path/to/ca.crt\n"})}),"\n",(0,r.jsx)(t.h5,{id:"cert-1",children:(0,r.jsx)(t.code,{children:"cert"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Optional"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"cert"})," is the path to the public certificate used for the secure connection to the OpenTelemetry Collector.\nWhen using this option, setting the ",(0,r.jsx)(t.code,{children:"key"})," option is required."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"metrics:\n  otlp:\n    grpc:\n      tls:\n        cert: path/to/foo.cert\n        key: path/to/foo.key\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[metrics.otlp.grpc.tls]\n  cert = "path/to/foo.cert"\n  key = "path/to/foo.key"\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--metrics.otlp.grpc.tls.cert=path/to/foo.cert\n--metrics.otlp.grpc.tls.key=path/to/foo.key\n"})}),"\n",(0,r.jsx)(t.h5,{id:"key-1",children:(0,r.jsx)(t.code,{children:"key"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Optional"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"key"})," is the path to the private key used for the secure connection to the OpenTelemetry Collector.\nWhen using this option, setting the ",(0,r.jsx)(t.code,{children:"cert"})," option is required."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"metrics:\n  otlp:\n    grpc:\n      tls:\n        cert: path/to/foo.cert\n        key: path/to/foo.key\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[metrics.otlp.grpc.tls]\n  cert = "path/to/foo.cert"\n  key = "path/to/foo.key"\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--metrics.otlp.grpc.tls.cert=path/to/foo.cert\n--metrics.otlp.grpc.tls.key=path/to/foo.key\n"})}),"\n",(0,r.jsx)(t.h5,{id:"insecureskipverify-1",children:(0,r.jsx)(t.code,{children:"insecureSkipVerify"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Optional, Default=false"})}),"\n",(0,r.jsxs)(t.p,{children:["If ",(0,r.jsx)(t.code,{children:"insecureSkipVerify"})," is ",(0,r.jsx)(t.code,{children:"true"}),",\nthe TLS connection to the OpenTelemetry Collector accepts any certificate presented by the server regardless of the hostnames it covers."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"metrics:\n  otlp:\n    grpc:\n      tls:\n        insecureSkipVerify: true\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[metrics.otlp.grpc.tls]\n  insecureSkipVerify = true\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--metrics.otlp.grpc.tls.insecureSkipVerify=true\n"})})]})}function h(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>i});var s=n(6540);const r={},l=s.createContext(r);function c(e){const t=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(l.Provider,{value:t},e.children)}}}]);