"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[8879],{4444:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"reference/routing-configuration/kubernetes/crd/http/middleware","title":"Mesh Kubernetes Middleware Documentation","description":"Learn how to configure a Mesh Proxy Kubernetes Middleware to reach Services, which handle incoming requests. Read the technical documentation.","source":"@site/docs/reference/routing-configuration/kubernetes/crd/http/middleware.md","sourceDirName":"reference/routing-configuration/kubernetes/crd/http","slug":"/reference/routing-configuration/kubernetes/crd/http/middleware","permalink":"/doc/docs/reference/routing-configuration/kubernetes/crd/http/middleware","draft":false,"unlisted":false,"editUrl":"https://github.com/opendatav/mesh/tree/main/packages/create-docusaurus/templates/shared/docs/reference/routing-configuration/kubernetes/crd/http/middleware.md","tags":[],"version":"current","frontMatter":{"title":"Mesh Kubernetes Middleware Documentation","description":"Learn how to configure a Mesh Proxy Kubernetes Middleware to reach Services, which handle incoming requests. Read the technical documentation."},"sidebar":"tutorialSidebar","previous":{"title":"Kubernetes IngressRoute","permalink":"/doc/docs/reference/routing-configuration/kubernetes/crd/http/ingressroute"},"next":{"title":"Kubernetes serversTransport","permalink":"/doc/docs/reference/routing-configuration/kubernetes/crd/http/serverstransport"}}');var o=r(4848),i=r(8453);const s={title:"Mesh Kubernetes Middleware Documentation",description:"Learn how to configure a Mesh Proxy Kubernetes Middleware to reach Services, which handle incoming requests. Read the technical documentation."},a=void 0,c={},d=[{value:"Configuration Example",id:"configuration-example",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Middleware"})," is the CRD implementation of a ",(0,o.jsx)(n.a,{href:"/doc/docs/reference/routing-configuration/http/middlewares/overview",children:"Mesh middleware"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Before creating ",(0,o.jsx)(n.code,{children:"Middleware"})," objects, you need to apply the ",(0,o.jsx)(n.a,{href:"https://doc.Mesh.io/Mesh/reference/dynamic-configuration/kubernetes-crd/#definitions",children:"Mesh Kubernetes CRDs"})," to your Kubernetes cluster."]}),"\n",(0,o.jsxs)(n.p,{children:["This registers the ",(0,o.jsx)(n.code,{children:"Middleware"})," kind and other mesh-specific resources."]}),"\n",(0,o.jsxs)(n.p,{children:['!!! tip "Cross-provider namespace"\nAs Kubernetes also has its own notion of namespace, one should not confuse the Kubernetes namespace of a resource (in the reference to the middleware) with the ',(0,o.jsx)(n.a,{href:"/doc/docs/reference/install-configuration/providers/overview#provider-namespace",children:"provider namespace"}),", when the definition of the middleware comes from another provider. In this context, specifying a namespace when referring to the resource does not make any sense, and will be ignored. Additionally, when you want to reference a Middleware from the CRD Provider, you have to append the namespace of the resource in the resource-name as Mesh appends the namespace internally automatically."]}),"\n",(0,o.jsxs)(n.p,{children:['!!! note "Cross-Namespace References"\nIn the example below, the middleware is defined in the ',(0,o.jsx)(n.code,{children:"foo"})," namespace while being referenced from an IngressRoute in another namespace. To enable such cross-namespace references, the ",(0,o.jsx)(n.code,{children:"allowCrossNamespace"})," option must be enabled in the Mesh ",(0,o.jsx)(n.a,{href:"/doc/docs/reference/install-configuration/providers/kubernetes/kubernetes-crd#configuration-options",children:"Kubernetes CRD provider"})," configuration. If you prefer to avoid this requirement, you can define and reference the Middleware within the same namespace."]}),"\n",(0,o.jsx)(n.h2,{id:"configuration-example",children:"Configuration Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:'tab="Middleware"',children:"apiVersion: Mesh.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: stripprefix\n  namespace: foo\n\nspec:\n  stripPrefix:\n    prefixes:\n      - /stripit\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:'tab="IngressRoute"',children:"apiVersion: Mesh.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: ingressroutebar\n\nspec:\n  entryPoints:\n    - web\n  routes:\n  - match: Host(`example.com`) && PathPrefix(`/stripit`)\n    kind: Rule\n    services:\n    - name: whoami\n      port: 80\n    middlewares:\n    - name: stripprefix\n      namespace: foo\n"})}),"\n",(0,o.jsxs)(n.p,{children:["For more information about the available middlewares, navigate to the dedicated ",(0,o.jsx)(n.a,{href:"/doc/docs/reference/routing-configuration/http/middlewares/overview",children:"middlewares overview section"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>a});var t=r(6540);const o={},i=t.createContext(o);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);