"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[4324],{3014:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>l,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"getting-started/quick-start","title":"Mesh Getting Started Quickly","description":"Get started with Mesh Proxy and Docker.","source":"@site/docs/getting-started/quick-start.md","sourceDirName":"getting-started","slug":"/getting-started/quick-start","permalink":"/doc/docs/getting-started/quick-start","draft":false,"unlisted":false,"editUrl":"https://github.com/opendatav/mesh/tree/main/packages/create-docusaurus/templates/shared/docs/getting-started/quick-start.md","tags":[],"version":"current","frontMatter":{"title":"Mesh Getting Started Quickly","description":"Get started with Mesh Proxy and Docker."},"sidebar":"tutorialSidebar","previous":{"title":"Mesh Getting Started With Kubernetes","permalink":"/doc/docs/getting-started/quick-start-with-kubernetes"},"next":{"title":"\u52a8\u6001\u914d\u7f6e\u7ba1\u7406","permalink":"/doc/docs/category/\u52a8\u6001\u914d\u7f6e\u7ba1\u7406"}}');var a=s(4848),r=s(8453);const o={title:"Mesh Getting Started Quickly",description:"Get started with Mesh Proxy and Docker."},c="Quick Start",i={},d=[{value:"Launch Mesh With the Docker Provider",id:"launch-mesh-with-the-docker-provider",level:2},{value:"Mesh Detects New Services and Creates the Route for You",id:"mesh-detects-new-services-and-creates-the-route-for-you",level:2},{value:"More Instances? Mesh Load Balances Them",id:"more-instances-mesh-load-balances-them",level:2}];function h(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"quick-start",children:"Quick Start"})}),"\n",(0,a.jsx)(t.p,{children:"A Use Case Using Docker"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"quickstart-diagram",src:s(5188).A+"",width:"719",height:"398"})}),"\n",(0,a.jsx)(t.h2,{id:"launch-mesh-with-the-docker-provider",children:"Launch Mesh With the Docker Provider"}),"\n",(0,a.jsxs)(t.p,{children:["Create a ",(0,a.jsx)(t.code,{children:"docker-compose.yml"})," file where you will define a ",(0,a.jsx)(t.code,{children:"reverse-proxy"})," service that uses the official Mesh image:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",children:'version: \'3\'\n\nservices:\n  reverse-proxy:\n    # The official v3 Mesh docker image\n    image: Mesh:v3.4\n    # Enables the web UI and tells Mesh to listen to docker\n    command: --api.insecure=true --providers.docker\n    ports:\n      # The HTTP port\n      - "80:80"\n      # The Web UI (enabled by --api.insecure=true)\n      - "8080:8080"\n    volumes:\n      # So that Mesh can listen to the Docker events\n      - /var/run/docker.sock:/var/run/docker.sock\n'})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"That's it. Now you can launch Mesh!"})}),"\n",(0,a.jsxs)(t.p,{children:["Start your ",(0,a.jsx)(t.code,{children:"reverse-proxy"})," with the following command:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-shell",children:"docker compose up -d reverse-proxy\n"})}),"\n",(0,a.jsxs)(t.p,{children:["You can open a browser and go to ",(0,a.jsx)(t.code,{children:"http://localhost:8080/api/rawdata"})," to see Mesh's API rawdata (you'll go back there once you have launched a service in step 2)."]}),"\n",(0,a.jsx)(t.h2,{id:"mesh-detects-new-services-and-creates-the-route-for-you",children:"Mesh Detects New Services and Creates the Route for You"}),"\n",(0,a.jsx)(t.p,{children:"Now that you have a Mesh instance up and running, you will deploy new services."}),"\n",(0,a.jsxs)(t.p,{children:["Edit your ",(0,a.jsx)(t.code,{children:"docker-compose.yml"})," file and add the following at the end of your file."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",children:"version: '3'\n\nservices:\n\n  ...\n\n  whoami:\n    # A container that exposes an API to show its IP address\n    image: Mesh/whoami\n    labels:\n      - \"Mesh.http.routers.whoami.rule=Host(`whoami.docker.localhost`)\"\n"})}),"\n",(0,a.jsxs)(t.p,{children:["The above defines ",(0,a.jsx)(t.code,{children:"whoami"}),": a web service that outputs information about the machine it is deployed on (its IP address, host, and others)."]}),"\n",(0,a.jsxs)(t.p,{children:["Start the ",(0,a.jsx)(t.code,{children:"whoami"})," service with the following command:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-shell",children:"docker compose up -d whoami\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Browse ",(0,a.jsx)(t.code,{children:"http://localhost:8080/api/rawdata"})," and see that Mesh has automatically detected the new container and updated its own configuration."]}),"\n",(0,a.jsxs)(t.p,{children:["When Mesh detects new services, it creates the corresponding routes, so you can call them ... ",(0,a.jsx)(t.em,{children:"let's see!"}),"  (Here, you're using curl)"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-shell",children:"curl -H Host:whoami.docker.localhost http://127.0.0.1\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.em,{children:"Shows the following output:"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",children:"Hostname: a656c8ddca6c\nIP: 172.27.0.3\n#...\n"})}),"\n",(0,a.jsx)(t.h2,{id:"more-instances-mesh-load-balances-them",children:"More Instances? Mesh Load Balances Them"}),"\n",(0,a.jsxs)(t.p,{children:["Run more instances of your ",(0,a.jsx)(t.code,{children:"whoami"})," service with the following command:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-shell",children:"docker compose up -d --scale whoami=2\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Browse to ",(0,a.jsx)(t.code,{children:"http://localhost:8080/api/rawdata"})," and see that Mesh has automatically detected the new instance of the container."]}),"\n",(0,a.jsx)(t.p,{children:"Finally, see that Mesh load-balances between the two instances of your service by running the following command twice:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-shell",children:"curl -H Host:whoami.docker.localhost http://127.0.0.1\n"})}),"\n",(0,a.jsx)(t.p,{children:"The output will show alternatively one of the following:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",children:"Hostname: a656c8ddca6c\nIP: 172.27.0.3\n#...\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",children:"Hostname: s458f154e1f1\nIP: 172.27.0.4\n# ...\n"})}),"\n",(0,a.jsx)(t.p,{children:'!!! question "Where to Go Next?"'}),"\n",(0,a.jsxs)(t.p,{children:["Now that you have a basic understanding of how Mesh can automatically create the routes to your services and load balance them, it is time to dive into ",(0,a.jsx)(t.a,{href:"../../user-guides/docker-compose/basic-example/",title:"Link to the user guides",children:"the user guides"})," and ",(0,a.jsx)(t.a,{href:"/",title:"Link to the docs landing page",children:"the documentation"})," and let Mesh work for you!"]})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},5188:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/quickstart-diagram-3158549aee80e7d78ffd53edf9c601b5.png"},8453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>c});var n=s(6540);const a={},r=n.createContext(a);function o(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);