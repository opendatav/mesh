"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[1820],{8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var s=n(6540);const o={},a=s.createContext(o);function r(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(a.Provider,{value:t},e.children)}},8597:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"https/include-acme-multiple-domains-example","title":"include-acme-multiple-domains-example","description":"","source":"@site/docs/https/include-acme-multiple-domains-example.md","sourceDirName":"https","slug":"/https/include-acme-multiple-domains-example","permalink":"/doc/docs/https/include-acme-multiple-domains-example","draft":false,"unlisted":false,"editUrl":"https://github.com/opendatav/mesh/tree/main/packages/create-docusaurus/templates/shared/docs/https/include-acme-multiple-domains-example.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Mesh Let\'s Encrypt Documentation","permalink":"/doc/docs/https/acme"},"next":{"title":"include-acme-multiple-domains-from-rule-example","permalink":"/doc/docs/https/include-acme-multiple-domains-from-rule-example"}}');var o=n(4848),a=n(8453);const r={},l=void 0,m={},c=[];function i(e){const t={code:"code",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-yaml",metastring:'tab="Docker & Swarm"',children:"## Dynamic configuration\nlabels:\n  - Mesh.http.routers.blog.rule=Host(`example.com`) && Path(`/blog`)\n  - Mesh.http.routers.blog.tls=true\n  - Mesh.http.routers.blog.tls.certresolver=myresolver\n  - Mesh.http.routers.blog.tls.domains[0].main=example.com\n  - Mesh.http.routers.blog.tls.domains[0].sans=*.example.org\n"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-yaml",metastring:'tab="Kubernetes"',children:"apiVersion: Mesh.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: blogtls\nspec:\n  entryPoints:\n    - websecure\n  routes:\n  - match: Host(`example.com`) && Path(`/blog`)\n    kind: Rule\n    services:\n    - name: blog\n      port: 8080\n  tls:\n    certResolver: myresolver\n    domains:\n    - main: example.com\n      sans:\n      - '*.example.org'\n"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:'## Dynamic configuration\nhttp:\n  routers:\n    blog:\n      rule: "Host(`example.com`) && Path(`/blog`)"\n      tls:\n        certResolver: myresolver\n        domains:\n          - main: "example.com"\n            sans:\n              - "*.example.org"\n'})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'## Dynamic configuration\n[http.routers]\n  [http.routers.blog]\n    rule = "Host(`example.com`) && Path(`/blog`)"\n    [http.routers.blog.tls]\n      certResolver = "myresolver" # From static configuration\n      [[http.routers.blog.tls.domains]]\n        main = "example.com"\n        sans = ["*.example.org"]\n'})})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(i,{...e})}):i(e)}}}]);