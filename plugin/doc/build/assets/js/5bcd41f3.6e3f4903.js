"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[2639],{1321:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"routing/services/index","title":"Mesh Services Documentation","description":"Learn how to configure routing and load balancing in Mesh Proxy to reach Services, which handle incoming requests. Read the technical documentation.","source":"@site/docs/routing/services/index.md","sourceDirName":"routing/services","slug":"/routing/services/","permalink":"/doc/docs/routing/services/","draft":false,"unlisted":false,"editUrl":"https://github.com/opendatav/mesh/tree/main/packages/create-docusaurus/templates/shared/docs/routing/services/index.md","tags":[],"version":"current","frontMatter":{"title":"Mesh Services Documentation","description":"Learn how to configure routing and load balancing in Mesh Proxy to reach Services, which handle incoming requests. Read the technical documentation."},"sidebar":"tutorialSidebar","previous":{"title":"Mesh Routers Documentation","permalink":"/doc/docs/routing/routers/"},"next":{"title":"\u4ee3\u7801\u8d21\u732e","permalink":"/doc/docs/category/\u4ee3\u7801\u8d21\u732e"}}');var i=r(4848),a=r(8453);const t={title:"Mesh Services Documentation",description:"Learn how to configure routing and load balancing in Mesh Proxy to reach Services, which handle incoming requests. Read the technical documentation."},c="Services",l={},o=[{value:"Configuration Examples",id:"configuration-examples",level:2},{value:"Configuring HTTP Services",id:"configuring-http-services",level:2},{value:"Servers Load Balancer",id:"servers-load-balancer",level:3},{value:"Servers",id:"servers",level:4},{value:"Load Balancing Strategy",id:"load-balancing-strategy",level:4},{value:"WRR",id:"wrr",level:5},{value:"P2C",id:"p2c",level:5},{value:"Sticky sessions",id:"sticky-sessions",level:4},{value:"Health Check",id:"health-check",level:4},{value:"Pass Host Header",id:"pass-host-header",level:4},{value:"ServersTransport",id:"serverstransport",level:4},{value:"Response Forwarding",id:"response-forwarding",level:4},{value:"ServersTransport",id:"serverstransport-1",level:3},{value:"<code>serverName</code>",id:"servername",level:4},{value:"<code>certificates</code>",id:"certificates",level:4},{value:"<code>insecureSkipVerify</code>",id:"insecureskipverify",level:4},{value:"<code>rootCAs</code>",id:"rootcas",level:4},{value:"<code>maxIdleConnsPerHost</code>",id:"maxidleconnsperhost",level:4},{value:"<code>disableHTTP2</code>",id:"disablehttp2",level:4},{value:"<code>peerCertURI</code>",id:"peercerturi",level:4},{value:"<code>spiffe</code>",id:"spiffe",level:4},{value:"<code>spiffe.ids</code>",id:"spiffeids",level:5},{value:"<code>spiffe.trustDomain</code>",id:"spiffetrustdomain",level:5},{value:"<code>forwardingTimeouts</code>",id:"forwardingtimeouts",level:4},{value:"<code>forwardingTimeouts.dialTimeout</code>",id:"forwardingtimeoutsdialtimeout",level:5},{value:"<code>forwardingTimeouts.responseHeaderTimeout</code>",id:"forwardingtimeoutsresponseheadertimeout",level:5},{value:"<code>forwardingTimeouts.idleConnTimeout</code>",id:"forwardingtimeoutsidleconntimeout",level:5},{value:"<code>forwardingTimeouts.readIdleTimeout</code>",id:"forwardingtimeoutsreadidletimeout",level:5},{value:"<code>forwardingTimeouts.pingTimeout</code>",id:"forwardingtimeoutspingtimeout",level:5},{value:"Weighted Round Robin (service)",id:"weighted-round-robin-service",level:3},{value:"Health Check",id:"health-check-1",level:4},{value:"Mirroring (service)",id:"mirroring-service",level:3},{value:"Health Check",id:"health-check-2",level:4},{value:"Failover (service)",id:"failover-service",level:3},{value:"Health Check",id:"health-check-3",level:4},{value:"Configuring TCP Services",id:"configuring-tcp-services",level:2},{value:"General",id:"general",level:3},{value:"Servers Load Balancer",id:"servers-load-balancer-1",level:3},{value:"Servers",id:"servers-1",level:4},{value:"<code>address</code>",id:"address",level:4},{value:"<code>tls</code>",id:"tls",level:4},{value:"ServersTransport",id:"serverstransport-2",level:4},{value:"PROXY Protocol",id:"proxy-protocol",level:4},{value:"Termination Delay",id:"termination-delay",level:4},{value:"Weighted Round Robin",id:"weighted-round-robin",level:3},{value:"ServersTransport",id:"serverstransport-3",level:3},{value:"<code>dialTimeout</code>",id:"dialtimeout",level:4},{value:"<code>dialKeepAlive</code>",id:"dialkeepalive",level:4},{value:"<code>terminationDelay</code>",id:"terminationdelay",level:4},{value:"<code>tls</code>",id:"tls-1",level:4},{value:"<code>tls.serverName</code>",id:"tlsservername",level:4},{value:"<code>tls.certificates</code>",id:"tlscertificates",level:4},{value:"<code>tls.insecureSkipVerify</code>",id:"tlsinsecureskipverify",level:4},{value:"<code>tls.rootCAs</code>",id:"tlsrootcas",level:4},{value:"<code>tls.peerCertURI</code>",id:"tlspeercerturi",level:4},{value:"<code>spiffe</code>",id:"spiffe-1",level:4},{value:"<code>spiffe.ids</code>",id:"spiffeids-1",level:5},{value:"<code>spiffe.trustDomain</code>",id:"spiffetrustdomain-1",level:5},{value:"Configuring UDP Services",id:"configuring-udp-services",level:2},{value:"General",id:"general-1",level:3},{value:"Servers Load Balancer",id:"servers-load-balancer-2",level:3},{value:"Servers",id:"servers-2",level:4},{value:"Weighted Round Robin",id:"weighted-round-robin-1",level:3}];function d(e){const n={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"services",children:"Services"})}),"\n",(0,i.jsx)(n.p,{children:"Configuring How to Reach the Services"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"services",src:r(7859).A+"",width:"719",height:"398"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Services"})," are responsible for configuring how to reach the actual services that will eventually handle the incoming requests."]}),"\n",(0,i.jsx)(n.h2,{id:"configuration-examples",children:"Configuration Examples"}),"\n",(0,i.jsxs)(n.p,{children:['??? example "Declaring an HTTP Service with Two Servers -- Using the ',(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File Provider"}),'"']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:'## Dynamic configuration\nhttp:\n  services:\n    my-service:\n      loadBalancer:\n        servers:\n        - url: "http://<private-ip-server-1>:<private-port-server-1>/"\n        - url: "http://<private-ip-server-2>:<private-port-server-2>/"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## Dynamic configuration\n[http.services]\n  [http.services.my-service.loadBalancer]\n\n    [[http.services.my-service.loadBalancer.servers]]\n      url = "http://<private-ip-server-1>:<private-port-server-1>/"\n    [[http.services.my-service.loadBalancer.servers]]\n      url = "http://<private-ip-server-2>:<private-port-server-2>/"\n'})}),"\n",(0,i.jsxs)(n.p,{children:['??? example "Declaring a TCP Service with Two Servers -- Using the ',(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File Provider"}),'"']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:'tcp:\n  services:\n    my-service:\n      loadBalancer:\n        servers:\n        - address: "<private-ip-server-1>:<private-port-server-1>"\n        - address: "<private-ip-server-2>:<private-port-server-2>"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## Dynamic configuration\n[tcp.services]\n  [tcp.services.my-service.loadBalancer]\n     [[tcp.services.my-service.loadBalancer.servers]]\n       address = "<private-ip-server-1>:<private-port-server-1>"\n     [[tcp.services.my-service.loadBalancer.servers]]\n       address = "<private-ip-server-2>:<private-port-server-2>"\n'})}),"\n",(0,i.jsxs)(n.p,{children:['??? example "Declaring a UDP Service with Two Servers -- Using the ',(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File Provider"}),'"']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:'udp:\n  services:\n    my-service:\n      loadBalancer:\n        servers:\n        - address: "<private-ip-server-1>:<private-port-server-1>"\n        - address: "<private-ip-server-2>:<private-port-server-2>"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## Dynamic configuration\n[udp.services]\n  [udp.services.my-service.loadBalancer]\n     [[udp.services.my-service.loadBalancer.servers]]\n       address = "<private-ip-server-1>:<private-port-server-1>"\n     [[udp.services.my-service.loadBalancer.servers]]\n       address = "<private-ip-server-2>:<private-port-server-2>"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"configuring-http-services",children:"Configuring HTTP Services"}),"\n",(0,i.jsx)(n.h3,{id:"servers-load-balancer",children:"Servers Load Balancer"}),"\n",(0,i.jsx)(n.p,{children:"The load balancers are able to load balance the requests between multiple instances of your programs."}),"\n",(0,i.jsx)(n.p,{children:"Each service has a load-balancer, even if there is only one server to forward traffic to."}),"\n",(0,i.jsxs)(n.p,{children:['??? example "Declaring a Service with Two Servers (with Load Balancing) -- Using the ',(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File Provider"}),'"']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:'http:\n  services:\n    my-service:\n      loadBalancer:\n        servers:\n        - url: "http://private-ip-server-1/"\n        - url: "http://private-ip-server-2/"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## Dynamic configuration\n[http.services]\n  [http.services.my-service.loadBalancer]\n\n    [[http.services.my-service.loadBalancer.servers]]\n      url = "http://private-ip-server-1/"\n    [[http.services.my-service.loadBalancer.servers]]\n      url = "http://private-ip-server-2/"\n'})}),"\n",(0,i.jsx)(n.h4,{id:"servers",children:"Servers"}),"\n",(0,i.jsx)(n.p,{children:"Servers declare a single instance of your program."}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"url"})," option point to a specific instance."]}),"\n",(0,i.jsxs)(n.p,{children:['??? example "A Service with One Server -- Using the ',(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File Provider"}),'"']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:'## Dynamic configuration\nhttp:\n  services:\n    my-service:\n      loadBalancer:\n        servers:\n          - url: "http://private-ip-server-1/"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## Dynamic configuration\n[http.services]\n  [http.services.my-service.loadBalancer]\n    [[http.services.my-service.loadBalancer.servers]]\n      url = "http://private-ip-server-1/"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"preservePath"})," option allows to preserve the URL path."]}),"\n",(0,i.jsx)(n.p,{children:'!!! info "Health Check"'}),"\n",(0,i.jsxs)(n.p,{children:["When a ",(0,i.jsx)(n.a,{href:"#health-check",children:"health check"})," is configured for the server, the path is not preserved."]}),"\n",(0,i.jsxs)(n.p,{children:['??? example "A Service with One Server and PreservePath -- Using the ',(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File Provider"}),'"']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:'## Dynamic configuration\nhttp:\n  services:\n    my-service:\n      loadBalancer:\n        servers:\n          - url: "http://private-ip-server-1/base"\n            preservePath: true\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## Dynamic configuration\n[http.services]\n  [http.services.my-service.loadBalancer]\n    [[http.services.my-service.loadBalancer.servers]]\n      url = "http://private-ip-server-1/base"\n      preservePath = true\n'})}),"\n",(0,i.jsx)(n.h4,{id:"load-balancing-strategy",children:"Load Balancing Strategy"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"strategy"})," option allows to choose the load balancing algorithm."]}),"\n",(0,i.jsx)(n.p,{children:"Two load balancing algorithms are supported:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Weighed round-robin (wrr)"}),"\n",(0,i.jsx)(n.li,{children:"Power of two choices (p2c)"}),"\n"]}),"\n",(0,i.jsx)(n.h5,{id:"wrr",children:"WRR"}),"\n",(0,i.jsx)(n.p,{children:"Weighed round-robin is the default strategy (and does not need to be specified)."}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"weight"})," option allows for weighted load balancing on the servers."]}),"\n",(0,i.jsxs)(n.p,{children:['??? example "A Service with Two Servers with Weight -- Using the ',(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File Provider"}),'"']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:'## Dynamic configuration\nhttp:\n  services:\n    my-service:\n      loadBalancer:\n        servers:\n          - url: "http://private-ip-server-1/"\n            weight: 2\n          - url: "http://private-ip-server-2/"\n            weight: 1\n\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## Dynamic configuration\n[http.services]\n  [http.services.my-service.loadBalancer]\n    [[http.services.my-service.loadBalancer.servers]]\n      url = "http://private-ip-server-1/"\n      weight = 2\n    [[http.services.my-service.loadBalancer.servers]]\n      url = "http://private-ip-server-2/"\n      weight = 1\n'})}),"\n",(0,i.jsx)(n.h5,{id:"p2c",children:"P2C"}),"\n",(0,i.jsx)(n.p,{children:"Power of two choices algorithm is a load balancing strategy that selects two servers at random and chooses the one with the least number of active requests."}),"\n",(0,i.jsxs)(n.p,{children:['??? example "P2C Load Balancing -- Using the ',(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File Provider"}),'"']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:'## Dynamic configuration\nhttp:\n  services:\n    my-service:\n      loadBalancer:\n        strategy: "p2c"\n        servers:\n        - url: "http://private-ip-server-1/"\n        - url: "http://private-ip-server-2/"\n        - url: "http://private-ip-server-3/"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## Dynamic configuration\n[http.services]\n  [http.services.my-service.loadBalancer]\n    strategy = "p2c"\n    [[http.services.my-service.loadBalancer.servers]]\n      url = "http://private-ip-server-1/"\n    [[http.services.my-service.loadBalancer.servers]]\n      url = "http://private-ip-server-2/"       \n    [[http.services.my-service.loadBalancer.servers]]\n      url = "http://private-ip-server-3/"\n'})}),"\n",(0,i.jsx)(n.h4,{id:"sticky-sessions",children:"Sticky sessions"}),"\n",(0,i.jsxs)(n.p,{children:["When sticky sessions are enabled, a ",(0,i.jsx)(n.code,{children:"Set-Cookie"})," header is set on the initial response to let the client know which server handles the first response.\nOn subsequent requests, to keep the session alive with the same server, the client should send the cookie with the value set."]}),"\n",(0,i.jsx)(n.p,{children:'!!! info "Stickiness on multiple levels"'}),"\n",(0,i.jsx)(n.p,{children:'When chaining or mixing load-balancers (e.g. a load-balancer of servers is one of the "children" of a load-balancer of services), for stickiness to work all the way, the option needs to be specified at all required levels. Which means the client needs to send a cookie with as many key/value pairs as there are sticky levels.'}),"\n",(0,i.jsx)(n.p,{children:'!!! info "Stickiness & Unhealthy Servers"'}),"\n",(0,i.jsx)(n.p,{children:"If the server specified in the cookie becomes unhealthy, the request will be forwarded to a new server (and the cookie will keep track of the new server)."}),"\n",(0,i.jsx)(n.p,{children:'!!! info "Cookie Name"'}),"\n",(0,i.jsxs)(n.p,{children:["The default cookie name is an abbreviation of a sha1 (ex: ",(0,i.jsx)(n.code,{children:"_1d52e"}),")."]}),"\n",(0,i.jsx)(n.p,{children:'!!! info "MaxAge"'}),"\n",(0,i.jsxs)(n.p,{children:["By default, the affinity cookie will never expire as the ",(0,i.jsx)(n.code,{children:"MaxAge"})," option is set to zero."]}),"\n",(0,i.jsxs)(n.p,{children:["This option indicates the number of seconds until the cookie expires.",(0,i.jsx)(n.br,{}),"\n","When set to a negative number, the cookie expires immediately."]}),"\n",(0,i.jsx)(n.p,{children:'!!! info "Secure & HTTPOnly & SameSite flags"'}),"\n",(0,i.jsx)(n.p,{children:"By default, the affinity cookie is created without those flags.\nOne however can change that through configuration."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"SameSite"})," can be ",(0,i.jsx)(n.code,{children:"none"}),", ",(0,i.jsx)(n.code,{children:"lax"}),", ",(0,i.jsx)(n.code,{children:"strict"})," or empty."]}),"\n",(0,i.jsx)(n.p,{children:'!!! info "Domain"'}),"\n",(0,i.jsx)(n.p,{children:"The Domain attribute of a cookie specifies the domain for which the cookie is valid."}),"\n",(0,i.jsxs)(n.p,{children:["By setting the Domain attribute, the cookie can be shared across subdomains (for example, a cookie set for example.com would be accessible to ",(0,i.jsx)(n.a,{href:"http://www.example.com",children:"www.example.com"}),", api.example.com, etc.). This is particularly useful in cases where sticky sessions span multiple subdomains, ensuring that the session is maintained even when the client interacts with different parts of the infrastructure."]}),"\n",(0,i.jsxs)(n.p,{children:['??? example "Adding Stickiness -- Using the ',(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File Provider"}),'"']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:"## Dynamic configuration\nhttp:\n  services:\n    my-service:\n      loadBalancer:\n        sticky:\n         cookie: {}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:"## Dynamic configuration\n[http.services]\n  [http.services.my-service]\n    [http.services.my-service.loadBalancer.sticky.cookie]\n"})}),"\n",(0,i.jsxs)(n.p,{children:['??? example "Adding Stickiness with custom Options -- Using the ',(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File Provider"}),'"']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:"## Dynamic configuration\nhttp:\n  services:\n    my-service:\n      loadBalancer:\n        sticky:\n          cookie:\n            name: my_sticky_cookie_name\n            secure: true\n            domain: mysite.site\n            httpOnly: true\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## Dynamic configuration\n[http.services]\n  [http.services.my-service]\n    [http.services.my-service.loadBalancer.sticky.cookie]\n      name = "my_sticky_cookie_name"\n      secure = true\n      httpOnly = true\n      domain = "mysite.site"\n      sameSite = "none"\n'})}),"\n",(0,i.jsxs)(n.p,{children:['??? example "Setting Stickiness on all the required levels -- Using the ',(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File Provider"}),'"']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:"## Dynamic configuration\nhttp:\n  services:\n    wrr1:\n      weighted:\n        sticky:\n          cookie:\n            name: lvl1\n        services:\n          - name: whoami1\n            weight: 1\n          - name: whoami2\n            weight: 1\n\n    whoami1:\n      loadBalancer:\n        sticky:\n          cookie:\n            name: lvl2\n        servers:\n          - url: http://127.0.0.1:8081\n          - url: http://127.0.0.1:8082\n\n    whoami2:\n      loadBalancer:\n        sticky:\n          cookie:\n            name: lvl2\n        servers:\n          - url: http://127.0.0.1:8083\n          - url: http://127.0.0.1:8084\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## Dynamic configuration\n[http.services]\n  [http.services.wrr1]\n    [http.services.wrr1.weighted.sticky.cookie]\n      name = "lvl1"\n    [[http.services.wrr1.weighted.services]]\n      name = "whoami1"\n      weight = 1\n    [[http.services.wrr1.weighted.services]]\n      name = "whoami2"\n      weight = 1\n\n  [http.services.whoami1]\n    [http.services.whoami1.loadBalancer]\n      [http.services.whoami1.loadBalancer.sticky.cookie]\n        name = "lvl2"\n      [[http.services.whoami1.loadBalancer.servers]]\n        url = "http://127.0.0.1:8081"\n      [[http.services.whoami1.loadBalancer.servers]]\n        url = "http://127.0.0.1:8082"\n\n  [http.services.whoami2]\n    [http.services.whoami2.loadBalancer]\n      [http.services.whoami2.loadBalancer.sticky.cookie]\n        name = "lvl2"\n      [[http.services.whoami2.loadBalancer.servers]]\n        url = "http://127.0.0.1:8083"\n      [[http.services.whoami2.loadBalancer.servers]]\n        url = "http://127.0.0.1:8084"\n'})}),"\n",(0,i.jsx)(n.p,{children:"To keep a session open with the same server, the client would then need to specify the two levels within the cookie for each request, e.g. with curl:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'curl -b "lvl1=whoami1; lvl2=http://127.0.0.1:8081" http://localhost:8000\n'})}),"\n",(0,i.jsx)(n.h4,{id:"health-check",children:"Health Check"}),"\n",(0,i.jsxs)(n.p,{children:["Configure health check to remove unhealthy servers from the load balancing rotation.\nMesh will consider HTTP(s) servers healthy as long as they return a status code to the health check request (carried out every ",(0,i.jsx)(n.code,{children:"interval"}),") between ",(0,i.jsx)(n.code,{children:"2XX"})," and ",(0,i.jsx)(n.code,{children:"3XX"}),", or matching the configured status.\nFor gRPC servers, Mesh will consider them healthy as long as they return ",(0,i.jsx)(n.code,{children:"SERVING"})," to ",(0,i.jsx)(n.a,{href:"https://github.com/grpc/grpc/blob/master/doc/health-checking.md",children:"gRPC health check v1"})," requests."]}),"\n",(0,i.jsx)(n.p,{children:"To propagate status changes (e.g. all servers of this service are down) upwards, HealthCheck must also be enabled on the parent(s) of this service."}),"\n",(0,i.jsx)(n.p,{children:"Below are the available options for the health check mechanism:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"path"})," (required), defines the server URL path for the health check endpoint ."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"scheme"})," (optional), replaces the server URL ",(0,i.jsx)(n.code,{children:"scheme"})," for the health check endpoint."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"mode"})," (default: http), if defined to ",(0,i.jsx)(n.code,{children:"grpc"}),", will use the gRPC health check protocol to probe the server."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"hostname"})," (optional), sets the value of ",(0,i.jsx)(n.code,{children:"hostname"})," in the ",(0,i.jsx)(n.code,{children:"Host"})," header of the health check request."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"port"})," (optional), replaces the server URL ",(0,i.jsx)(n.code,{children:"port"})," for the health check endpoint."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"interval"})," (default: 30s), defines the frequency of the health check calls for healthy targets."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"unhealthyInterval"})," (default: 30s), defines the frequency of the health check calls for unhealthy targets.  When not defined, it defaults to the ",(0,i.jsx)(n.code,{children:"interval"})," value."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"timeout"})," (default: 5s), defines the maximum duration Mesh will wait for a health check request before considering the server unhealthy."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"headers"})," (optional), defines custom headers to be sent to the health check endpoint."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"followRedirects"})," (default: true), defines whether redirects should be followed during the health check calls."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"method"})," (default: GET), defines the HTTP method that will be used while connecting to the endpoint."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"status"})," (optional), defines the expected HTTP status code of the response to the health check request."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:'!!! info "Interval & Timeout Format"'}),"\n",(0,i.jsxs)(n.p,{children:["Interval, UnhealthyInterval and Timeout are to be given in a format understood by ",(0,i.jsx)(n.a,{href:"https://golang.org/pkg/time/#ParseDuration",children:"time.ParseDuration"}),"."]}),"\n",(0,i.jsx)(n.p,{children:'!!! info "Recovering Servers"'}),"\n",(0,i.jsxs)(n.p,{children:["Mesh keeps monitoring the health of unhealthy servers.\nIf a server has recovered (returning ",(0,i.jsx)(n.code,{children:"2xx"})," -> ",(0,i.jsx)(n.code,{children:"3xx"})," responses again), it will be added back to the load balancer rotation pool."]}),"\n",(0,i.jsx)(n.p,{children:'!!! warning "Health check with Kubernetes"'}),"\n",(0,i.jsxs)(n.p,{children:["Kubernetes has an health check mechanism to remove unhealthy pods from Kubernetes services (cf ",(0,i.jsx)(n.a,{href:"https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-readiness-probes",children:"readiness probe"}),").\nAs unhealthy pods have no Kubernetes endpoints, Mesh will not forward traffic to them.\nTherefore, Mesh health check is not available for ",(0,i.jsx)(n.code,{children:"kubernetesCRD"})," and ",(0,i.jsx)(n.code,{children:"kubernetesIngress"})," providers."]}),"\n",(0,i.jsxs)(n.p,{children:['??? example "Custom Interval & Timeout -- Using the ',(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File Provider"}),'"']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:'## Dynamic configuration\nhttp:\n  services:\n    Service-1:\n      loadBalancer:\n        healthCheck:\n          path: /health\n          interval: "10s"\n          timeout: "3s"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## Dynamic configuration\n[http.services]\n  [http.services.Service-1]\n    [http.services.Service-1.loadBalancer.healthCheck]\n      path = "/health"\n      interval = "10s"\n      timeout = "3s"\n'})}),"\n",(0,i.jsxs)(n.p,{children:['??? example "Custom Port -- Using the ',(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File Provider"}),'"']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:"## Dynamic configuration\nhttp:\n  services:\n    Service-1:\n      loadBalancer:\n        healthCheck:\n          path: /health\n          port: 8080\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## Dynamic configuration\n[http.services]\n  [http.services.Service-1]\n    [http.services.Service-1.loadBalancer.healthCheck]\n      path = "/health"\n      port = 8080\n'})}),"\n",(0,i.jsxs)(n.p,{children:['??? example "Custom Scheme -- Using the ',(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File Provider"}),'"']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:"## Dynamic configuration\nhttp:\n  services:\n    Service-1:\n      loadBalancer:\n        healthCheck:\n          path: /health\n          scheme: http\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## Dynamic configuration\n[http.services]\n  [http.services.Service-1]\n    [http.services.Service-1.loadBalancer.healthCheck]\n      path = "/health"\n      scheme = "http"\n'})}),"\n",(0,i.jsxs)(n.p,{children:['??? example "Additional HTTP Headers -- Using the ',(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File Provider"}),'"']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:"## Dynamic configuration\nhttp:\n  services:\n    Service-1:\n      loadBalancer:\n        healthCheck:\n          path: /health\n          headers:\n            My-Custom-Header: foo\n            My-Header: bar\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## Dynamic configuration\n[http.services]\n  [http.services.Service-1]\n    [http.services.Service-1.loadBalancer.healthCheck]\n      path = "/health"\n\n      [http.services.Service-1.loadBalancer.healthCheck.headers]\n        My-Custom-Header = "foo"\n        My-Header = "bar"\n'})}),"\n",(0,i.jsx)(n.h4,{id:"pass-host-header",children:"Pass Host Header"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"passHostHeader"})," allows to forward client Host header to server."]}),"\n",(0,i.jsxs)(n.p,{children:["By default, ",(0,i.jsx)(n.code,{children:"passHostHeader"})," is true."]}),"\n",(0,i.jsxs)(n.p,{children:["??? example \"Don't forward the host header -- Using the ",(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File Provider"}),'"']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:"## Dynamic configuration\nhttp:\n  services:\n    Service01:\n      loadBalancer:\n        passHostHeader: false\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:"## Dynamic configuration\n[http.services]\n  [http.services.Service01]\n    [http.services.Service01.loadBalancer]\n      passHostHeader = false\n"})}),"\n",(0,i.jsx)(n.h4,{id:"serverstransport",children:"ServersTransport"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"serversTransport"})," allows to reference an ",(0,i.jsx)(n.a,{href:"/doc/docs/routing/services/#serverstransport_1",children:"HTTP ServersTransport"})," configuration for the communication between Mesh and your servers."]}),"\n",(0,i.jsxs)(n.p,{children:['??? example "Specify an HTTP transport -- Using the ',(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File Provider"}),'"']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:"## Dynamic configuration\nhttp:\n  services:\n    Service01:\n      loadBalancer:\n        serversTransport: mytransport\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## Dynamic configuration\n[http.services]\n  [http.services.Service01]\n    [http.services.Service01.loadBalancer]\n      serversTransport = "mytransport"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["!!! info Default Servers Transport\nIf no serversTransport is specified, the ",(0,i.jsx)(n.code,{children:"default@internal"})," will be used.\nThe ",(0,i.jsx)(n.code,{children:"default@internal"})," serversTransport is created from the ",(0,i.jsx)(n.a,{href:"/doc/docs/routing/overview#http-servers-transports",children:"static configuration"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"response-forwarding",children:"Response Forwarding"}),"\n",(0,i.jsx)(n.p,{children:"This section is about configuring how Mesh forwards the response from the backend server to the client."}),"\n",(0,i.jsx)(n.p,{children:"Below are the available options for the Response Forwarding mechanism:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FlushInterval"})," specifies the interval in between flushes to the client while copying the response body.\nIt is a duration in milliseconds, defaulting to 100.\nA negative value means to flush immediately after each write to the client.\nThe FlushInterval is ignored when ReverseProxy recognizes a response as a streaming response;\nfor such responses, writes are flushed to the client immediately."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:['??? example "Using a custom FlushInterval -- Using the ',(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File Provider"}),'"']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:"## Dynamic configuration\nhttp:\n  services:\n    Service-1:\n      loadBalancer:\n        responseForwarding:\n          flushInterval: 1s\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## Dynamic configuration\n[http.services]\n  [http.services.Service-1]\n    [http.services.Service-1.loadBalancer.responseForwarding]\n      flushInterval = "1s"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"serverstransport-1",children:"ServersTransport"}),"\n",(0,i.jsx)(n.p,{children:"ServersTransport allows to configure the transport between Mesh and your HTTP servers."}),"\n",(0,i.jsx)(n.h4,{id:"servername",children:(0,i.jsx)(n.code,{children:"serverName"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Optional"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"serverName"})," configure the server name that will be used for SNI."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:'## Dynamic configuration\nhttp:\n  serversTransports:\n    mytransport:\n      serverName: "myhost"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'## Dynamic configuration\n[http.serversTransports.mytransport]\n  serverName = "myhost"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="Kubernetes"',children:'apiVersion: Mesh.io/v1alpha1\nkind: ServersTransport\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  serverName: "test"\n'})}),"\n",(0,i.jsx)(n.h4,{id:"certificates",children:(0,i.jsx)(n.code,{children:"certificates"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Optional"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"certificates"})," is the list of certificates (as file paths, or data bytes)\nthat will be set as client certificates for mTLS."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"## Dynamic configuration\nhttp:\n  serversTransports:\n    mytransport:\n      certificates:\n        - certFile: foo.crt\n          keyFile: bar.crt\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'## Dynamic configuration\n[[http.serversTransports.mytransport.certificates]]\n  certFile = "foo.crt"\n  keyFile = "bar.crt"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="Kubernetes"',children:"apiVersion: Mesh.io/v1alpha1\nkind: ServersTransport\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  certificatesSecrets:\n    - mycert\n\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mycert\n\ndata:\n  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\n  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0=\n"})}),"\n",(0,i.jsx)(n.h4,{id:"insecureskipverify",children:(0,i.jsx)(n.code,{children:"insecureSkipVerify"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Optional"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"insecureSkipVerify"})," controls whether the server's certificate chain and host name is verified."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"## Dynamic configuration\nhttp:\n  serversTransports:\n    mytransport:\n      insecureSkipVerify: true\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"## Dynamic configuration\n[http.serversTransports.mytransport]\n  insecureSkipVerify = true\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="Kubernetes"',children:"apiVersion: Mesh.io/v1alpha1\nkind: ServersTransport\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  insecureSkipVerify: true\n"})}),"\n",(0,i.jsx)(n.h4,{id:"rootcas",children:(0,i.jsx)(n.code,{children:"rootCAs"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Optional"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"rootCAs"})," defines the set of root certificate authorities (as file paths, or data bytes) to use when verifying server certificates."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"## Dynamic configuration\nhttp:\n  serversTransports:\n    mytransport:\n      rootCAs:\n        - foo.crt\n        - bar.crt\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'## Dynamic configuration\n[http.serversTransports.mytransport]\n  rootCAs = ["foo.crt", "bar.crt"]\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="Kubernetes"',children:"apiVersion: Mesh.io/v1alpha1\nkind: ServersTransport\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  rootCAsSecrets:\n    - myca\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: myca\n\ndata:\n  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\n"})}),"\n",(0,i.jsx)(n.h4,{id:"maxidleconnsperhost",children:(0,i.jsx)(n.code,{children:"maxIdleConnsPerHost"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Optional, Default=2"})}),"\n",(0,i.jsxs)(n.p,{children:["If non-zero, ",(0,i.jsx)(n.code,{children:"maxIdleConnsPerHost"})," controls the maximum idle (keep-alive) connections to keep per-host."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"## Dynamic configuration\nhttp:\n  serversTransports:\n    mytransport:\n      maxIdleConnsPerHost: 7\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"## Dynamic configuration\n[http.serversTransports.mytransport]\n  maxIdleConnsPerHost = 7\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="Kubernetes"',children:"apiVersion: Mesh.io/v1alpha1\nkind: ServersTransport\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  maxIdleConnsPerHost: 7\n"})}),"\n",(0,i.jsx)(n.h4,{id:"disablehttp2",children:(0,i.jsx)(n.code,{children:"disableHTTP2"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Optional, Default=false"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"disableHTTP2"})," disables HTTP/2 for connections with servers."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"## Dynamic configuration\nhttp:\n  serversTransports:\n    mytransport:\n      disableHTTP2: true\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"## Dynamic configuration\n[http.serversTransports.mytransport]\n  disableHTTP2 = true\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="Kubernetes"',children:"apiVersion: Mesh.io/v1alpha1\nkind: ServersTransport\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  disableHTTP2: true\n"})}),"\n",(0,i.jsx)(n.h4,{id:"peercerturi",children:(0,i.jsx)(n.code,{children:"peerCertURI"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:'Optional, Default=""'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"peerCertURI"})," defines the URI used to match against SAN URIs during the server's certificate verification."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"## Dynamic configuration\nhttp:\n  serversTransports:\n    mytransport:\n      peerCertURI: foobar\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'## Dynamic configuration\n[http.serversTransports.mytransport]\n  peerCertURI = "foobar"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="Kubernetes"',children:"apiVersion: Mesh.io/v1alpha1\nkind: ServersTransport\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  peerCertURI: foobar\n"})}),"\n",(0,i.jsx)(n.h4,{id:"spiffe",children:(0,i.jsx)(n.code,{children:"spiffe"})}),"\n",(0,i.jsxs)(n.p,{children:["Please note that ",(0,i.jsx)(n.a,{href:"/doc/docs/https/spiffe",children:"SPIFFE"})," must be enabled in the static configuration\nbefore using it to secure the connection between Mesh and the backends."]}),"\n",(0,i.jsx)(n.h5,{id:"spiffeids",children:(0,i.jsx)(n.code,{children:"spiffe.ids"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Optional"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"ids"})," defines the allowed SPIFFE IDs.\nThis takes precedence over the SPIFFE TrustDomain."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"## Dynamic configuration\nhttp:\n  serversTransports:\n    mytransport:\n      spiffe:\n        ids:\n          - spiffe://trust-domain/id1\n          - spiffe://trust-domain/id2\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'## Dynamic configuration\n[http.serversTransports.mytransport.spiffe]\n  ids = ["spiffe://trust-domain/id1", "spiffe://trust-domain/id2"]\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="Kubernetes"',children:"apiVersion: Mesh.io/v1alpha1\nkind: ServersTransport\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n    spiffe:\n      ids:\n        - spiffe://trust-domain/id1\n        - spiffe://trust-domain/id2\n"})}),"\n",(0,i.jsx)(n.h5,{id:"spiffetrustdomain",children:(0,i.jsx)(n.code,{children:"spiffe.trustDomain"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Optional"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"trustDomain"})," defines the allowed SPIFFE trust domain."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"## Dynamic configuration\nhttp:\n  serversTransports:\n    mytransport:\n        spiffe:\n          trustDomain: spiffe://trust-domain\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'## Dynamic configuration\n[http.serversTransports.mytransport.spiffe]\n  trustDomain = "spiffe://trust-domain"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="Kubernetes"',children:'apiVersion: Mesh.io/v1alpha1\nkind: ServersTransport\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n    spiffe:\n      trustDomain: "spiffe://trust-domain"\n'})}),"\n",(0,i.jsx)(n.h4,{id:"forwardingtimeouts",children:(0,i.jsx)(n.code,{children:"forwardingTimeouts"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"forwardingTimeouts"})," are the timeouts applied when forwarding requests to the servers."]}),"\n",(0,i.jsx)(n.h5,{id:"forwardingtimeoutsdialtimeout",children:(0,i.jsx)(n.code,{children:"forwardingTimeouts.dialTimeout"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Optional, Default=30s"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"dialTimeout"})," is the maximum duration allowed for a connection to a backend server to be established.\nZero means no timeout."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:'## Dynamic configuration\nhttp:\n  serversTransports:\n    mytransport:\n      forwardingTimeouts:\n        dialTimeout: "1s"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'## Dynamic configuration\n[http.serversTransports.mytransport.forwardingTimeouts]\n  dialTimeout = "1s"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="Kubernetes"',children:'apiVersion: Mesh.io/v1alpha1\nkind: ServersTransport\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n    forwardingTimeouts:\n      dialTimeout: "1s"\n'})}),"\n",(0,i.jsx)(n.h5,{id:"forwardingtimeoutsresponseheadertimeout",children:(0,i.jsx)(n.code,{children:"forwardingTimeouts.responseHeaderTimeout"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Optional, Default=0s"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"responseHeaderTimeout"}),", if non-zero, specifies the amount of time to wait for a server's response headers\nafter fully writing the request (including its body, if any).\nThis time does not include the time to read the response body.\nZero means no timeout."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:'## Dynamic configuration\nhttp:\n  serversTransports:\n    mytransport:\n      forwardingTimeouts:\n        responseHeaderTimeout: "1s"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'## Dynamic configuration\n[http.serversTransports.mytransport.forwardingTimeouts]\n  responseHeaderTimeout = "1s"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="Kubernetes"',children:'apiVersion: Mesh.io/v1alpha1\nkind: ServersTransport\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  forwardingTimeouts:\n    responseHeaderTimeout: "1s"\n'})}),"\n",(0,i.jsx)(n.h5,{id:"forwardingtimeoutsidleconntimeout",children:(0,i.jsx)(n.code,{children:"forwardingTimeouts.idleConnTimeout"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Optional, Default=90s"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"idleConnTimeout"})," is the maximum amount of time an idle (keep-alive) connection will remain idle before closing itself.\nZero means no limit."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:'## Dynamic configuration\nhttp:\n  serversTransports:\n    mytransport:\n      forwardingTimeouts:\n        idleConnTimeout: "1s"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'## Dynamic configuration\n[http.serversTransports.mytransport.forwardingTimeouts]\n  idleConnTimeout = "1s"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="Kubernetes"',children:'apiVersion: Mesh.io/v1alpha1\nkind: ServersTransport\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  forwardingTimeouts:\n    idleConnTimeout: "1s"\n'})}),"\n",(0,i.jsx)(n.h5,{id:"forwardingtimeoutsreadidletimeout",children:(0,i.jsx)(n.code,{children:"forwardingTimeouts.readIdleTimeout"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Optional, Default=0s"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"readIdleTimeout"})," is the timeout after which a health check using ping frame will be carried out\nif no frame is received on the HTTP/2 connection.\nNote that a ping response will be considered a received frame,\nso if there is no other traffic on the connection,\nthe health check will be performed every ",(0,i.jsx)(n.code,{children:"readIdleTimeout"})," interval.\nIf zero, no health check is performed."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:'## Dynamic configuration\nhttp:\n  serversTransports:\n    mytransport:\n      forwardingTimeouts:\n        readIdleTimeout: "1s"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'## Dynamic configuration\n[http.serversTransports.mytransport.forwardingTimeouts]\n  readIdleTimeout = "1s"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="Kubernetes"',children:'apiVersion: Mesh.io/v1alpha1\nkind: ServersTransport\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  forwardingTimeouts:\n    readIdleTimeout: "1s"\n'})}),"\n",(0,i.jsx)(n.h5,{id:"forwardingtimeoutspingtimeout",children:(0,i.jsx)(n.code,{children:"forwardingTimeouts.pingTimeout"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Optional, Default=15s"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"pingTimeout"})," is the timeout after which the HTTP/2 connection will be closed\nif a response to ping is not received."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:'## Dynamic configuration\nhttp:\n  serversTransports:\n    mytransport:\n      forwardingTimeouts:\n        pingTimeout: "1s"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'## Dynamic configuration\n[http.serversTransports.mytransport.forwardingTimeouts]\n  pingTimeout = "1s"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="Kubernetes"',children:'apiVersion: Mesh.io/v1alpha1\nkind: ServersTransport\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  forwardingTimeouts:\n    pingTimeout: "1s"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"weighted-round-robin-service",children:"Weighted Round Robin (service)"}),"\n",(0,i.jsx)(n.p,{children:"The WRR is able to load balance the requests between multiple services based on weights."}),"\n",(0,i.jsxs)(n.p,{children:["This strategy is only available to load balance between ",(0,i.jsx)(n.a,{href:"/doc/docs/routing/services/",children:"services"})," and not between ",(0,i.jsx)(n.a,{href:"/doc/docs/routing/services/#servers",children:"servers"}),"."]}),"\n",(0,i.jsx)(n.p,{children:'!!! info "Supported Providers"'}),"\n",(0,i.jsxs)(n.p,{children:["This strategy can be defined currently with the ",(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File"})," or ",(0,i.jsx)(n.a,{href:"/doc/docs/providers/kubernetes-crd",children:"IngressRoute"})," providers."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:'## Dynamic configuration\nhttp:\n  services:\n    app:\n      weighted:\n        services:\n        - name: appv1\n          weight: 3\n        - name: appv2\n          weight: 1\n\n    appv1:\n      loadBalancer:\n        servers:\n        - url: "http://private-ip-server-1/"\n\n    appv2:\n      loadBalancer:\n        servers:\n        - url: "http://private-ip-server-2/"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## Dynamic configuration\n[http.services]\n  [http.services.app]\n    [[http.services.app.weighted.services]]\n      name = "appv1"\n      weight = 3\n    [[http.services.app.weighted.services]]\n      name = "appv2"\n      weight = 1\n\n  [http.services.appv1]\n    [http.services.appv1.loadBalancer]\n      [[http.services.appv1.loadBalancer.servers]]\n        url = "http://private-ip-server-1/"\n\n  [http.services.appv2]\n    [http.services.appv2.loadBalancer]\n      [[http.services.appv2.loadBalancer.servers]]\n        url = "http://private-ip-server-2/"\n'})}),"\n",(0,i.jsx)(n.h4,{id:"health-check-1",children:"Health Check"}),"\n",(0,i.jsx)(n.p,{children:"HealthCheck enables automatic self-healthcheck for this service, i.e. whenever\none of its children is reported as down, this service becomes aware of it, and\ntakes it into account (i.e. it ignores the down child) when running the\nload-balancing algorithm. In addition, if the parent of this service also has\nHealthCheck enabled, this service reports to its parent any status change."}),"\n",(0,i.jsx)(n.p,{children:'!!! info "All or nothing"'}),"\n",(0,i.jsx)(n.p,{children:"If HealthCheck is enabled for a given service, but any of its descendants does\nnot have it enabled, the creation of the service will fail."}),"\n",(0,i.jsxs)(n.p,{children:["HealthCheck on Weighted services can be defined currently only with the ",(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File"})," provider."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:'## Dynamic configuration\nhttp:\n  services:\n    app:\n      weighted:\n        healthCheck: {}\n        services:\n        - name: appv1\n          weight: 3\n        - name: appv2\n          weight: 1\n\n    appv1:\n      loadBalancer:\n        healthCheck:\n          path: /status\n          interval: 10s\n          timeout: 3s\n        servers:\n        - url: "http://private-ip-server-1/"\n\n    appv2:\n      loadBalancer:\n        healthCheck:\n          path: /status\n          interval: 10s\n          timeout: 3s\n        servers:\n        - url: "http://private-ip-server-2/"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## Dynamic configuration\n[http.services]\n  [http.services.app]\n    [http.services.app.weighted.healthCheck]\n    [[http.services.app.weighted.services]]\n      name = "appv1"\n      weight = 3\n    [[http.services.app.weighted.services]]\n      name = "appv2"\n      weight = 1\n\n  [http.services.appv1]\n    [http.services.appv1.loadBalancer]\n      [http.services.appv1.loadBalancer.healthCheck]\n        path = "/health"\n        interval = "10s"\n        timeout = "3s"\n      [[http.services.appv1.loadBalancer.servers]]\n        url = "http://private-ip-server-1/"\n\n  [http.services.appv2]\n    [http.services.appv2.loadBalancer]\n      [http.services.appv2.loadBalancer.healthCheck]\n        path = "/health"\n        interval = "10s"\n        timeout = "3s"\n      [[http.services.appv2.loadBalancer.servers]]\n        url = "http://private-ip-server-2/"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"mirroring-service",children:"Mirroring (service)"}),"\n",(0,i.jsxs)(n.p,{children:["The mirroring is able to mirror requests sent to a service to other services.\nPlease note that by default the whole request is buffered in memory while it is being mirrored.\nSee the maxBodySize option in the example below for how to modify this behaviour.\nYou can also omit the request body by setting the mirrorBody option to ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,i.jsx)(n.p,{children:'!!! info "Supported Providers"'}),"\n",(0,i.jsxs)(n.p,{children:["This strategy can be defined currently with the ",(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File"})," or ",(0,i.jsx)(n.a,{href:"/doc/docs/providers/kubernetes-crd",children:"IngressRoute"})," providers."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:'## Dynamic configuration\nhttp:\n  services:\n    mirrored-api:\n      mirroring:\n        service: appv1\n        # mirrorBody defines whether the request body should be mirrored.\n        # Default value is true.\n        mirrorBody: false\n        # maxBodySize is the maximum size allowed for the body of the request.\n        # If the body is larger, the request is not mirrored.\n        # Default value is -1, which means unlimited size.\n        maxBodySize: 1024\n        mirrors:\n        - name: appv2\n          percent: 10\n\n    appv1:\n      loadBalancer:\n        servers:\n        - url: "http://private-ip-server-1/"\n\n    appv2:\n      loadBalancer:\n        servers:\n        - url: "http://private-ip-server-2/"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## Dynamic configuration\n[http.services]\n  [http.services.mirrored-api]\n    [http.services.mirrored-api.mirroring]\n      service = "appv1"\n      # maxBodySize is the maximum size in bytes allowed for the body of the request.\n      # If the body is larger, the request is not mirrored.\n      # Default value is -1, which means unlimited size.\n      maxBodySize = 1024\n      # mirrorBody defines whether the request body should be mirrored.\n      # Default value is true.\n      mirrorBody = false\n    [[http.services.mirrored-api.mirroring.mirrors]]\n      name = "appv2"\n      percent = 10\n\n  [http.services.appv1]\n    [http.services.appv1.loadBalancer]\n      [[http.services.appv1.loadBalancer.servers]]\n        url = "http://private-ip-server-1/"\n\n  [http.services.appv2]\n    [http.services.appv2.loadBalancer]\n      [[http.services.appv2.loadBalancer.servers]]\n        url = "http://private-ip-server-2/"\n'})}),"\n",(0,i.jsx)(n.h4,{id:"health-check-2",children:"Health Check"}),"\n",(0,i.jsx)(n.p,{children:"HealthCheck enables automatic self-healthcheck for this service, i.e. if the\nmain handler of the service becomes unreachable, the information is propagated\nupwards to its parent."}),"\n",(0,i.jsx)(n.p,{children:'!!! info "All or nothing"'}),"\n",(0,i.jsx)(n.p,{children:"If HealthCheck is enabled for a given service, but any of its descendants does\nnot have it enabled, the creation of the service will fail."}),"\n",(0,i.jsxs)(n.p,{children:["HealthCheck on Mirroring services can be defined currently only with the ",(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File"})," provider."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:'## Dynamic configuration\nhttp:\n  services:\n    mirrored-api:\n      mirroring:\n        healthCheck: {}\n        service: appv1\n        mirrors:\n        - name: appv2\n          percent: 10\n\n    appv1:\n      loadBalancer:\n        healthCheck:\n          path: /status\n          interval: 10s\n          timeout: 3s\n        servers:\n        - url: "http://private-ip-server-1/"\n\n    appv2:\n      loadBalancer:\n        servers:\n        - url: "http://private-ip-server-2/"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## Dynamic configuration\n[http.services]\n  [http.services.mirrored-api]\n    [http.services.mirrored-api.mirroring]\n      [http.services.mirrored-api.mirroring.healthCheck]\n      service = "appv1"\n    [[http.services.mirrored-api.mirroring.mirrors]]\n      name = "appv2"\n      percent = 10\n\n  [http.services.appv1]\n    [http.services.appv1.loadBalancer]\n      [http.services.appv1.loadBalancer.healthCheck]\n        path = "/health"\n        interval = "10s"\n        timeout = "3s"\n      [[http.services.appv1.loadBalancer.servers]]\n        url = "http://private-ip-server-1/"\n\n  [http.services.appv2]\n    [http.services.appv2.loadBalancer]\n      [http.services.appv1.loadBalancer.healthCheck]\n        path = "/health"\n        interval = "10s"\n        timeout = "3s"\n      [[http.services.appv2.loadBalancer.servers]]\n        url = "http://private-ip-server-2/"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"failover-service",children:"Failover (service)"}),"\n",(0,i.jsx)(n.p,{children:"A failover service job is to forward all requests to a fallback service when the main service becomes unreachable."}),"\n",(0,i.jsx)(n.p,{children:'!!! info "Relation to HealthCheck"'}),"\n",(0,i.jsx)(n.p,{children:"The failover service relies on the HealthCheck system to get notified when its main service becomes unreachable,\nwhich means HealthCheck needs to be enabled and functional on the main service.\nHowever, HealthCheck does not need to be enabled on the failover service itself for it to be functional.\nIt is only required in order to propagate upwards the information when the failover itself becomes down\n(i.e. both its main and its fallback are down too)."}),"\n",(0,i.jsx)(n.p,{children:'!!! info "Supported Providers"'}),"\n",(0,i.jsxs)(n.p,{children:["This strategy can currently only be defined with the ",(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File"})," provider."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:'## Dynamic configuration\nhttp:\n  services:\n    app:\n      failover:\n        service: main\n        fallback: backup\n\n    main:\n      loadBalancer:\n        healthCheck:\n          path: /status\n          interval: 10s\n          timeout: 3s\n        servers:\n        - url: "http://private-ip-server-1/"\n\n    backup:\n      loadBalancer:\n        servers:\n        - url: "http://private-ip-server-2/"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## Dynamic configuration\n[http.services]\n  [http.services.app]\n    [http.services.app.failover]\n      service = "main"\n      fallback = "backup"\n\n  [http.services.main]\n    [http.services.main.loadBalancer]\n      [http.services.main.loadBalancer.healthCheck]\n        path = "/health"\n        interval = "10s"\n        timeout = "3s"\n      [[http.services.main.loadBalancer.servers]]\n        url = "http://private-ip-server-1/"\n\n  [http.services.backup]\n    [http.services.backup.loadBalancer]\n      [[http.services.backup.loadBalancer.servers]]\n        url = "http://private-ip-server-2/"\n'})}),"\n",(0,i.jsx)(n.h4,{id:"health-check-3",children:"Health Check"}),"\n",(0,i.jsx)(n.p,{children:"HealthCheck enables automatic self-healthcheck for this service,\ni.e. if the main and the fallback services become unreachable,\nthe information is propagated upwards to its parent."}),"\n",(0,i.jsx)(n.p,{children:'!!! info "All or nothing"'}),"\n",(0,i.jsx)(n.p,{children:"If HealthCheck is enabled for a given service, but any of its descendants does\nnot have it enabled, the creation of the service will fail."}),"\n",(0,i.jsxs)(n.p,{children:["HealthCheck on a Failover service can currently only be defined with the ",(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File"})," provider."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:'## Dynamic configuration\nhttp:\n  services:\n    app:\n      failover:\n        healthCheck: {}\n        service: main\n        fallback: backup\n\n    main:\n      loadBalancer:\n        healthCheck:\n          path: /status\n          interval: 10s\n          timeout: 3s\n        servers:\n        - url: "http://private-ip-server-1/"\n\n    backup:\n      loadBalancer:\n        healthCheck:\n          path: /status\n          interval: 10s\n          timeout: 3s\n        servers:\n        - url: "http://private-ip-server-2/"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## Dynamic configuration\n[http.services]\n  [http.services.app]\n    [http.services.app.failover.healthCheck]\n    [http.services.app.failover]\n      service = "main"\n      fallback = "backup"\n\n  [http.services.main]\n    [http.services.main.loadBalancer]\n      [http.services.main.loadBalancer.healthCheck]\n        path = "/health"\n        interval = "10s"\n        timeout = "3s"\n      [[http.services.main.loadBalancer.servers]]\n        url = "http://private-ip-server-1/"\n\n  [http.services.backup]\n    [http.services.backup.loadBalancer]\n      [http.services.backup.loadBalancer.healthCheck]\n        path = "/health"\n        interval = "10s"\n        timeout = "3s"\n      [[http.services.backup.loadBalancer.servers]]\n        url = "http://private-ip-server-2/"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"configuring-tcp-services",children:"Configuring TCP Services"}),"\n",(0,i.jsx)(n.h3,{id:"general",children:"General"}),"\n",(0,i.jsxs)(n.p,{children:["Each of the fields of the service section represents a kind of service.\nWhich means, that for each specified service, one of the fields, and only one,\nhas to be enabled to define what kind of service is created.\nCurrently, the two available kinds are ",(0,i.jsx)(n.code,{children:"LoadBalancer"}),", and ",(0,i.jsx)(n.code,{children:"Weighted"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"servers-load-balancer-1",children:"Servers Load Balancer"}),"\n",(0,i.jsx)(n.p,{children:"The servers load balancer is in charge of balancing the requests between the servers of the same service."}),"\n",(0,i.jsxs)(n.p,{children:['??? example "Declaring a Service with Two Servers -- Using the ',(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File Provider"}),'"']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:'## Dynamic configuration\ntcp:\n  services:\n    my-service:\n      loadBalancer:\n        servers:\n        - address: "xx.xx.xx.xx:xx"\n        - address: "xx.xx.xx.xx:xx"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## Dynamic configuration\n[tcp.services]\n  [tcp.services.my-service.loadBalancer]\n    [[tcp.services.my-service.loadBalancer.servers]]\n      address = "xx.xx.xx.xx:xx"\n    [[tcp.services.my-service.loadBalancer.servers]]\n       address = "xx.xx.xx.xx:xx"\n'})}),"\n",(0,i.jsx)(n.h4,{id:"servers-1",children:"Servers"}),"\n",(0,i.jsx)(n.p,{children:"Servers declare a single instance of your program."}),"\n",(0,i.jsx)(n.h4,{id:"address",children:(0,i.jsx)(n.code,{children:"address"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"address"})," option (IP",":Port",") point to a specific instance."]}),"\n",(0,i.jsxs)(n.p,{children:['??? example "A Service with One Server -- Using the ',(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File Provider"}),'"']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:'## Dynamic configuration\ntcp:\n  services:\n    my-service:\n      loadBalancer:\n        servers:\n          - address: "xx.xx.xx.xx:xx"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## Dynamic configuration\n[tcp.services]\n  [tcp.services.my-service.loadBalancer]\n    [[tcp.services.my-service.loadBalancer.servers]]\n      address = "xx.xx.xx.xx:xx"\n'})}),"\n",(0,i.jsx)(n.h4,{id:"tls",children:(0,i.jsx)(n.code,{children:"tls"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"tls"})," determines whether to use TLS when dialing with the backend."]}),"\n",(0,i.jsxs)(n.p,{children:['??? example "A Service with One Server Using TLS -- Using the ',(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File Provider"}),'"']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:'## Dynamic configuration\ntcp:\n  services:\n    my-service:\n      loadBalancer:\n        servers:\n          - address: "xx.xx.xx.xx:xx"\n            tls: true\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## Dynamic configuration\n[tcp.services]\n  [tcp.services.my-service.loadBalancer]\n    [[tcp.services.my-service.loadBalancer.servers]]\n      address = "xx.xx.xx.xx:xx"\n      tls = true\n'})}),"\n",(0,i.jsx)(n.h4,{id:"serverstransport-2",children:"ServersTransport"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"serversTransport"})," allows to reference a ",(0,i.jsx)(n.a,{href:"/doc/docs/routing/services/#serverstransport_3",children:"TCP ServersTransport"})," configuration for the communication between Mesh and your servers."]}),"\n",(0,i.jsxs)(n.p,{children:['??? example "Specify a TCP transport -- Using the ',(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File Provider"}),'"']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:"## Dynamic configuration\ntcp:\n  services:\n    Service01:\n      loadBalancer:\n        serversTransport: mytransport\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## Dynamic configuration\n[tcp.services]\n  [tcp.services.Service01]\n    [tcp.services.Service01.loadBalancer]\n      serversTransport = "mytransport"\n'})}),"\n",(0,i.jsx)(n.p,{children:'!!! info "Default Servers Transport"'}),"\n",(0,i.jsxs)(n.p,{children:["If no serversTransport is specified, the ",(0,i.jsx)(n.code,{children:"default@internal"})," will be used.\nThe ",(0,i.jsx)(n.code,{children:"default@internal"})," serversTransport is created from the ",(0,i.jsx)(n.a,{href:"/doc/docs/routing/overview#tcp-servers-transports",children:"static configuration"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"proxy-protocol",children:"PROXY Protocol"}),"\n",(0,i.jsxs)(n.p,{children:["Mesh supports ",(0,i.jsx)(n.a,{href:"https://www.haproxy.org/download/2.0/doc/proxy-protocol.txt",children:"PROXY Protocol"})," version 1 and 2 on TCP Services.\nIt can be enabled by setting ",(0,i.jsx)(n.code,{children:"proxyProtocol"})," on the load balancer."]}),"\n",(0,i.jsx)(n.p,{children:"Below are the available options for the PROXY protocol:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"version"})," specifies the version of the protocol to be used. Either ",(0,i.jsx)(n.code,{children:"1"})," or ",(0,i.jsx)(n.code,{children:"2"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:'!!! info "Version"'}),"\n",(0,i.jsx)(n.p,{children:"Specifying a version is optional. By default the version 2 will be used."}),"\n",(0,i.jsxs)(n.p,{children:['??? example "A Service with Proxy Protocol v1 -- Using the ',(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File Provider"}),'"']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:"## Dynamic configuration\ntcp:\n  services:\n    my-service:\n      loadBalancer:\n        proxyProtocol:\n          version: 1\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:"## Dynamic configuration\n[tcp.services]\n  [tcp.services.my-service.loadBalancer]\n    [tcp.services.my-service.loadBalancer.proxyProtocol]\n      version = 1\n"})}),"\n",(0,i.jsx)(n.h4,{id:"termination-delay",children:"Termination Delay"}),"\n",(0,i.jsx)(n.p,{children:"!!! warning"}),"\n",(0,i.jsxs)(n.p,{children:["Deprecated in favor of ",(0,i.jsx)(n.a,{href:"#terminationdelay",children:(0,i.jsx)(n.code,{children:"serversTransport.terminationDelay"})}),".\nPlease note that if any ",(0,i.jsx)(n.code,{children:"serversTransport"})," configuration on the servers load balancer is found,\nit will take precedence over the servers load balancer ",(0,i.jsx)(n.code,{children:"terminationDelay"})," value,\neven if the ",(0,i.jsx)(n.code,{children:"serversTransport.terminationDelay"})," is undefined."]}),"\n",(0,i.jsx)(n.p,{children:"As a proxy between a client and a server, it can happen that either side (e.g. client side) decides to terminate its writing capability on the connection (i.e. issuance of a FIN packet).\nThe proxy needs to propagate that intent to the other side, and so when that happens, it also does the same on its connection with the other side (e.g. backend side)."}),"\n",(0,i.jsx)(n.p,{children:"However, if for some reason (bad implementation, or malicious intent) the other side does not eventually do the same as well,\nthe connection would stay half-open, which would lock resources for however long."}),"\n",(0,i.jsx)(n.p,{children:"To that end, as soon as the proxy enters this termination sequence, it sets a deadline on fully terminating the connections on both sides."}),"\n",(0,i.jsx)(n.p,{children:"The termination delay controls that deadline.\nIt is a duration in milliseconds, defaulting to 100.\nA negative value means an infinite deadline (i.e. the connection is never fully terminated by the proxy itself)."}),"\n",(0,i.jsxs)(n.p,{children:['??? example "A Service with a termination delay -- Using the ',(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File Provider"}),'"']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:"## Dynamic configuration\ntcp:\n  services:\n    my-service:\n      loadBalancer:\n        terminationDelay: 200\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:"## Dynamic configuration\n[tcp.services]\n  [tcp.services.my-service.loadBalancer]\n    [[tcp.services.my-service.loadBalancer]]\n      terminationDelay = 200\n"})}),"\n",(0,i.jsx)(n.h3,{id:"weighted-round-robin",children:"Weighted Round Robin"}),"\n",(0,i.jsxs)(n.p,{children:["The Weighted Round Robin (alias ",(0,i.jsx)(n.code,{children:"WRR"}),") load-balancer of services is in charge of balancing the requests between multiple services based on provided weights."]}),"\n",(0,i.jsxs)(n.p,{children:["This strategy is only available to load balance between ",(0,i.jsx)(n.a,{href:"/doc/docs/routing/services/",children:"services"})," and not between ",(0,i.jsx)(n.a,{href:"/doc/docs/routing/services/#servers",children:"servers"}),"."]}),"\n",(0,i.jsx)(n.p,{children:'!!! info "Supported Providers"'}),"\n",(0,i.jsxs)(n.p,{children:["This strategy can be defined currently with the ",(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File"})," or ",(0,i.jsx)(n.a,{href:"/doc/docs/providers/kubernetes-crd",children:"IngressRoute"})," providers."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:'## Dynamic configuration\ntcp:\n  services:\n    app:\n      weighted:\n        services:\n        - name: appv1\n          weight: 3\n        - name: appv2\n          weight: 1\n\n    appv1:\n      loadBalancer:\n        servers:\n        - address: "xxx.xxx.xxx.xxx:8080"\n\n    appv2:\n      loadBalancer:\n        servers:\n        - address: "xxx.xxx.xxx.xxx:8080"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## Dynamic configuration\n[tcp.services]\n  [tcp.services.app]\n    [[tcp.services.app.weighted.services]]\n      name = "appv1"\n      weight = 3\n    [[tcp.services.app.weighted.services]]\n      name = "appv2"\n      weight = 1\n\n  [tcp.services.appv1]\n    [tcp.services.appv1.loadBalancer]\n      [[tcp.services.appv1.loadBalancer.servers]]\n        address = "private-ip-server-1:8080/"\n\n  [tcp.services.appv2]\n    [tcp.services.appv2.loadBalancer]\n      [[tcp.services.appv2.loadBalancer.servers]]\n        address = "private-ip-server-2:8080/"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"serverstransport-3",children:"ServersTransport"}),"\n",(0,i.jsx)(n.p,{children:"ServersTransport allows to configure the transport between Mesh and your TCP servers."}),"\n",(0,i.jsx)(n.h4,{id:"dialtimeout",children:(0,i.jsx)(n.code,{children:"dialTimeout"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:'Optional, Default="30s"'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"dialTimeout"})," defines the timeout when dialing the backend TCP service. If zero, no timeout exists."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"## Dynamic configuration\ntcp:\n  serversTransports:\n    mytransport:\n      dialTimeout: 30s\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'## Dynamic configuration\n[tcp.serversTransports.mytransport]\n  dialTimeout = "30s"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="Kubernetes"',children:"apiVersion: Mesh.io/v1alpha1\nkind: ServersTransportTCP\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  dialTimeout: 30s\n"})}),"\n",(0,i.jsx)(n.h4,{id:"dialkeepalive",children:(0,i.jsx)(n.code,{children:"dialKeepAlive"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:'Optional, Default="15s"'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"dialKeepAlive"})," defines the interval between keep-alive probes for an active network connection.\nIf zero, keep-alive probes are sent with a default value (currently 15 seconds), if supported by the protocol and\noperating system. Network protocols or operating systems that do not support keep-alives ignore this field. If negative,\nkeep-alive probes are disabled."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"## Dynamic configuration\ntcp:\n  serversTransports:\n    mytransport:\n      dialKeepAlive: 30s\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'## Dynamic configuration\n[tcp.serversTransports.mytransport]\n  dialKeepAlive = "30s"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="Kubernetes"',children:"apiVersion: Mesh.io/v1alpha1\nkind: ServersTransportTCP\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  dialKeepAlive: 30s\n"})}),"\n",(0,i.jsx)(n.h4,{id:"terminationdelay",children:(0,i.jsx)(n.code,{children:"terminationDelay"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:'Optional, Default="100ms"'})}),"\n",(0,i.jsx)(n.p,{children:"As a proxy between a client and a server, it can happen that either side (e.g. client side) decides to terminate its writing capability on the connection (i.e. issuance of a FIN packet).\nThe proxy needs to propagate that intent to the other side, and so when that happens, it also does the same on its connection with the other side (e.g. backend side)."}),"\n",(0,i.jsx)(n.p,{children:"However, if for some reason (bad implementation, or malicious intent) the other side does not eventually do the same as well,\nthe connection would stay half-open, which would lock resources for however long."}),"\n",(0,i.jsx)(n.p,{children:"To that end, as soon as the proxy enters this termination sequence, it sets a deadline on fully terminating the connections on both sides."}),"\n",(0,i.jsx)(n.p,{children:"The termination delay controls that deadline.\nA negative value means an infinite deadline (i.e. the connection is never fully terminated by the proxy itself)."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"## Dynamic configuration\ntcp:\n  serversTransports:\n    mytransport:\n      terminationDelay: 100ms\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'## Dynamic configuration\n[tcp.serversTransports.mytransport]\n  terminationDelay = "100ms"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="Kubernetes"',children:"apiVersion: Mesh.io/v1alpha1\nkind: ServersTransportTCP\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  terminationDelay: 100ms\n"})}),"\n",(0,i.jsx)(n.h4,{id:"tls-1",children:(0,i.jsx)(n.code,{children:"tls"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"tls"})," defines the TLS configuration."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Optional"})}),"\n",(0,i.jsxs)(n.p,{children:["An empty ",(0,i.jsx)(n.code,{children:"tls"})," section enables TLS."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"## Dynamic configuration\ntcp:\n  serversTransports:\n    mytransport:\n      tls: {}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"## Dynamic configuration\n[tcp.serversTransports.mytransport.tls]\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="Kubernetes"',children:"apiVersion: Mesh.io/v1alpha1\nkind: ServersTransportTCP\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  tls: {}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"tlsservername",children:(0,i.jsx)(n.code,{children:"tls.serverName"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Optional"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"tls.serverName"})," configure the server name that will be used for SNI."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:'## Dynamic configuration\ntcp:\n  serversTransports:\n    mytransport:\n      tls:\n        serverName: "myhost"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'## Dynamic configuration\n[tcp.serversTransports.mytransport.tls]\n  serverName = "myhost"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="Kubernetes"',children:'apiVersion: Mesh.io/v1alpha1\nkind: ServersTransportTCP\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  tls:\n    serverName: "test"\n'})}),"\n",(0,i.jsx)(n.h4,{id:"tlscertificates",children:(0,i.jsx)(n.code,{children:"tls.certificates"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Optional"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"tls.certificates"})," is the list of certificates (as file paths, or data bytes)\nthat will be set as client certificates for mTLS."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"## Dynamic configuration\ntcp:\n  serversTransports:\n    mytransport:\n      tls:\n        certificates:\n          - certFile: foo.crt\n            keyFile: bar.crt\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'## Dynamic configuration\n[[tcp.serversTransports.mytransport.tls.certificates]]\n  certFile = "foo.crt"\n  keyFile = "bar.crt"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="Kubernetes"',children:"apiVersion: Mesh.io/v1alpha1\nkind: ServersTransportTCP\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  tls:\n    certificatesSecrets:\n      - mycert\n\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mycert\n\ndata:\n  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\n  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0=\n"})}),"\n",(0,i.jsx)(n.h4,{id:"tlsinsecureskipverify",children:(0,i.jsx)(n.code,{children:"tls.insecureSkipVerify"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Optional"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"tls.insecureSkipVerify"})," controls whether the server's certificate chain and host name is verified."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"## Dynamic configuration\ntcp:\n  serversTransports:\n    mytransport:\n      tls:\n        insecureSkipVerify: true\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"## Dynamic configuration\n[tcp.serversTransports.mytransport.tls]\n  insecureSkipVerify = true\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="Kubernetes"',children:"apiVersion: Mesh.io/v1alpha1\nkind: ServersTransportTCP\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  tls:\n    insecureSkipVerify: true\n"})}),"\n",(0,i.jsx)(n.h4,{id:"tlsrootcas",children:(0,i.jsx)(n.code,{children:"tls.rootCAs"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Optional"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"tls.rootCAs"})," defines the set of root certificate authorities (as file paths, or data bytes) to use when verifying server certificates."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"## Dynamic configuration\ntcp:\n  serversTransports:\n    mytransport:\n      tls:\n        rootCAs:\n          - foo.crt\n          - bar.crt\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'## Dynamic configuration\n[tcp.serversTransports.mytransport.tls]\n  rootCAs = ["foo.crt", "bar.crt"]\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="Kubernetes"',children:"apiVersion: Mesh.io/v1alpha1\nkind: ServersTransportTCP\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  tls:\n    rootCAsSecrets:\n      - myca\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: myca\n\ndata:\n  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\n"})}),"\n",(0,i.jsx)(n.h4,{id:"tlspeercerturi",children:(0,i.jsx)(n.code,{children:"tls.peerCertURI"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Optional, Default=false"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"tls.peerCertURI"})," defines the URI used to match against SAN URIs during the server's certificate verification."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"## Dynamic configuration\ntcp:\n  serversTransports:\n    mytransport:\n      tls:\n        peerCertURI: foobar\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'## Dynamic configuration\n[tcp.serversTransports.mytransport.tls]\n  peerCertURI = "foobar"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="Kubernetes"',children:"apiVersion: Mesh.io/v1alpha1\nkind: ServersTransportTCP\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n  tls:\n    peerCertURI: foobar\n"})}),"\n",(0,i.jsx)(n.h4,{id:"spiffe-1",children:(0,i.jsx)(n.code,{children:"spiffe"})}),"\n",(0,i.jsxs)(n.p,{children:["Please note that ",(0,i.jsx)(n.a,{href:"/doc/docs/https/spiffe",children:"SPIFFE"})," must be enabled in the static configuration\nbefore using it to secure the connection between Mesh and the backends."]}),"\n",(0,i.jsx)(n.h5,{id:"spiffeids-1",children:(0,i.jsx)(n.code,{children:"spiffe.ids"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Optional"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"ids"})," defines the allowed SPIFFE IDs.\nThis takes precedence over the SPIFFE TrustDomain."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"## Dynamic configuration\ntcp:\n  serversTransports:\n    mytransport:\n      spiffe:\n        ids:\n          - spiffe://trust-domain/id1\n          - spiffe://trust-domain/id2\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'## Dynamic configuration\n[tcp.serversTransports.mytransport.spiffe]\n  ids = ["spiffe://trust-domain/id1", "spiffe://trust-domain/id2"]\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="Kubernetes"',children:"apiVersion: Mesh.io/v1alpha1\nkind: ServersTransportTCP\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n    spiffe:\n      ids:\n        - spiffe://trust-domain/id1\n        - spiffe://trust-domain/id2\n"})}),"\n",(0,i.jsx)(n.h5,{id:"spiffetrustdomain-1",children:(0,i.jsx)(n.code,{children:"spiffe.trustDomain"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Optional"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"trustDomain"})," defines the allowed SPIFFE trust domain."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"## Dynamic configuration\ntcp:\n  serversTransports:\n    mytransport:\n        spiffe:\n          trustDomain: spiffe://trust-domain\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'## Dynamic configuration\n[tcp.serversTransports.mytransport.spiffe]\n  trustDomain = "spiffe://trust-domain"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="Kubernetes"',children:'apiVersion: Mesh.io/v1alpha1\nkind: ServersTransportTCP\nmetadata:\n  name: mytransport\n  namespace: default\n\nspec:\n    spiffe:\n      trustDomain: "spiffe://trust-domain"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"configuring-udp-services",children:"Configuring UDP Services"}),"\n",(0,i.jsx)(n.h3,{id:"general-1",children:"General"}),"\n",(0,i.jsxs)(n.p,{children:["Each of the fields of the service section represents a kind of service.\nWhich means, that for each specified service, one of the fields, and only one,\nhas to be enabled to define what kind of service is created.\nCurrently, the two available kinds are ",(0,i.jsx)(n.code,{children:"LoadBalancer"}),", and ",(0,i.jsx)(n.code,{children:"Weighted"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"servers-load-balancer-2",children:"Servers Load Balancer"}),"\n",(0,i.jsx)(n.p,{children:"The servers load balancer is in charge of balancing the requests between the servers of the same service."}),"\n",(0,i.jsxs)(n.p,{children:['??? example "Declaring a Service with Two Servers -- Using the ',(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File Provider"}),'"']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:'## Dynamic configuration\nudp:\n  services:\n    my-service:\n      loadBalancer:\n        servers:\n        - address: "xx.xx.xx.xx:xx"\n        - address: "xx.xx.xx.xx:xx"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## Dynamic configuration\n[udp.services]\n  [udp.services.my-service.loadBalancer]\n    [[udp.services.my-service.loadBalancer.servers]]\n      address = "xx.xx.xx.xx:xx"\n    [[udp.services.my-service.loadBalancer.servers]]\n      address = "xx.xx.xx.xx:xx"\n'})}),"\n",(0,i.jsx)(n.h4,{id:"servers-2",children:"Servers"}),"\n",(0,i.jsxs)(n.p,{children:["The Servers field defines all the servers that are part of this load-balancing group,\ni.e. each address (IP",":Port",") on which an instance of the service's program is deployed."]}),"\n",(0,i.jsxs)(n.p,{children:['??? example "A Service with One Server -- Using the ',(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File Provider"}),'"']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:'## Dynamic configuration\nudp:\n  services:\n    my-service:\n      loadBalancer:\n        servers:\n          - address: "xx.xx.xx.xx:xx"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## Dynamic configuration\n[udp.services]\n  [udp.services.my-service.loadBalancer]\n    [[udp.services.my-service.loadBalancer.servers]]\n      address = "xx.xx.xx.xx:xx"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"weighted-round-robin-1",children:"Weighted Round Robin"}),"\n",(0,i.jsxs)(n.p,{children:["The Weighted Round Robin (alias ",(0,i.jsx)(n.code,{children:"WRR"}),") load-balancer of services is in charge of balancing the requests between multiple services based on provided weights."]}),"\n",(0,i.jsxs)(n.p,{children:["This strategy is only available to load balance between ",(0,i.jsx)(n.a,{href:"/doc/docs/routing/services/",children:"services"})," and not between ",(0,i.jsx)(n.a,{href:"/doc/docs/routing/services/#servers",children:"servers"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["This strategy can only be defined with ",(0,i.jsx)(n.a,{href:"/doc/docs/providers/file",children:"File"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:'## Dynamic configuration\nudp:\n  services:\n    app:\n      weighted:\n        services:\n        - name: appv1\n          weight: 3\n        - name: appv2\n          weight: 1\n\n    appv1:\n      loadBalancer:\n        servers:\n        - address: "xxx.xxx.xxx.xxx:8080"\n\n    appv2:\n      loadBalancer:\n        servers:\n        - address: "xxx.xxx.xxx.xxx:8080"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'## Dynamic configuration\n[udp.services]\n  [udp.services.app]\n    [[udp.services.app.weighted.services]]\n      name = "appv1"\n      weight = 3\n    [[udp.services.app.weighted.services]]\n      name = "appv2"\n      weight = 1\n\n  [udp.services.appv1]\n    [udp.services.appv1.loadBalancer]\n      [[udp.services.appv1.loadBalancer.servers]]\n        address = "private-ip-server-1:8080/"\n\n  [udp.services.appv2]\n    [udp.services.appv2.loadBalancer]\n      [[udp.services.appv2.loadBalancer.servers]]\n        address = "private-ip-server-2:8080/"\n'})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},7859:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/services-3158549aee80e7d78ffd53edf9c601b5.png"},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>c});var s=r(6540);const i={},a=s.createContext(i);function t(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);