"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[1781],{2060:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"reference/routing-configuration/http/load-balancing/serverstransport","title":"ServersTransport","description":"ServersTransport allows configuring the connection between Mesh and the HTTP servers.","source":"@site/docs/reference/routing-configuration/http/load-balancing/serverstransport.md","sourceDirName":"reference/routing-configuration/http/load-balancing","slug":"/reference/routing-configuration/http/load-balancing/serverstransport","permalink":"/doc/docs/reference/routing-configuration/http/load-balancing/serverstransport","draft":false,"unlisted":false,"editUrl":"https://github.com/opendatav/mesh/tree/main/packages/create-docusaurus/templates/shared/docs/reference/routing-configuration/http/load-balancing/serverstransport.md","tags":[],"version":"current","frontMatter":{"title":"ServersTransport","description":"ServersTransport allows configuring the connection between Mesh and the HTTP servers."},"sidebar":"tutorialSidebar","previous":{"title":"Providing Dynamic Configuration to Mesh","permalink":"/doc/docs/reference/routing-configuration/dynamic-configuration-methods"},"next":{"title":"Mesh HTTP Services Documentation","permalink":"/doc/docs/reference/routing-configuration/http/load-balancing/service"}}');var s=n(4848),i=n(8453);const l={title:"ServersTransport",description:"ServersTransport allows configuring the connection between Mesh and the HTTP servers."},o=void 0,c={},d=[{value:"Configuration Example",id:"configuration-example",level:2},{value:"Configuration Options",id:"configuration-options",level:2}];function a(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"ServersTransport allows you to configure the transport between Mesh and your HTTP servers."}),"\n",(0,s.jsx)(t.h2,{id:"configuration-example",children:"Configuration Example"}),"\n",(0,s.jsx)(t.p,{children:"Declare the serversTransport:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",metastring:'tab="Structured (YAML)"',children:'http:\n  serversTransports:\n    mytransport:\n      serverName: "myhost"\n      certificates:\n        - "/path/to/cert1.pem"\n        - "/path/to/cert2.pem"\n      insecureSkipVerify: true\n      rootcas:\n        - "/path/to/rootca1.pem"\n        - "/path/to/rootca2.pem"\n      maxIdleConnsPerHost: 100\n      disableHTTP2: true\n      peerCertURI: "spiffe://example.org/peer"\n      forwardingTimeouts:\n        dialTimeout: "30s"\n        responseHeaderTimeout: "10s"\n        idleConnTimeout: "60s"\n        readIdleTimeout: "5s"\n        pingTimeout: "15s"\n      spiffe:\n        ids:\n          - "spiffe://example.org/id1"\n          - "spiffe://example.org/id2"\n        trustDomain: "example.org"\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-toml",metastring:'tab="Structured (TOML)"',children:'[http.serversTransports.mytransport]\n  serverName = "myhost"\n  certificates = ["/path/to/cert1.pem", "/path/to/cert2.pem"]\n  insecureSkipVerify = true\n  rootcas = ["/path/to/rootca1.pem", "/path/to/rootca2.pem"]\n  maxIdleConnsPerHost = 100\n  disableHTTP2 = true\n  peerCertURI = "spiffe://example.org/peer"\n\n  [http.serversTransports.mytransport.forwardingTimeouts]\n    dialTimeout = "30s"\n    responseHeaderTimeout = "10s"\n    idleConnTimeout = "60s"\n    readIdleTimeout = "5s"\n    pingTimeout = "15s"\n\n  [http.serversTransports.mytransport.spiffe]\n    ids = ["spiffe://example.org/id1", "spiffe://example.org/id2"]\n    trustDomain = "example.org"\n'})}),"\n",(0,s.jsx)(t.p,{children:"Attach the serversTransport to a service:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",metastring:'tab="Structured (YAML)"',children:"## Dynamic configuration\nhttp:\n  services:\n    Service01:\n      loadBalancer:\n        serversTransport: mytransport\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-toml",metastring:'tab="Structured(TOML)"',children:'## Dynamic configuration\n[http.services]\n  [http.services.Service01]\n    [http.services.Service01.loadBalancer]\n      serversTransport = "mytransport"\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",metastring:'tab="Labels"',children:'labels:\n  - "Mesh.http.services.Service01.loadBalancer.serversTransport=mytransport"\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",metastring:'tab="Tags"',children:'{\n  // ...\n  "Tags": [\n    "Mesh.http.services.Service01.loadBalancer.serversTransport=mytransport"\n  ]\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Field"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Description"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Default"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Required"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"serverName"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Configures the server name that will be used as the SNI."}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:'""'}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"No"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"certificates"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Defines the list of certificates (as file paths, or data bytes) that will be set as client certificates for mTLS."}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"[]"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"No"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"insecureSkipVerify"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Controls whether the server's certificate chain and host name is verified."}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"false"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"No"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"rootcas"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Set of root certificate authorities to use when verifying server certificates. (for mTLS connections)."}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"[]"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"No"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"maxIdleConnsPerHost"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Maximum idle (keep-alive) connections to keep per-host."}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"200"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"No"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"disableHTTP2"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Disables HTTP/2 for connections with servers."}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"false"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"No"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"peerCertURI"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Defines the URI used to match against SAN URIs during the server's certificate verification."}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:'""'}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"No"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"forwardingTimeouts.dialTimeout"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Amount of time to wait until a connection to a server can be established.",(0,s.jsx)("br",{}),"0 = no timeout"]}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"30s"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"No"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"forwardingTimeouts.responseHeaderTimeout"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Amount of time to wait for a server's response headers after fully writing the request (including its body, if any).",(0,s.jsx)("br",{}),"0 = no timeout"]}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"0s"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"No"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"forwardingTimeouts.idleConnTimeout"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Maximum amount of time an idle (keep-alive) connection will remain idle before closing itself.",(0,s.jsx)("br",{}),"0 = no timeout"]}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"90s"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"No"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"forwardingTimeouts.readIdleTimeout"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Defines the timeout after which a health check using ping frame will be carried out if no frame is received on the HTTP/2 connection."}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"0s"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"No"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"forwardingTimeouts.pingTimeout"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Defines the timeout after which the HTTP/2 connection will be closed if a response to ping is not received."}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"15s"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"No"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"spiffe.ids"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Defines the allowed SPIFFE IDs.",(0,s.jsx)("br",{}),"This takes precedence over the SPIFFE TrustDomain."]}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"[]"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"No"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"spiffe.trustDomain"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Defines the SPIFFE trust domain."}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:'""'}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"No"})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>o});var r=n(6540);const s={},i=r.createContext(s);function l(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);