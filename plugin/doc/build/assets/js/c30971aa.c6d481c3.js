"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[4822],{1883:(e,r,i)=>{i.d(r,{A:()=>n});const n=i.p+"assets/images/circuitbreaker-7c10faa20fac8fb86b6a16909a388265.png"},8453:(e,r,i)=>{i.d(r,{R:()=>c,x:()=>a});var n=i(6540);const t={},s=n.createContext(t);function c(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),n.createElement(s.Provider,{value:r},e.children)}},8936:(e,r,i)=>{i.r(r),i.d(r,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"middlewares/http/circuitbreaker","title":"Mesh CircuitBreaker Documentation","description":"The HTTP circuit breaker in Mesh Proxy prevents stacking requests to unhealthy Services, resulting in cascading failures. Read the technical documentation.","source":"@site/docs/middlewares/http/circuitbreaker.md","sourceDirName":"middlewares/http","slug":"/middlewares/http/circuitbreaker","permalink":"/doc/docs/middlewares/http/circuitbreaker","draft":false,"unlisted":false,"editUrl":"https://github.com/opendatav/mesh/tree/main/packages/create-docusaurus/templates/shared/docs/middlewares/http/circuitbreaker.md","tags":[],"version":"current","frontMatter":{"title":"Mesh CircuitBreaker Documentation","description":"The HTTP circuit breaker in Mesh Proxy prevents stacking requests to unhealthy Services, resulting in cascading failures. Read the technical documentation."},"sidebar":"tutorialSidebar","previous":{"title":"Mesh Command Line Documentation","permalink":"/doc/docs/middlewares/http/chain"},"next":{"title":"Mesh Compress Documentation","permalink":"/doc/docs/middlewares/http/compress"}}');var t=i(4848),s=i(8453);const c={title:"Mesh CircuitBreaker Documentation",description:"The HTTP circuit breaker in Mesh Proxy prevents stacking requests to unhealthy Services, resulting in cascading failures. Read the technical documentation."},a="CircuitBreaker",o={},l=[{value:"Configuration Examples",id:"configuration-examples",level:2},{value:"Possible States",id:"possible-states",level:2},{value:"Closed",id:"closed",level:3},{value:"Open",id:"open",level:3},{value:"Recovering",id:"recovering",level:3},{value:"Configuration Options",id:"configuration-options",level:2},{value:"Configuring the Trigger",id:"configuring-the-trigger",level:3},{value:"<code>NetworkErrorRatio</code>",id:"networkerrorratio",level:4},{value:"<code>ResponseCodeRatio</code>",id:"responsecoderatio",level:4},{value:"<code>LatencyAtQuantileMS</code>",id:"latencyatquantilems",level:4},{value:"Using Multiple Metrics",id:"using-multiple-metrics",level:4},{value:"Operators",id:"operators",level:4},{value:"Fallback mechanism",id:"fallback-mechanism",level:3},{value:"<code>CheckPeriod</code>",id:"checkperiod",level:3},{value:"<code>FallbackDuration</code>",id:"fallbackduration",level:3},{value:"<code>RecoveryDuration</code>",id:"recoveryduration",level:3},{value:"<code>ResponseCode</code>",id:"responsecode",level:3}];function d(e){const r={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"circuitbreaker",children:"CircuitBreaker"})}),"\n",(0,t.jsx)(r.p,{children:"Don't Waste Time Calling Unhealthy Services"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.img,{alt:"CircuitBreaker",src:i(1883).A+"",width:"2420",height:"419"})}),"\n",(0,t.jsx)(r.p,{children:"The circuit breaker protects your system from stacking requests to unhealthy services, resulting in cascading failures."}),"\n",(0,t.jsx)(r.p,{children:"When your system is healthy, the circuit is closed (normal operations).\nWhen your system becomes unhealthy, the circuit opens, and the requests are no longer forwarded, but instead are handled by a fallback mechanism."}),"\n",(0,t.jsx)(r.p,{children:"To assess if your system is healthy, the circuit breaker constantly monitors the services."}),"\n",(0,t.jsx)(r.p,{children:'!!! note ""'}),"\n",(0,t.jsxs)(r.p,{children:["The CircuitBreaker only analyzes what happens ",(0,t.jsx)(r.em,{children:"after"})," its position within the middleware chain. What happens ",(0,t.jsx)(r.em,{children:"before"})," has no impact on its state."]}),"\n",(0,t.jsx)(r.p,{children:"!!! important"}),"\n",(0,t.jsx)(r.p,{children:"Each router gets its own instance of a given circuit breaker.\nOne circuit breaker instance can be open while the other remains closed: their state is not shared."}),"\n",(0,t.jsx)(r.p,{children:"This is the expected behavior, we want you to be able to define what makes a service healthy without having to declare a circuit breaker for each route."}),"\n",(0,t.jsx)(r.h2,{id:"configuration-examples",children:"Configuration Examples"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-yaml",metastring:'tab="Docker & Swarm"',children:'# Latency Check\nlabels:\n  - "Mesh.http.middlewares.latency-check.circuitbreaker.expression=LatencyAtQuantileMS(50.0) > 100"\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-yaml",metastring:'tab="Kubernetes"',children:"# Latency Check\napiVersion: Mesh.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: latency-check\nspec:\n  circuitBreaker:\n    expression: LatencyAtQuantileMS(50.0) > 100\n"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-yaml",metastring:'tab="Consul Catalog"',children:'# Latency Check\n- "Mesh.http.middlewares.latency-check.circuitbreaker.expression=LatencyAtQuantileMS(50.0) > 100"\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:'# Latency Check\nhttp:\n  middlewares:\n    latency-check:\n      circuitBreaker:\n        expression: "LatencyAtQuantileMS(50.0) > 100"\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'# Latency Check\n[http.middlewares]\n  [http.middlewares.latency-check.circuitBreaker]\n    expression = "LatencyAtQuantileMS(50.0) > 100"\n'})}),"\n",(0,t.jsx)(r.h2,{id:"possible-states",children:"Possible States"}),"\n",(0,t.jsx)(r.p,{children:"There are three possible states for your circuit breaker:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Closed (your service operates normally)"}),"\n",(0,t.jsx)(r.li,{children:"Open (the fallback mechanism takes over your service)"}),"\n",(0,t.jsx)(r.li,{children:"Recovering (the circuit breaker tries to resume normal operations by progressively sending requests to your service)"}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"closed",children:"Closed"}),"\n",(0,t.jsx)(r.p,{children:"While the circuit is closed, the circuit breaker only collects metrics to analyze the behavior of the requests."}),"\n",(0,t.jsxs)(r.p,{children:["At specified intervals (",(0,t.jsx)(r.code,{children:"checkPeriod"}),"), the circuit breaker evaluates ",(0,t.jsx)(r.code,{children:"expression"})," to decide if its state must change."]}),"\n",(0,t.jsx)(r.h3,{id:"open",children:"Open"}),"\n",(0,t.jsxs)(r.p,{children:["While open, the fallback mechanism takes over the normal service calls for a duration of ",(0,t.jsx)(r.code,{children:"FallbackDuration"}),".\nThe fallback mechanism returns a ",(0,t.jsx)(r.code,{children:"HTTP 503"})," (or ",(0,t.jsx)(r.code,{children:"ResponseCode"}),") to the client.\nAfter this duration, it enters the recovering state."]}),"\n",(0,t.jsx)(r.h3,{id:"recovering",children:"Recovering"}),"\n",(0,t.jsxs)(r.p,{children:["While recovering, the circuit breaker sends linearly increasing amounts of requests to your service (for ",(0,t.jsx)(r.code,{children:"RecoveryDuration"}),").\nIf your service fails during recovery, the circuit breaker opens again.\nIf the service operates normally during the entire recovery duration, then the circuit breaker closes."]}),"\n",(0,t.jsx)(r.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,t.jsx)(r.h3,{id:"configuring-the-trigger",children:"Configuring the Trigger"}),"\n",(0,t.jsxs)(r.p,{children:["You can specify an ",(0,t.jsx)(r.code,{children:"expression"})," that, once matched, opens the circuit breaker and applies the fallback mechanism instead of calling your services."]}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"expression"})," option can check three different metrics:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["The network error ratio (",(0,t.jsx)(r.code,{children:"NetworkErrorRatio"}),")"]}),"\n",(0,t.jsxs)(r.li,{children:["The status code ratio (",(0,t.jsx)(r.code,{children:"ResponseCodeRatio"}),")"]}),"\n",(0,t.jsxs)(r.li,{children:["The latency at a quantile in milliseconds (",(0,t.jsx)(r.code,{children:"LatencyAtQuantileMS"}),")"]}),"\n"]}),"\n",(0,t.jsx)(r.h4,{id:"networkerrorratio",children:(0,t.jsx)(r.code,{children:"NetworkErrorRatio"})}),"\n",(0,t.jsxs)(r.p,{children:["If you want the circuit breaker to open at a 30% ratio of network errors, the ",(0,t.jsx)(r.code,{children:"expression"})," is ",(0,t.jsx)(r.code,{children:"NetworkErrorRatio() > 0.30"})]}),"\n",(0,t.jsx)(r.h4,{id:"responsecoderatio",children:(0,t.jsx)(r.code,{children:"ResponseCodeRatio"})}),"\n",(0,t.jsx)(r.p,{children:"You can configure the circuit breaker to open based on the ratio of a given range of status codes."}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"ResponseCodeRatio"})," accepts four parameters, ",(0,t.jsx)(r.code,{children:"from"}),", ",(0,t.jsx)(r.code,{children:"to"}),", ",(0,t.jsx)(r.code,{children:"dividedByFrom"}),", ",(0,t.jsx)(r.code,{children:"dividedByTo"}),"."]}),"\n",(0,t.jsxs)(r.p,{children:["The operation that will be computed is sum(",(0,t.jsx)(r.code,{children:"to"})," -> ",(0,t.jsx)(r.code,{children:"from"}),") / sum (",(0,t.jsx)(r.code,{children:"dividedByFrom"})," -> ",(0,t.jsx)(r.code,{children:"dividedByTo"}),")."]}),"\n",(0,t.jsx)(r.p,{children:'!!! note ""'}),"\n",(0,t.jsxs)(r.p,{children:["If sum (",(0,t.jsx)(r.code,{children:"dividedByFrom"})," -> ",(0,t.jsx)(r.code,{children:"dividedByTo"}),") equals 0, then ",(0,t.jsx)(r.code,{children:"ResponseCodeRatio"})," returns 0."]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"from"}),"is inclusive, ",(0,t.jsx)(r.code,{children:"to"})," is exclusive."]}),"\n",(0,t.jsxs)(r.p,{children:["For example, the expression ",(0,t.jsx)(r.code,{children:"ResponseCodeRatio(500, 600, 0, 600) > 0.25"})," will trigger the circuit breaker if 25% of the requests returned a 5XX status (amongst the request that returned a status code from 0 to 5XX)."]}),"\n",(0,t.jsx)(r.h4,{id:"latencyatquantilems",children:(0,t.jsx)(r.code,{children:"LatencyAtQuantileMS"})}),"\n",(0,t.jsx)(r.p,{children:"You can configure the circuit breaker to open when a given proportion of your requests become too slow."}),"\n",(0,t.jsxs)(r.p,{children:["For example, the expression ",(0,t.jsx)(r.code,{children:"LatencyAtQuantileMS(50.0) > 100"})," opens the circuit breaker when the median latency (quantile 50) reaches 100ms."]}),"\n",(0,t.jsx)(r.p,{children:'!!! note ""'}),"\n",(0,t.jsx)(r.p,{children:"You must provide a floating point number (with the trailing .0) for the quantile value"}),"\n",(0,t.jsx)(r.h4,{id:"using-multiple-metrics",children:"Using Multiple Metrics"}),"\n",(0,t.jsxs)(r.p,{children:["You can combine multiple metrics using operators in your ",(0,t.jsx)(r.code,{children:"expression"}),"."]}),"\n",(0,t.jsx)(r.p,{children:"Supported operators are:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["AND (",(0,t.jsx)(r.code,{children:"&&"}),")"]}),"\n",(0,t.jsxs)(r.li,{children:["OR (",(0,t.jsx)(r.code,{children:"||"}),")"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:["For example, ",(0,t.jsx)(r.code,{children:"ResponseCodeRatio(500, 600, 0, 600) > 0.30 || NetworkErrorRatio() > 0.10"})," triggers the circuit breaker when 30% of the requests return a 5XX status code, or when the ratio of network errors reaches 10%."]}),"\n",(0,t.jsx)(r.h4,{id:"operators",children:"Operators"}),"\n",(0,t.jsx)(r.p,{children:"Here is the list of supported operators:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["Greater than (",(0,t.jsx)(r.code,{children:">"}),")"]}),"\n",(0,t.jsxs)(r.li,{children:["Greater or equal than (",(0,t.jsx)(r.code,{children:">="}),")"]}),"\n",(0,t.jsxs)(r.li,{children:["Lesser than (",(0,t.jsx)(r.code,{children:"<"}),")"]}),"\n",(0,t.jsxs)(r.li,{children:["Lesser or equal than (",(0,t.jsx)(r.code,{children:"<="}),")"]}),"\n",(0,t.jsxs)(r.li,{children:["Equal (",(0,t.jsx)(r.code,{children:"=="}),")"]}),"\n",(0,t.jsxs)(r.li,{children:["Not Equal (",(0,t.jsx)(r.code,{children:"!="}),")"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"fallback-mechanism",children:"Fallback mechanism"}),"\n",(0,t.jsxs)(r.p,{children:["The fallback mechanism returns a ",(0,t.jsx)(r.code,{children:"HTTP 503 Service Unavailable"})," to the client instead of calling the target service.\nThis behavior cannot be configured."]}),"\n",(0,t.jsx)(r.h3,{id:"checkperiod",children:(0,t.jsx)(r.code,{children:"CheckPeriod"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.em,{children:'Optional, Default="100ms"'})}),"\n",(0,t.jsx)(r.p,{children:"The interval between successive checks of the circuit breaker condition (when in standby state)."}),"\n",(0,t.jsx)(r.h3,{id:"fallbackduration",children:(0,t.jsx)(r.code,{children:"FallbackDuration"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.em,{children:'Optional, Default="10s"'})}),"\n",(0,t.jsx)(r.p,{children:"The duration for which the circuit breaker will wait before trying to recover (from a tripped state)."}),"\n",(0,t.jsx)(r.h3,{id:"recoveryduration",children:(0,t.jsx)(r.code,{children:"RecoveryDuration"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.em,{children:'Optional, Default="10s"'})}),"\n",(0,t.jsx)(r.p,{children:"The duration for which the circuit breaker will try to recover (as soon as it is in recovering state)."}),"\n",(0,t.jsx)(r.h3,{id:"responsecode",children:(0,t.jsx)(r.code,{children:"ResponseCode"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.em,{children:'Optional, Default="503"'})}),"\n",(0,t.jsx)(r.p,{children:"The status code that the circuit breaker will return while it is in the open state."})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);