"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[4235],{5421:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"reference/routing-configuration/dynamic-configuration-methods","title":"Providing Dynamic Configuration to Mesh","description":"Learn about the different methods for providing dynamic configuration to Mesh. Read the technical documentation.","source":"@site/docs/reference/routing-configuration/dynamic-configuration-methods.md","sourceDirName":"reference/routing-configuration","slug":"/reference/routing-configuration/dynamic-configuration-methods","permalink":"/doc/docs/reference/routing-configuration/dynamic-configuration-methods","draft":false,"unlisted":false,"editUrl":"https://github.com/opendatav/mesh/tree/main/packages/create-docusaurus/templates/shared/docs/reference/routing-configuration/dynamic-configuration-methods.md","tags":[],"version":"current","frontMatter":{"title":"Providing Dynamic Configuration to Mesh","description":"Learn about the different methods for providing dynamic configuration to Mesh. Read the technical documentation."},"sidebar":"tutorialSidebar","previous":{"title":"Mesh SPIFFE Documentation","permalink":"/doc/docs/reference/install-configuration/tls/spiffe"},"next":{"title":"ServersTransport","permalink":"/doc/docs/reference/routing-configuration/http/load-balancing/serverstransport"}}');var s=r(4848),t=r(8453);const o={title:"Providing Dynamic Configuration to Mesh",description:"Learn about the different methods for providing dynamic configuration to Mesh. Read the technical documentation."},a="Providing Dynamic (Routing) Configuration to Mesh",c={},l=[{value:"Using the File Provider",id:"using-the-file-provider",level:2},{value:"Enabling the File Provider",id:"enabling-the-file-provider",level:3},{value:"Using Labels With Docker and ECS",id:"using-labels-with-docker-and-ecs",level:2},{value:"Using Kubernetes Providers",id:"using-kubernetes-providers",level:2},{value:"Using Key-Value Pairs With KV Providers",id:"using-key-value-pairs-with-kv-providers",level:2},{value:"Using Tags With Other Providers",id:"using-tags-with-other-providers",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"providing-dynamic-routing-configuration-to-mesh",children:"Providing Dynamic (Routing) Configuration to Mesh"})}),"\n",(0,s.jsx)(n.p,{children:"Dynamic configuration\u2014now also known as routing configuration\u2014defines how Mesh routes incoming requests to the correct services. This is distinct from install configuration (formerly known as static configuration), which sets up Mesh\u2019s core components and providers."}),"\n",(0,s.jsx)(n.p,{children:"Depending on your environment and preferences, there are several ways to supply this routing configuration:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"File or Structured Provider: Use TOML or YAML files."}),"\n",(0,s.jsx)(n.li,{children:"Docker and ECS Providers: Use container labels."}),"\n",(0,s.jsx)(n.li,{children:"Kubernetes Providers: Use annotations."}),"\n",(0,s.jsx)(n.li,{children:"KV Providers : Use key-value pairs."}),"\n",(0,s.jsx)(n.li,{children:"Other Providers (Consul, Nomad, etc.) : Use tags."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"using-the-file-provider",children:"Using the File Provider"}),"\n",(0,s.jsx)(n.p,{children:"The File provider allows you to define routing configuration in static files using either TOML or YAML syntax. This method is ideal for environments where services cannot be automatically discovered or when you prefer to manage configurations manually."}),"\n",(0,s.jsx)(n.h3,{id:"enabling-the-file-provider",children:"Enabling the File Provider"}),"\n",(0,s.jsx)(n.p,{children:"To enable the File provider, add the following to your Mesh install configuration:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:'providers:\n  file:\n    directory: "/path/to/dynamic/conf"\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'[providers.file]\n  directory = "/path/to/dynamic/conf"\n'})}),"\n",(0,s.jsx)(n.p,{children:'???+ example "Example using the file provider to declare routers & services"'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:'http:\n  routers:\n    my-router:\n      rule: "Host(`example.com`)"\n      service: my-service\n\n  services:\n    my-service:\n      loadBalancer:\n        servers:\n          - url: "http://localhost:8080"\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[http]\n  [http.routers]\n    [http.routers.my-router]\n      rule = "Host(`example.com`)"\n      service = "my-service"\n\n  [http.services]\n    [http.services.my-service.loadBalancer]\n      [[http.services.my-service.loadBalancer.servers]]\n        url = "http://localhost:8080"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"using-labels-with-docker-and-ecs",children:"Using Labels With Docker and ECS"}),"\n",(0,s.jsx)(n.p,{children:"When using Docker or Amazon ECS, you can define routing configuration using container labels. This method allows Mesh to automatically discover services and apply configurations without the need for additional files."}),"\n",(0,s.jsx)(n.p,{children:'???+ example "Example with Docker"'}),"\n",(0,s.jsx)(n.p,{children:"When deploying a Docker container, you can specify labels to define routing rules and services:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'version: \'3\'\n\nservices:\n  my-service:\n    image: my-image\n    labels:\n      - "Mesh.http.routers.my-router.rule=Host(`example.com`)"\n      - "Mesh.http.services.my-service.loadbalancer.server.port=80"\n'})}),"\n",(0,s.jsx)(n.p,{children:'???+ example "Example with ECS"'}),"\n",(0,s.jsx)(n.p,{children:"In ECS, you can use task definition labels to achieve the same effect:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'{\n  "containerDefinitions": [\n    {\n      "name": "my-service",\n      "image": "my-image",\n      "dockerLabels": {\n        "Mesh.http.routers.my-router.rule": "Host(`example.com`)",\n        "Mesh.http.services.my-service.loadbalancer.server.port": "80"\n      }\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"using-kubernetes-providers",children:"Using Kubernetes Providers"}),"\n",(0,s.jsx)(n.p,{children:"For Kubernetes providers, you can configure Mesh using the native Ingress or custom resources (like IngressRoute). Annotations in your Ingress or IngressRoute definition allow you to define routing rules and middleware settings. For example:"}),"\n",(0,s.jsx)(n.p,{children:'???+ example "Example with Kubernetes"'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: whoami\n  namespace: apps\n  annotations:\n    Mesh.ingress.kubernetes.io/router.entrypoints: websecure\n    Mesh.ingress.kubernetes.io/router.priority: "42"\n    Mesh.ingress.kubernetes.io/router.tls: "true"\n    Mesh.ingress.kubernetes.io/router.tls.options: apps-opt@kubernetescrd\nspec:\n  rules:\n    - host: my-domain.example.com\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: whoami\n                namespace: apps\n                port:\n                  number: 80\n  tls:\n    - secretName: supersecret    \n'})}),"\n",(0,s.jsx)(n.h2,{id:"using-key-value-pairs-with-kv-providers",children:"Using Key-Value Pairs With KV Providers"}),"\n",(0,s.jsxs)(n.p,{children:["For ",(0,s.jsx)(n.a,{href:"/doc/docs/reference/routing-configuration/other-providers/kv",children:"KV providers"})," you can configure Mesh with key-value pairs."]}),"\n",(0,s.jsx)(n.p,{children:'???+ example "Examples"'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'tab="etcd"',children:'# Set a router rule\netcdctl put /Mesh/http/routers/my-router/rule "Host(`example.com`)"\n# Define the service associated with the router\netcdctl put /Mesh/http/routers/my-router/service "my-service"\n# Set the backend server URL for the service\netcdctl put /Mesh/http/services/my-service/loadbalancer/servers/0/url "http://localhost:8080"\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'tab="Redis"',children:'# Set a router rule\nredis-cli set Mesh/http/routers/my-router/rule "Host(`example.com`)"\n# Define the service associated with the router\nredis-cli set Mesh/http/routers/my-router/service "my-service"\n# Set the backend server URL for the service\nredis-cli set Mesh/http/services/my-service/loadbalancer/servers/0/url "http://localhost:8080"\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'tab="ZooKeeper"',children:'# Set a router rule\ncreate /Mesh/http/routers/my-router/rule "Host(`example.com`)"\n# Define the service associated with the router\ncreate /Mesh/http/routers/my-router/service "my-service"\n# Set the backend server URL for the service\ncreate /Mesh/http/services/my-service/loadbalancer/servers/0/url "http://localhost:8080"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"using-tags-with-other-providers",children:"Using Tags With Other Providers"}),"\n",(0,s.jsx)(n.p,{children:"For providers that do not support labels, such as Consul & Nomad, you can use tags to provide routing configuration."}),"\n",(0,s.jsx)(n.p,{children:'???+ example "Example"'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'tab="Consul / Nomad"',children:'{\n  "Name": "my-service",\n  "Tags": [\n    "Mesh.http.routers.my-router.rule=Host(`example.com`)",\n    "Mesh.http.services.my-service.loadbalancer.server.port=80"\n  ],\n  "Address": "localhost",\n  "Port": 8080\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var i=r(6540);const s={},t=i.createContext(s);function o(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);