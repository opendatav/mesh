"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[7087],{1842:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"user-guides/docker-compose/basic-example/index","title":"Mesh Docker Documentation","description":"Learn how to use Docker Compose to expose a service with Mesh Proxy.","source":"@site/docs/user-guides/docker-compose/basic-example/index.md","sourceDirName":"user-guides/docker-compose/basic-example","slug":"/user-guides/docker-compose/basic-example/","permalink":"/doc/docs/user-guides/docker-compose/basic-example/","draft":false,"unlisted":false,"editUrl":"https://github.com/opendatav/mesh/tree/main/packages/create-docusaurus/templates/shared/docs/user-guides/docker-compose/basic-example/index.md","tags":[],"version":"current","frontMatter":{"title":"Mesh Docker Documentation","description":"Learn how to use Docker Compose to expose a service with Mesh Proxy."},"sidebar":"tutorialSidebar","previous":{"title":"Mesh Docker TLS Challenge Documentation","permalink":"/doc/docs/user-guides/docker-compose/acme-tls/"},"next":{"title":"Mesh FastProxy Experimental Configuration","permalink":"/doc/docs/user-guides/fastproxy"}}');var t=n(4848),r=n(8453);const i={title:"Mesh Docker Documentation",description:"Learn how to use Docker Compose to expose a service with Mesh Proxy."},c="Docker Compose example",a={},d=[{value:"Setup",id:"setup",level:2},{value:"Details",id:"details",level:2}];function l(e){const o={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.header,{children:(0,t.jsx)(o.h1,{id:"docker-compose-example",children:"Docker Compose example"})}),"\n",(0,t.jsxs)(o.p,{children:["In this section, you will learn how to use ",(0,t.jsx)(o.a,{href:"https://docs.docker.com/compose/",title:"Link to Docker Compose",children:"Docker Compose"})," to expose a service using the Docker provider."]}),"\n",(0,t.jsx)(o.h2,{id:"setup",children:"Setup"}),"\n",(0,t.jsxs)(o.p,{children:["Create a ",(0,t.jsx)(o.code,{children:"docker-compose.yml"})," file with the following content:"]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-yaml",children:'--8<-- "content/user-guides/docker-compose/basic-example/docker-compose.yml"\n'})}),"\n",(0,t.jsx)(o.p,{children:"??? Networking"}),"\n",(0,t.jsxs)(o.p,{children:["The Mesh container has to be attached to the same network as the containers to be exposed.\nIf no networks are specified in the Docker Compose file, Docker creates a default one that allows Mesh to reach the containers defined in the same file.\nYou can ",(0,t.jsx)(o.a,{href:"https://docs.docker.com/compose/networking/#specify-custom-networks",title:"Link to docs about custom networks with Docker Compose",children:"customize the network"})," as described in the example below.\nYou can use a ",(0,t.jsx)(o.a,{href:"https://docs.docker.com/compose/networking/#use-a-pre-existing-network",title:"Link to Docker Compose networking docs",children:"pre-existing network"})," too."]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-yaml",children:'version: "3.3"\n\nnetworks:\n  Meshnet: {}\n\nservices:\n\n  Mesh:\n    image: "Mesh:v3.4"\n    ...\n    networks:\n      - Meshnet\n\n  whoami:\n    image: "Mesh/whoami"\n    ...\n    networks:\n      - Meshnet\n\n'})}),"\n",(0,t.jsxs)(o.p,{children:["Replace ",(0,t.jsx)(o.code,{children:"whoami.localhost"})," by your ",(0,t.jsx)(o.strong,{children:"own domain"})," within the ",(0,t.jsx)(o.code,{children:"Mesh.http.routers.whoami.rule"})," label of the ",(0,t.jsx)(o.code,{children:"whoami"})," service."]}),"\n",(0,t.jsxs)(o.p,{children:["Now run ",(0,t.jsx)(o.code,{children:"docker compose up -d"})," within the folder where you created the previous file.",(0,t.jsx)(o.br,{}),"\n","This will start Docker Compose in background mode."]}),"\n",(0,t.jsx)(o.p,{children:'!!! info "This can take a moment"'}),"\n",(0,t.jsxs)(o.p,{children:["Docker Compose will now create and start the services declared in the ",(0,t.jsx)(o.code,{children:"docker-compose.yml"}),"."]}),"\n",(0,t.jsxs)(o.p,{children:["Wait a bit and visit ",(0,t.jsx)(o.code,{children:"http://your_own_domain"})," to confirm everything went fine."]}),"\n",(0,t.jsxs)(o.p,{children:["You should see the output of the whoami service.",(0,t.jsx)(o.br,{}),"\n","It should be similar to the following example:"]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-text",children:"Hostname: d7f919e54651\nIP: 127.0.0.1\nIP: 192.168.64.2\nGET / HTTP/1.1\nHost: whoami.localhost\nUser-Agent: curl/7.52.1\nAccept: */*\nAccept-Encoding: gzip\nX-Forwarded-For: 192.168.64.1\nX-Forwarded-Host: whoami.localhost\nX-Forwarded-Port: 80\nX-Forwarded-Proto: http\nX-Forwarded-Server: 7f0c797dbc51\nX-Real-Ip: 192.168.64.1\n"})}),"\n",(0,t.jsx)(o.h2,{id:"details",children:"Details"}),"\n",(0,t.jsx)(o.p,{children:"Let's break it down and go through it, step-by-step."}),"\n",(0,t.jsxs)(o.p,{children:["You use ",(0,t.jsx)(o.a,{href:"https://github.com/Mesh/whoami",title:"Link to the GitHub repo of whoami",children:"whoami"}),", a tiny Go server that prints OS information and HTTP request to output as service container."]}),"\n",(0,t.jsx)(o.p,{children:'Second, you define an entry point, along with the exposure of the matching port within Docker Compose, which allows to "open and accept" HTTP traffic:'}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-yaml",children:'command:\n  # Mesh will listen to incoming request on the port 80 (HTTP)\n  - "--entryPoints.web.address=:80"\n\nports:\n  - "80:80"\n'})}),"\n",(0,t.jsx)(o.p,{children:"Third, you expose the Mesh API to be able to check the configuration if needed:"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-yaml",children:'command:\n  # Mesh will listen on port 8080 by default for API request.\n  - "--api.insecure=true"\n\nports:\n  - "8080:8080"\n'})}),"\n",(0,t.jsx)(o.p,{children:"!!! Note"}),"\n",(0,t.jsxs)(o.p,{children:["If you are working on a remote server, you can use the following command to display configuration (require ",(0,t.jsx)(o.code,{children:"curl"})," & ",(0,t.jsx)(o.code,{children:"jq"}),"):"]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-bash",children:"curl -s 127.0.0.1:8080/api/rawdata | jq .\n"})}),"\n",(0,t.jsx)(o.p,{children:"Fourth, you allow Mesh to gather configuration from Docker:"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-yaml",children:'Mesh:\n  command:\n    # Enabling Docker provider\n    - "--providers.docker=true"\n    # Do not expose containers unless explicitly told so\n    - "--providers.docker.exposedbydefault=false"\n  volumes:\n    - "/var/run/docker.sock:/var/run/docker.sock:ro"\n\nwhoami:\n  labels:\n    # Explicitly tell Mesh to expose this container\n    - "Mesh.enable=true"\n    # The domain the service will respond to\n    - "Mesh.http.routers.whoami.rule=Host(`whoami.localhost`)"\n    # Allow request only from the predefined entry point named "web"\n    - "Mesh.http.routers.whoami.entrypoints=web"\n'})})]})}function h(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,o,n)=>{n.d(o,{R:()=>i,x:()=>c});var s=n(6540);const t={},r=s.createContext(t);function i(e){const o=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(r.Provider,{value:o},e.children)}}}]);