"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[94],{1086:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"observability/tracing/opentelemetry","title":"Mesh OpenTelemetry Documentation","description":"Mesh supports several tracing backends, including OpenTelemetry. Learn how to implement it for observability in Mesh Proxy. Read the technical documentation.","source":"@site/docs/observability/tracing/opentelemetry.md","sourceDirName":"observability/tracing","slug":"/observability/tracing/opentelemetry","permalink":"/doc/docs/observability/tracing/opentelemetry","draft":false,"unlisted":false,"editUrl":"https://github.com/opendatav/mesh/tree/main/packages/create-docusaurus/templates/shared/docs/observability/tracing/opentelemetry.md","tags":[],"version":"current","frontMatter":{"title":"Mesh OpenTelemetry Documentation","description":"Mesh supports several tracing backends, including OpenTelemetry. Learn how to implement it for observability in Mesh Proxy. Read the technical documentation."},"sidebar":"tutorialSidebar","previous":{"title":"Mesh Observability Overview","permalink":"/doc/docs/observability/overview"},"next":{"title":"Mesh Tracing Overview","permalink":"/doc/docs/observability/tracing/overview"}}');var c=n(4848),l=n(8453);const i={title:"Mesh OpenTelemetry Documentation",description:"Mesh supports several tracing backends, including OpenTelemetry. Learn how to implement it for observability in Mesh Proxy. Read the technical documentation."},s="OpenTelemetry",a={},o=[{value:"HTTP configuration",id:"http-configuration",level:3},{value:"<code>endpoint</code>",id:"endpoint",level:4},{value:"<code>headers</code>",id:"headers",level:4},{value:"<code>tls</code>",id:"tls",level:4},{value:"<code>ca</code>",id:"ca",level:5},{value:"<code>cert</code>",id:"cert",level:5},{value:"<code>key</code>",id:"key",level:5},{value:"<code>insecureSkipVerify</code>",id:"insecureskipverify",level:5},{value:"gRPC configuration",id:"grpc-configuration",level:3},{value:"<code>endpoint</code>",id:"endpoint-1",level:4},{value:"<code>insecure</code>",id:"insecure",level:4},{value:"<code>headers</code>",id:"headers-1",level:4},{value:"<code>tls</code>",id:"tls-1",level:4},{value:"<code>ca</code>",id:"ca-1",level:5},{value:"<code>cert</code>",id:"cert-1",level:5},{value:"<code>key</code>",id:"key-1",level:5},{value:"<code>insecureSkipVerify</code>",id:"insecureskipverify-1",level:5}];function d(e){const t={a:"a",br:"br",code:"code",em:"em",h1:"h1",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.header,{children:(0,c.jsx)(t.h1,{id:"opentelemetry",children:"OpenTelemetry"})}),"\n",(0,c.jsxs)(t.p,{children:["Mesh Proxy follows ",(0,c.jsx)(t.a,{href:"https://github.com/open-telemetry/semantic-conventions/blob/v1.26.0/docs/http/http-spans.md",children:"official OpenTelemetry semantic conventions v1.26.0"}),"."]}),"\n",(0,c.jsx)(t.p,{children:"To enable the OpenTelemetry tracer:"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"tracing:\n  otlp: {}\n"})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[tracing]\n  [tracing.otlp]\n"})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--tracing.otlp=true\n"})}),"\n",(0,c.jsx)(t.p,{children:'!!! info "Default protocol"'}),"\n",(0,c.jsxs)(t.p,{children:["The OpenTelemetry trace exporter will export traces to the collector using HTTPS by default to ",(0,c.jsx)(t.a,{href:"https://localhost:4318/v1/traces",children:"https://localhost:4318/v1/traces"}),", see the ",(0,c.jsx)(t.a,{href:"#grpc-configuration",children:"gRPC Section"})," to use gRPC."]}),"\n",(0,c.jsx)(t.p,{children:'!!! info "Trace sampling"'}),"\n",(0,c.jsxs)(t.p,{children:["By default, the OpenTelemetry trace exporter will sample 100% of traces.",(0,c.jsx)(t.br,{}),"\n","See ",(0,c.jsx)(t.a,{href:"https://opentelemetry.io/docs/reference/specification/sdk-environment-variables/#general-sdk-configuration",children:"OpenTelemetry's SDK configuration"})," to customize the sampling strategy."]}),"\n",(0,c.jsx)(t.p,{children:'!!! info "Propagation"'}),"\n",(0,c.jsxs)(t.p,{children:["Mesh supports the ",(0,c.jsx)(t.code,{children:"OTEL_PROPAGATORS"})," env variable to set up the propragators. The supported propagators are:"]}),"\n",(0,c.jsxs)(t.ul,{children:["\n",(0,c.jsx)(t.li,{children:"tracecontext (default)"}),"\n",(0,c.jsx)(t.li,{children:"baggage (default)"}),"\n",(0,c.jsx)(t.li,{children:"b3"}),"\n",(0,c.jsx)(t.li,{children:"b3multi"}),"\n",(0,c.jsx)(t.li,{children:"jaeger"}),"\n",(0,c.jsx)(t.li,{children:"xray"}),"\n",(0,c.jsx)(t.li,{children:"ottrace"}),"\n"]}),"\n",(0,c.jsx)(t.p,{children:"Example of configuration:"}),"\n",(0,c.jsx)(t.p,{children:"OTEL_PROPAGATORS=b3,jaeger"}),"\n",(0,c.jsx)(t.h3,{id:"http-configuration",children:"HTTP configuration"}),"\n",(0,c.jsx)(t.p,{children:(0,c.jsx)(t.em,{children:"Optional"})}),"\n",(0,c.jsx)(t.p,{children:"This instructs the exporter to send spans to the OpenTelemetry Collector using HTTP."}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"tracing:\n  otlp:\n    http: {}\n"})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[tracing]\n  [tracing.otlp.http]\n"})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--tracing.otlp.http=true\n"})}),"\n",(0,c.jsx)(t.h4,{id:"endpoint",children:(0,c.jsx)(t.code,{children:"endpoint"})}),"\n",(0,c.jsx)(t.p,{children:(0,c.jsxs)(t.em,{children:['Optional, Default="',(0,c.jsx)(t.a,{href:"https://localhost:4318/v1/traces",children:"https://localhost:4318/v1/traces"}),'", Format="',(0,c.jsx)(t.code,{children:"<scheme>://<host>:<port><path>"}),'"']})}),"\n",(0,c.jsx)(t.p,{children:"URL of the OpenTelemetry Collector to send spans to."}),"\n",(0,c.jsx)(t.p,{children:'!!! info "Insecure mode"'}),"\n",(0,c.jsxs)(t.p,{children:["To disable TLS, use ",(0,c.jsx)(t.code,{children:"http://"})," instead of ",(0,c.jsx)(t.code,{children:"https://"})," in the ",(0,c.jsx)(t.code,{children:"endpoint"})," configuration."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"tracing:\n  otlp:\n    http:\n      endpoint: https://collector:4318/v1/traces\n"})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[tracing]\n  [tracing.otlp.http]\n    endpoint = "https://collector:4318/v1/traces"\n'})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--tracing.otlp.http.endpoint=https://collector:4318/v1/traces\n"})}),"\n",(0,c.jsx)(t.h4,{id:"headers",children:(0,c.jsx)(t.code,{children:"headers"})}),"\n",(0,c.jsx)(t.p,{children:(0,c.jsx)(t.em,{children:"Optional, Default="})}),"\n",(0,c.jsx)(t.p,{children:"Additional headers sent with traces by the exporter to the OpenTelemetry Collector."}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"tracing:\n  otlp:\n    http:\n      headers:\n        foo: bar\n        baz: buz\n"})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[tracing]\n  [tracing.otlp.http.headers]\n    foo = "bar"\n    baz = "buz"\n'})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--tracing.otlp.http.headers.foo=bar --tracing.otlp.http.headers.baz=buz\n"})}),"\n",(0,c.jsx)(t.h4,{id:"tls",children:(0,c.jsx)(t.code,{children:"tls"})}),"\n",(0,c.jsx)(t.p,{children:(0,c.jsx)(t.em,{children:"Optional"})}),"\n",(0,c.jsx)(t.p,{children:"Defines the Client TLS configuration used by the exporter to send spans to the OpenTelemetry Collector."}),"\n",(0,c.jsx)(t.h5,{id:"ca",children:(0,c.jsx)(t.code,{children:"ca"})}),"\n",(0,c.jsx)(t.p,{children:(0,c.jsx)(t.em,{children:"Optional"})}),"\n",(0,c.jsxs)(t.p,{children:[(0,c.jsx)(t.code,{children:"ca"})," is the path to the certificate authority used for the secure connection to the OpenTelemetry Collector,\nit defaults to the system bundle."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"tracing:\n  otlp:\n    http:\n      tls:\n        ca: path/to/ca.crt\n"})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[tracing.otlp.http.tls]\n  ca = "path/to/ca.crt"\n'})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--tracing.otlp.http.tls.ca=path/to/ca.crt\n"})}),"\n",(0,c.jsx)(t.h5,{id:"cert",children:(0,c.jsx)(t.code,{children:"cert"})}),"\n",(0,c.jsx)(t.p,{children:(0,c.jsx)(t.em,{children:"Optional"})}),"\n",(0,c.jsxs)(t.p,{children:[(0,c.jsx)(t.code,{children:"cert"})," is the path to the public certificate used for the secure connection to the OpenTelemetry Collector.\nWhen using this option, setting the ",(0,c.jsx)(t.code,{children:"key"})," option is required."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"tracing:\n  otlp:\n    http:\n      tls:\n        cert: path/to/foo.cert\n        key: path/to/foo.key\n"})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[tracing.otlp.http.tls]\n  cert = "path/to/foo.cert"\n  key = "path/to/foo.key"\n'})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--tracing.otlp.http.tls.cert=path/to/foo.cert\n--tracing.otlp.http.tls.key=path/to/foo.key\n"})}),"\n",(0,c.jsx)(t.h5,{id:"key",children:(0,c.jsx)(t.code,{children:"key"})}),"\n",(0,c.jsx)(t.p,{children:(0,c.jsx)(t.em,{children:"Optional"})}),"\n",(0,c.jsxs)(t.p,{children:[(0,c.jsx)(t.code,{children:"key"})," is the path to the private key used for the secure connection to the OpenTelemetry Collector.\nWhen using this option, setting the ",(0,c.jsx)(t.code,{children:"cert"})," option is required."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"tracing:\n  otlp:\n    http:\n      tls:\n        cert: path/to/foo.cert\n        key: path/to/foo.key\n"})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[tracing.otlp.http.tls]\n  cert = "path/to/foo.cert"\n  key = "path/to/foo.key"\n'})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--tracing.otlp.http.tls.cert=path/to/foo.cert\n--tracing.otlp.http.tls.key=path/to/foo.key\n"})}),"\n",(0,c.jsx)(t.h5,{id:"insecureskipverify",children:(0,c.jsx)(t.code,{children:"insecureSkipVerify"})}),"\n",(0,c.jsx)(t.p,{children:(0,c.jsx)(t.em,{children:"Optional, Default=false"})}),"\n",(0,c.jsxs)(t.p,{children:["If ",(0,c.jsx)(t.code,{children:"insecureSkipVerify"})," is ",(0,c.jsx)(t.code,{children:"true"}),",\nthe TLS connection to the OpenTelemetry Collector accepts any certificate presented by the server regardless of the hostnames it covers."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"tracing:\n  otlp:\n    http:\n      tls:\n        insecureSkipVerify: true\n"})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[tracing.otlp.http.tls]\n  insecureSkipVerify = true\n"})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--tracing.otlp.http.tls.insecureSkipVerify=true\n"})}),"\n",(0,c.jsx)(t.h3,{id:"grpc-configuration",children:"gRPC configuration"}),"\n",(0,c.jsx)(t.p,{children:(0,c.jsx)(t.em,{children:"Optional"})}),"\n",(0,c.jsx)(t.p,{children:"This instructs the exporter to send spans to the OpenTelemetry Collector using gRPC."}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"tracing:\n  otlp:\n    grpc: {}\n"})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[tracing]\n  [tracing.otlp.grpc]\n"})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--tracing.otlp.grpc=true\n"})}),"\n",(0,c.jsx)(t.h4,{id:"endpoint-1",children:(0,c.jsx)(t.code,{children:"endpoint"})}),"\n",(0,c.jsx)(t.p,{children:(0,c.jsxs)(t.em,{children:['Required, Default="localhost:4317", Format="',(0,c.jsx)(t.code,{children:"<host>:<port>"}),'"']})}),"\n",(0,c.jsx)(t.p,{children:"Address of the OpenTelemetry Collector to send spans to."}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"tracing:\n  otlp:\n    grpc:\n      endpoint: localhost:4317\n"})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[tracing]\n  [tracing.otlp.grpc]\n    endpoint = "localhost:4317"\n'})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--tracing.otlp.grpc.endpoint=localhost:4317\n"})}),"\n",(0,c.jsx)(t.h4,{id:"insecure",children:(0,c.jsx)(t.code,{children:"insecure"})}),"\n",(0,c.jsx)(t.p,{children:(0,c.jsx)(t.em,{children:"Optional, Default=false"})}),"\n",(0,c.jsx)(t.p,{children:"Allows exporter to send spans to the OpenTelemetry Collector without using a secured protocol."}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"tracing:\n  otlp:\n    grpc:\n      insecure: true\n"})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[tracing]\n  [tracing.otlp.grpc]\n    insecure = true\n"})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--tracing.otlp.grpc.insecure=true\n"})}),"\n",(0,c.jsx)(t.h4,{id:"headers-1",children:(0,c.jsx)(t.code,{children:"headers"})}),"\n",(0,c.jsx)(t.p,{children:(0,c.jsx)(t.em,{children:"Optional, Default="})}),"\n",(0,c.jsx)(t.p,{children:"Additional headers sent with traces by the exporter to the OpenTelemetry Collector."}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"tracing:\n  otlp:\n    grpc:\n      headers:\n        foo: bar\n        baz: buz\n"})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[tracing]\n  [tracing.otlp.grpc.headers]\n    foo = "bar"\n    baz = "buz"\n'})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--tracing.otlp.grpc.headers.foo=bar --tracing.otlp.grpc.headers.baz=buz\n"})}),"\n",(0,c.jsx)(t.h4,{id:"tls-1",children:(0,c.jsx)(t.code,{children:"tls"})}),"\n",(0,c.jsx)(t.p,{children:(0,c.jsx)(t.em,{children:"Optional"})}),"\n",(0,c.jsx)(t.p,{children:"Defines the Client TLS configuration used by the exporter to send spans to the OpenTelemetry Collector."}),"\n",(0,c.jsx)(t.h5,{id:"ca-1",children:(0,c.jsx)(t.code,{children:"ca"})}),"\n",(0,c.jsx)(t.p,{children:(0,c.jsx)(t.em,{children:"Optional"})}),"\n",(0,c.jsxs)(t.p,{children:[(0,c.jsx)(t.code,{children:"ca"})," is the path to the certificate authority used for the secure connection to the OpenTelemetry Collector,\nit defaults to the system bundle."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"tracing:\n  otlp:\n    grpc:\n      tls:\n        ca: path/to/ca.crt\n"})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[tracing.otlp.grpc.tls]\n  ca = "path/to/ca.crt"\n'})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--tracing.otlp.grpc.tls.ca=path/to/ca.crt\n"})}),"\n",(0,c.jsx)(t.h5,{id:"cert-1",children:(0,c.jsx)(t.code,{children:"cert"})}),"\n",(0,c.jsx)(t.p,{children:(0,c.jsx)(t.em,{children:"Optional"})}),"\n",(0,c.jsxs)(t.p,{children:[(0,c.jsx)(t.code,{children:"cert"})," is the path to the public certificate used for the secure connection to the OpenTelemetry Collector.\nWhen using this option, setting the ",(0,c.jsx)(t.code,{children:"key"})," option is required."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"tracing:\n  otlp:\n    grpc:\n      tls:\n        cert: path/to/foo.cert\n        key: path/to/foo.key\n"})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[tracing.otlp.grpc.tls]\n  cert = "path/to/foo.cert"\n  key = "path/to/foo.key"\n'})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--tracing.otlp.grpc.tls.cert=path/to/foo.cert\n--tracing.otlp.grpc.tls.key=path/to/foo.key\n"})}),"\n",(0,c.jsx)(t.h5,{id:"key-1",children:(0,c.jsx)(t.code,{children:"key"})}),"\n",(0,c.jsx)(t.p,{children:(0,c.jsx)(t.em,{children:"Optional"})}),"\n",(0,c.jsxs)(t.p,{children:[(0,c.jsx)(t.code,{children:"key"})," is the path to the private key used for the secure connection to the OpenTelemetry Collector.\nWhen using this option, setting the ",(0,c.jsx)(t.code,{children:"cert"})," option is required."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"tracing:\n  otlp:\n    grpc:\n      tls:\n        cert: path/to/foo.cert\n        key: path/to/foo.key\n"})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[tracing.otlp.grpc.tls]\n  cert = "path/to/foo.cert"\n  key = "path/to/foo.key"\n'})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--tracing.otlp.grpc.tls.cert=path/to/foo.cert\n--tracing.otlp.grpc.tls.key=path/to/foo.key\n"})}),"\n",(0,c.jsx)(t.h5,{id:"insecureskipverify-1",children:(0,c.jsx)(t.code,{children:"insecureSkipVerify"})}),"\n",(0,c.jsx)(t.p,{children:(0,c.jsx)(t.em,{children:"Optional, Default=false"})}),"\n",(0,c.jsxs)(t.p,{children:["If ",(0,c.jsx)(t.code,{children:"insecureSkipVerify"})," is ",(0,c.jsx)(t.code,{children:"true"}),",\nthe TLS connection to the OpenTelemetry Collector accepts any certificate presented by the server regardless of the hostnames it covers."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"tracing:\n  otlp:\n    grpc:\n      tls:\n        insecureSkipVerify: true\n"})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[tracing.otlp.grpc.tls]\n  insecureSkipVerify = true\n"})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--tracing.otlp.grpc.tls.insecureSkipVerify=true\n"})})]})}function h(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>s});var r=n(6540);const c={},l=r.createContext(c);function i(e){const t=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),r.createElement(l.Provider,{value:t},e.children)}}}]);