"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[785],{2262:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"providers/file","title":"Mesh File Documentation","description":"The file provider in Mesh Proxy lets you define the dynamic configuration in a YAML or TOML file. Read the technical documentation.","source":"@site/docs/providers/file.md","sourceDirName":"providers","slug":"/providers/file","permalink":"/doc/docs/providers/file","draft":false,"unlisted":false,"editUrl":"https://github.com/opendatav/mesh/tree/main/packages/create-docusaurus/templates/shared/docs/providers/file.md","tags":[],"version":"current","frontMatter":{"title":"Mesh File Documentation","description":"The file provider in Mesh Proxy lets you define the dynamic configuration in a YAML or TOML file. Read the technical documentation."},"sidebar":"tutorialSidebar","previous":{"title":"Mesh Etcd Documentation","permalink":"/doc/docs/providers/etcd"},"next":{"title":"Mesh HTTP Documentation","permalink":"/doc/docs/providers/http"}}');var r=i(4848),s=i(8453);const o={title:"Mesh File Documentation",description:"The file provider in Mesh Proxy lets you define the dynamic configuration in a YAML or TOML file. Read the technical documentation."},a="Mesh & File",c={},l=[{value:"Configuration Examples",id:"configuration-examples",level:2},{value:"Provider Configuration",id:"provider-configuration",level:2},{value:"<code>filename</code>",id:"filename",level:3},{value:"<code>directory</code>",id:"directory",level:3},{value:"<code>watch</code>",id:"watch",level:3},{value:"Go Templating",id:"go-templating",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"mesh--file",children:"Mesh & File"})}),"\n",(0,r.jsx)(n.p,{children:"Good Old Configuration File"}),"\n",(0,r.jsxs)(n.p,{children:["The file provider lets you define the ",(0,r.jsx)(n.a,{href:"/doc/docs/providers/overview",children:"dynamic configuration"})," in a YAML or TOML file."]}),"\n",(0,r.jsxs)(n.p,{children:["It supports providing configuration through a ",(0,r.jsx)(n.a,{href:"#filename",children:"single configuration file"})," or ",(0,r.jsx)(n.a,{href:"#directory",children:"multiple separate files"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"!!! info"}),"\n",(0,r.jsx)(n.p,{children:"The file provider is the default format used throughout the documentation to show samples of the configuration for many features."}),"\n",(0,r.jsx)(n.p,{children:"!!! tip"}),"\n",(0,r.jsx)(n.p,{children:"The file provider can be a good solution for reusing common elements from other providers (e.g. declaring allowlist middlewares, basic authentication, ...)"}),"\n",(0,r.jsx)(n.h2,{id:"configuration-examples",children:"Configuration Examples"}),"\n",(0,r.jsx)(n.p,{children:'??? example "Declaring Routers, Middlewares & Services"'}),"\n",(0,r.jsx)(n.p,{children:"Enabling the file provider:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:'providers:\n  file:\n    directory: "/path/to/dynamic/conf"\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[providers.file]\n  directory = "/path/to/dynamic/conf"\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",metastring:'tab="CLI"',children:"--providers.file.directory=/path/to/dynamic/conf\n"})}),"\n",(0,r.jsx)(n.p,{children:"Declaring Routers, Middlewares & Services:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:"http:\n  # Add the router\n  routers:\n    router0:\n      entryPoints:\n      - web\n      middlewares:\n      - my-basic-auth\n      service: service-foo\n      rule: Path(`/foo`)\n\n  # Add the middleware\n  middlewares:\n    my-basic-auth:\n      basicAuth:\n        users:\n        - test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\n        - test2:$apr1$d9hr9HBB$4HxwgUir3HP4EsggP/QNo0\n        usersFile: etc/Mesh/.htpasswd\n\n  # Add the service\n  services:\n    service-foo:\n      loadBalancer:\n        servers:\n        - url: http://foo/\n        - url: http://bar/\n        passHostHeader: false\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'[http]\n  # Add the router\n  [http.routers]\n    [http.routers.router0]\n      entryPoints = ["web"]\n      middlewares = ["my-basic-auth"]\n      service = "service-foo"\n      rule = "Path(`/foo`)"\n\n  # Add the middleware\n  [http.middlewares]\n    [http.middlewares.my-basic-auth.basicAuth]\n      users = ["test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/",\n                "test2:$apr1$d9hr9HBB$4HxwgUir3HP4EsggP/QNo0"]\n      usersFile = "etc/Mesh/.htpasswd"\n\n  # Add the service\n  [http.services]\n    [http.services.service-foo]\n      [http.services.service-foo.loadBalancer]\n        [[http.services.service-foo.loadBalancer.servers]]\n          url = "http://foo/"\n        [[http.services.service-foo.loadBalancer.servers]]\n          url = "http://bar/"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"provider-configuration",children:"Provider Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["For an overview of all the options that can be set with the file provider, see the ",(0,r.jsx)(n.a,{href:"/doc/docs/reference/dynamic-configuration/file",children:"dynamic configuration"})," and ",(0,r.jsx)(n.a,{href:"/doc/docs/reference/static-configuration/overview",children:"static configuration"})," references."]}),"\n",(0,r.jsx)(n.p,{children:'!!! warning "Limitations"'}),"\n",(0,r.jsx)(n.p,{children:"With the file provider, Mesh listens for file system notifications to update the dynamic configuration."}),"\n",(0,r.jsx)(n.p,{children:"If you use a mounted/bound file system in your orchestrator (like docker or kubernetes), the way the files are linked may be a source of errors.\nIf the link between the file systems is broken, when a source file/directory is changed/renamed, nothing will be reported to the linked file/directory, so the file system notifications will be neither triggered nor caught."}),"\n",(0,r.jsx)(n.p,{children:"For example, in Docker, if the host file is renamed, the link to the mounted file is broken and the container's file is no longer updated.\nTo avoid this kind of issue, it is recommended to:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["set the Mesh ",(0,r.jsx)(n.a,{href:"#directory",children:(0,r.jsx)(n.strong,{children:"directory"})})," configuration with the parent directory"]}),"\n",(0,r.jsx)(n.li,{children:"mount/bind the parent directory"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["As it is very difficult to listen to all file system notifications, Mesh uses ",(0,r.jsx)(n.a,{href:"https://github.com/fsnotify/fsnotify",children:"fsnotify"}),".\nIf using a directory with a mounted directory does not fix your issue, please check your file system compatibility with fsnotify."]}),"\n",(0,r.jsx)(n.h3,{id:"filename",children:(0,r.jsx)(n.code,{children:"filename"})}),"\n",(0,r.jsx)(n.p,{children:"Defines the path to the configuration file."}),"\n",(0,r.jsx)(n.p,{children:'!!! warning ""'}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"filename"})," and ",(0,r.jsx)(n.code,{children:"directory"})," options are mutually exclusive.\nIt is recommended to use ",(0,r.jsx)(n.code,{children:"directory"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"providers:\n  file:\n    filename: /path/to/config/dynamic_conf.yml\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[providers]\n  [providers.file]\n    filename = "/path/to/config/dynamic_conf.toml"\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",metastring:'tab="CLI"',children:"--providers.file.filename=/path/to/config/dynamic_conf.yml\n"})}),"\n",(0,r.jsx)(n.h3,{id:"directory",children:(0,r.jsx)(n.code,{children:"directory"})}),"\n",(0,r.jsx)(n.p,{children:"Defines the path to the directory that contains the configuration files."}),"\n",(0,r.jsx)(n.p,{children:'!!! warning ""'}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"filename"})," and ",(0,r.jsx)(n.code,{children:"directory"})," options are mutually exclusive.\nIt is recommended to use ",(0,r.jsx)(n.code,{children:"directory"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"providers:\n  file:\n    directory: /path/to/config\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[providers]\n  [providers.file]\n    directory = "/path/to/config"\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",metastring:'tab="CLI"',children:"--providers.file.directory=/path/to/config\n"})}),"\n",(0,r.jsx)(n.h3,{id:"watch",children:(0,r.jsx)(n.code,{children:"watch"})}),"\n",(0,r.jsxs)(n.p,{children:["Set the ",(0,r.jsx)(n.code,{children:"watch"})," option to ",(0,r.jsx)(n.code,{children:"true"})," to allow Mesh to automatically watch for file changes.\nIt works with both the ",(0,r.jsx)(n.code,{children:"filename"})," and the ",(0,r.jsx)(n.code,{children:"directory"})," options."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"providers:\n  file:\n    directory: /path/to/dynamic/conf\n    watch: true\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[providers]\n  [providers.file]\n    directory = "/path/to/dynamic/conf"\n    watch = true\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",metastring:'tab="CLI"',children:"--providers.file.directory=/my/path/to/dynamic/conf\n--providers.file.watch=true\n"})}),"\n",(0,r.jsx)(n.h3,{id:"go-templating",children:"Go Templating"}),"\n",(0,r.jsx)(n.p,{children:"!!! warning"}),"\n",(0,r.jsx)(n.p,{children:"Go Templating only works with dedicated dynamic configuration files.\nTemplating does not work in the Mesh main static configuration file."}),"\n",(0,r.jsxs)(n.p,{children:["Mesh supports using Go templating to automatically generate repetitive sections of configuration files.\nThese sections must be a valid ",(0,r.jsx)(n.a,{href:"https://pkg.go.dev/text/template/",children:"Go template"}),", and can use\n",(0,r.jsx)(n.a,{href:"https://masterminds.github.io/sprig/",children:"sprig template functions"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"To illustrate, it is possible to easily define multiple routers, services, and TLS certificates as described in the following examples:"}),"\n",(0,r.jsx)(n.p,{children:'??? example "Configuring Using Templating"'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'tab="YAML"',children:'http:\n  routers:\n    {{range $i, $e := until 100 }}\n    router{{ $e }}-{{ env "MY_ENV_VAR" }}:\n      # ...\n    {{end}}\n\n  services:\n    {{range $i, $e := until 100 }}\n    application{{ $e }}:\n      # ...\n    {{end}}\n\ntcp:\n  routers:\n    {{range $i, $e := until 100 }}\n    router{{ $e }}:\n      # ...\n    {{end}}\n\n  services:\n    {{range $i, $e := until 100 }}\n    service{{ $e }}:\n      # ...\n    {{end}}\n\ntls:\n  certificates:\n  {{ range $i, $e := until 10 }}\n  - certFile: "/etc/Mesh/cert-{{ $e }}.pem"\n    keyFile: "/etc/Mesh/cert-{{ $e }}.key"\n    store:\n    - "my-store-foo-{{ $e }}"\n    - "my-store-bar-{{ $e }}"\n  {{end}}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",metastring:'tab="TOML"',children:'# template-rules.toml\n[http]\n\n  [http.routers]\n  {{ range $i, $e := until 100 }}\n    [http.routers.router{{ $e }}-{{ env "MY_ENV_VAR" }}]\n    # ...\n  {{ end }}\n\n  [http.services]\n  {{ range $i, $e := until 100 }}\n      [http.services.service{{ $e }}]\n      # ...\n  {{ end }}\n\n[tcp]\n\n  [tcp.routers]\n  {{ range $i, $e := until 100 }}\n    [tcp.routers.router{{ $e }}]\n    # ...\n  {{ end }}\n\n  [tcp.services]\n  {{ range $i, $e := until 100 }}\n      [http.services.service{{ $e }}]\n      # ...\n  {{ end }}\n\n{{ range $i, $e := until 10 }}\n[[tls.certificates]]\n  certFile = "/etc/Mesh/cert-{{ $e }}.pem"\n  keyFile = "/etc/Mesh/cert-{{ $e }}.key"\n  stores = ["my-store-foo-{{ $e }}", "my-store-bar-{{ $e }}"]\n{{ end }}\n\n[tls.config]\n{{ range $i, $e := until 10 }}\n  [tls.config.TLS{{ $e }}]\n  # ...\n{{ end }}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var t=i(6540);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);