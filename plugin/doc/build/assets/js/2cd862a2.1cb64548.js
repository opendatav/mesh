"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[8167],{3231:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"observability/logs","title":"Mesh Logs Documentation","description":"Logs are a key part of observability in Mesh Proxy. Read the technical documentation to learn their configurations, rotations, and time zones.","source":"@site/docs/observability/logs.md","sourceDirName":"observability","slug":"/observability/logs","permalink":"/doc/docs/observability/logs","draft":false,"unlisted":false,"editUrl":"https://github.com/opendatav/mesh/tree/main/packages/create-docusaurus/templates/shared/docs/observability/logs.md","tags":[],"version":"current","frontMatter":{"title":"Mesh Logs Documentation","description":"Logs are a key part of observability in Mesh Proxy. Read the technical documentation to learn their configurations, rotations, and time zones."},"sidebar":"tutorialSidebar","previous":{"title":"Mesh Access Logs Documentation","permalink":"/doc/docs/observability/access-logs"},"next":{"title":"Mesh Datadog Metrics Documentation","permalink":"/doc/docs/observability/metrics/datadog"}}');var s=t(4848),o=t(8453);const a={title:"Mesh Logs Documentation",description:"Logs are a key part of observability in Mesh Proxy. Read the technical documentation to learn their configurations, rotations, and time zones."},r="Logs",i={},c=[{value:"Configuration",id:"configuration",level:2},{value:"General",id:"general",level:3},{value:"<code>filePath</code>",id:"filepath",level:4},{value:"<code>format</code>",id:"format",level:4},{value:"<code>level</code>",id:"level",level:4},{value:"<code>noColor</code>",id:"nocolor",level:4},{value:"Log Rotation",id:"log-rotation",level:2},{value:"<code>maxSize</code>",id:"maxsize",level:3},{value:"<code>maxBackups</code>",id:"maxbackups",level:3},{value:"<code>maxAge</code>",id:"maxage",level:3},{value:"<code>compress</code>",id:"compress",level:3},{value:"OpenTelemetry",id:"opentelemetry",level:2},{value:"HTTP configuration",id:"http-configuration",level:3},{value:"<code>endpoint</code>",id:"endpoint",level:4},{value:"<code>headers</code>",id:"headers",level:4},{value:"<code>tls</code>",id:"tls",level:4},{value:"<code>ca</code>",id:"ca",level:5},{value:"<code>cert</code>",id:"cert",level:5},{value:"<code>key</code>",id:"key",level:5},{value:"<code>insecureSkipVerify</code>",id:"insecureskipverify",level:5},{value:"gRPC configuration",id:"grpc-configuration",level:3},{value:"<code>endpoint</code>",id:"endpoint-1",level:4},{value:"<code>insecure</code>",id:"insecure",level:4},{value:"<code>headers</code>",id:"headers-1",level:4},{value:"<code>tls</code>",id:"tls-1",level:4},{value:"<code>ca</code>",id:"ca-1",level:5},{value:"<code>cert</code>",id:"cert-1",level:5},{value:"<code>key</code>",id:"key-1",level:5},{value:"<code>insecureSkipVerify</code>",id:"insecureskipverify-1",level:5}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"logs",children:"Logs"})}),"\n",(0,s.jsx)(n.p,{children:"Reading What's Happening"}),"\n",(0,s.jsx)(n.p,{children:"By default, logs are written to stdout, in text format."}),"\n",(0,s.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(n.h3,{id:"general",children:"General"}),"\n",(0,s.jsx)(n.p,{children:"Mesh logs concern everything that happens to Mesh itself (startup, configuration, events, shutdown, and so on)."}),"\n",(0,s.jsx)(n.h4,{id:"filepath",children:(0,s.jsx)(n.code,{children:"filePath"})}),"\n",(0,s.jsxs)(n.p,{children:["By default, the logs are written to the standard output.\nYou can configure a file path instead using the ",(0,s.jsx)(n.code,{children:"filePath"})," option."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:'# Writing Logs to a File\nlog:\n  filePath: "/path/to/Mesh.log"\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'# Writing Logs to a File\n[log]\n  filePath = "/path/to/Mesh.log"\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'tab="CLI"',children:"# Writing Logs to a File\n--log.filePath=/path/to/Mesh.log\n"})}),"\n",(0,s.jsx)(n.h4,{id:"format",children:(0,s.jsx)(n.code,{children:"format"})}),"\n",(0,s.jsxs)(n.p,{children:["By default, the logs use a text format (",(0,s.jsx)(n.code,{children:"common"}),"), but you can also ask for the ",(0,s.jsx)(n.code,{children:"json"})," format in the ",(0,s.jsx)(n.code,{children:"format"})," option."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:'# Writing Logs to a File, in JSON\nlog:\n  filePath: "/path/to/log-file.log"\n  format: json\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'# Writing Logs to a File, in JSON\n[log]\n  filePath = "/path/to/log-file.log"\n  format = "json"\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'tab="CLI"',children:"# Writing Logs to a File, in JSON\n--log.filePath=/path/to/Mesh.log\n--log.format=json\n"})}),"\n",(0,s.jsx)(n.h4,{id:"level",children:(0,s.jsx)(n.code,{children:"level"})}),"\n",(0,s.jsxs)(n.p,{children:["By default, the ",(0,s.jsx)(n.code,{children:"level"})," is set to ",(0,s.jsx)(n.code,{children:"ERROR"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Alternative logging levels are ",(0,s.jsx)(n.code,{children:"TRACE"}),", ",(0,s.jsx)(n.code,{children:"DEBUG"}),", ",(0,s.jsx)(n.code,{children:"INFO"}),", ",(0,s.jsx)(n.code,{children:"WARN"}),", ",(0,s.jsx)(n.code,{children:"ERROR"}),", ",(0,s.jsx)(n.code,{children:"FATAL"}),", and ",(0,s.jsx)(n.code,{children:"PANIC"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"log:\n  level: DEBUG\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[log]\n  level = "DEBUG"\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'tab="CLI"',children:"--log.level=DEBUG\n"})}),"\n",(0,s.jsx)(n.h4,{id:"nocolor",children:(0,s.jsx)(n.code,{children:"noColor"})}),"\n",(0,s.jsx)(n.p,{children:"When using the 'common' format, disables the colorized output."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"log:\n  noColor: true\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[log]\n  noColor = true\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'tab="CLI"',children:"--log.nocolor=true\n"})}),"\n",(0,s.jsx)(n.h2,{id:"log-rotation",children:"Log Rotation"}),"\n",(0,s.jsx)(n.p,{children:"The rotation of the log files can be configured with the following options."}),"\n",(0,s.jsx)(n.h3,{id:"maxsize",children:(0,s.jsx)(n.code,{children:"maxSize"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"maxSize"})," is the maximum size in megabytes of the log file before it gets rotated.\nIt defaults to 100 megabytes."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"log:\n  maxSize: 1\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[log]\n  maxSize = 1\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'tab="CLI"',children:"--log.maxsize=1\n"})}),"\n",(0,s.jsx)(n.h3,{id:"maxbackups",children:(0,s.jsx)(n.code,{children:"maxBackups"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"maxBackups"})," is the maximum number of old log files to retain.\nThe default is to retain all old log files (though ",(0,s.jsx)(n.code,{children:"maxAge"})," may still cause them to get deleted)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"log:\n  maxBackups: 3\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[log]\n  maxBackups = 3\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'tab="CLI"',children:"--log.maxbackups=3\n"})}),"\n",(0,s.jsx)(n.h3,{id:"maxage",children:(0,s.jsx)(n.code,{children:"maxAge"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"maxAge"})," is the maximum number of days to retain old log files based on the timestamp encoded in their filename.\nNote that a day is defined as 24 hours and may not exactly correspond to calendar days due to daylight savings, leap seconds, etc.\nThe default is not to remove old log files based on age."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"log:\n  maxAge: 3\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[log]\n  maxAge = 3\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'tab="CLI"',children:"--log.maxage=3\n"})}),"\n",(0,s.jsx)(n.h3,{id:"compress",children:(0,s.jsx)(n.code,{children:"compress"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"compress"})," determines if the rotated log files should be compressed using gzip.\nThe default is not to perform compression."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"log:\n  compress: true\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[log]\n  compress = true\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'tab="CLI"',children:"--log.compress=true\n"})}),"\n",(0,s.jsx)(n.h2,{id:"opentelemetry",children:"OpenTelemetry"}),"\n",(0,s.jsx)(n.p,{children:'!!! warning "Experimental Feature"'}),"\n",(0,s.jsx)(n.p,{children:"The OpenTelemetry logs feature is currently experimental and must be explicitly enabled in the experimental section prior to use."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"experimental:\n  otlpLogs: true\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[experimental.otlpLogs]\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'tab="CLI"',children:"--experimental.otlpLogs=true\n"})}),"\n",(0,s.jsx)(n.p,{children:"To enable the OpenTelemetry Logger for logs:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"log:\n  otlp: {}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[log.otlp]\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'tab="CLI"',children:"--log.otlp=true\n"})}),"\n",(0,s.jsx)(n.p,{children:'!!! info "Default protocol"'}),"\n",(0,s.jsxs)(n.p,{children:["The OpenTelemetry Logger exporter will export logs to the collector using HTTPS by default to ",(0,s.jsx)(n.a,{href:"https://localhost:4318/v1/logs",children:"https://localhost:4318/v1/logs"}),", see the ",(0,s.jsx)(n.a,{href:"#grpc-configuration",children:"gRPC Section"})," to use gRPC."]}),"\n",(0,s.jsx)(n.h3,{id:"http-configuration",children:"HTTP configuration"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Optional"})}),"\n",(0,s.jsx)(n.p,{children:"This instructs the exporter to send logs to the OpenTelemetry Collector using HTTP."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"log:\n  otlp:\n    http: {}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[log.otlp.http]\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'tab="CLI"',children:"--log.otlp.http=true\n"})}),"\n",(0,s.jsx)(n.h4,{id:"endpoint",children:(0,s.jsx)(n.code,{children:"endpoint"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:['Optional, Default="',(0,s.jsx)(n.code,{children:"https://localhost:4318/v1/logs"}),'", Format="',(0,s.jsx)(n.code,{children:"<scheme>://<host>:<port><path>"}),'"']})}),"\n",(0,s.jsx)(n.p,{children:"URL of the OpenTelemetry Collector to send logs to."}),"\n",(0,s.jsx)(n.p,{children:'!!! info "Insecure mode"'}),"\n",(0,s.jsxs)(n.p,{children:["To disable TLS, use ",(0,s.jsx)(n.code,{children:"http://"})," instead of ",(0,s.jsx)(n.code,{children:"https://"})," in the ",(0,s.jsx)(n.code,{children:"endpoint"})," configuration."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"log:\n  otlp:\n    http:\n      endpoint: https://collector:4318/v1/logs\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[log.otlp.http]\n  endpoint = "https://collector:4318/v1/logs"\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'tab="CLI"',children:"--log.otlp.http.endpoint=https://collector:4318/v1/logs\n"})}),"\n",(0,s.jsx)(n.h4,{id:"headers",children:(0,s.jsx)(n.code,{children:"headers"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Optional, Default="})}),"\n",(0,s.jsx)(n.p,{children:"Additional headers sent with logs by the exporter to the OpenTelemetry Collector."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"log:\n  otlp:\n    http:\n      headers:\n        foo: bar\n        baz: buz\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[log.otlp.http.headers]\n  foo = "bar"\n  baz = "buz"\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'tab="CLI"',children:"--log.otlp.http.headers.foo=bar --log.otlp.http.headers.baz=buz\n"})}),"\n",(0,s.jsx)(n.h4,{id:"tls",children:(0,s.jsx)(n.code,{children:"tls"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Optional"})}),"\n",(0,s.jsx)(n.p,{children:"Defines the Client TLS configuration used by the exporter to send logs to the OpenTelemetry Collector."}),"\n",(0,s.jsx)(n.h5,{id:"ca",children:(0,s.jsx)(n.code,{children:"ca"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Optional"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ca"})," is the path to the certificate authority used for the secure connection to the OpenTelemetry Collector,\nit defaults to the system bundle."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"log:\n  otlp:\n    http:\n      tls:\n        ca: path/to/ca.crt\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[log.otlp.http.tls]\n  ca = "path/to/ca.crt"\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'tab="CLI"',children:"--log.otlp.http.tls.ca=path/to/ca.crt\n"})}),"\n",(0,s.jsx)(n.h5,{id:"cert",children:(0,s.jsx)(n.code,{children:"cert"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Optional"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"cert"})," is the path to the public certificate used for the secure connection to the OpenTelemetry Collector.\nWhen using this option, setting the ",(0,s.jsx)(n.code,{children:"key"})," option is required."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"log:\n  otlp:\n    http:\n      tls:\n        cert: path/to/foo.cert\n        key: path/to/foo.key\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[log.otlp.http.tls]\n  cert = "path/to/foo.cert"\n  key = "path/to/foo.key"\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'tab="CLI"',children:"--log.otlp.http.tls.cert=path/to/foo.cert\n--log.otlp.http.tls.key=path/to/foo.key\n"})}),"\n",(0,s.jsx)(n.h5,{id:"key",children:(0,s.jsx)(n.code,{children:"key"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Optional"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"key"})," is the path to the private key used for the secure connection to the OpenTelemetry Collector.\nWhen using this option, setting the ",(0,s.jsx)(n.code,{children:"cert"})," option is required."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"log:\n  otlp:\n    http:\n      tls:\n        cert: path/to/foo.cert\n        key: path/to/foo.key\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[log.otlp.http.tls]\n  cert = "path/to/foo.cert"\n  key = "path/to/foo.key"\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'tab="CLI"',children:"--log.otlp.http.tls.cert=path/to/foo.cert\n--log.otlp.http.tls.key=path/to/foo.key\n"})}),"\n",(0,s.jsx)(n.h5,{id:"insecureskipverify",children:(0,s.jsx)(n.code,{children:"insecureSkipVerify"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Optional, Default=false"})}),"\n",(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)(n.code,{children:"insecureSkipVerify"})," is ",(0,s.jsx)(n.code,{children:"true"}),",\nthe TLS connection to the OpenTelemetry Collector accepts any certificate presented by the server regardless of the hostnames it covers."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"log:\n  otlp:\n    http:\n      tls:\n        insecureSkipVerify: true\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[log.otlp.http.tls]\n  insecureSkipVerify = true\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'tab="CLI"',children:"--log.otlp.http.tls.insecureSkipVerify=true\n"})}),"\n",(0,s.jsx)(n.h3,{id:"grpc-configuration",children:"gRPC configuration"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Optional"})}),"\n",(0,s.jsx)(n.p,{children:"This instructs the exporter to send logs to the OpenTelemetry Collector using gRPC."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"log:\n  otlp:\n    grpc: {}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[log.otlp.grpc]\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'tab="CLI"',children:"--log.otlp.grpc=true\n"})}),"\n",(0,s.jsx)(n.h4,{id:"endpoint-1",children:(0,s.jsx)(n.code,{children:"endpoint"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:['Required, Default="localhost:4317", Format="',(0,s.jsx)(n.code,{children:"<host>:<port>"}),'"']})}),"\n",(0,s.jsx)(n.p,{children:"Address of the OpenTelemetry Collector to send logs to."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"log:\n  otlp:\n    grpc:\n      endpoint: localhost:4317\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[log.otlp.grpc]\n  endpoint = "localhost:4317"\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'tab="CLI"',children:"--log.otlp.grpc.endpoint=localhost:4317\n"})}),"\n",(0,s.jsx)(n.h4,{id:"insecure",children:(0,s.jsx)(n.code,{children:"insecure"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Optional, Default=false"})}),"\n",(0,s.jsx)(n.p,{children:"Allows exporter to send logs to the OpenTelemetry Collector without using a secured protocol."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"log:\n  otlp:\n    grpc:\n      insecure: true\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[log.otlp.grpc]\n  insecure = true\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'tab="CLI"',children:"--log.otlp.grpc.insecure=true\n"})}),"\n",(0,s.jsx)(n.h4,{id:"headers-1",children:(0,s.jsx)(n.code,{children:"headers"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Optional, Default="})}),"\n",(0,s.jsx)(n.p,{children:"Additional headers sent with logs by the exporter to the OpenTelemetry Collector."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"log:\n  otlp:\n    grpc:\n      headers:\n        foo: bar\n        baz: buz\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[log.otlp.grpc.headers]\n  foo = "bar"\n  baz = "buz"\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'tab="CLI"',children:"--log.otlp.grpc.headers.foo=bar --log.otlp.grpc.headers.baz=buz\n"})}),"\n",(0,s.jsx)(n.h4,{id:"tls-1",children:(0,s.jsx)(n.code,{children:"tls"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Optional"})}),"\n",(0,s.jsx)(n.p,{children:"Defines the Client TLS configuration used by the exporter to send logs to the OpenTelemetry Collector."}),"\n",(0,s.jsx)(n.h5,{id:"ca-1",children:(0,s.jsx)(n.code,{children:"ca"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Optional"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ca"})," is the path to the certificate authority used for the secure connection to the OpenTelemetry Collector,\nit defaults to the system bundle."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"log:\n  otlp:\n    grpc:\n      tls:\n        ca: path/to/ca.crt\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[log.otlp.grpc.tls]\n  ca = "path/to/ca.crt"\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'tab="CLI"',children:"--log.otlp.grpc.tls.ca=path/to/ca.crt\n"})}),"\n",(0,s.jsx)(n.h5,{id:"cert-1",children:(0,s.jsx)(n.code,{children:"cert"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Optional"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"cert"})," is the path to the public certificate used for the secure connection to the OpenTelemetry Collector.\nWhen using this option, setting the ",(0,s.jsx)(n.code,{children:"key"})," option is required."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"log:\n  otlp:\n    grpc:\n      tls:\n        cert: path/to/foo.cert\n        key: path/to/foo.key\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[log.otlp.grpc.tls]\n  cert = "path/to/foo.cert"\n  key = "path/to/foo.key"\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'tab="CLI"',children:"--log.otlp.grpc.tls.cert=path/to/foo.cert\n--log.otlp.grpc.tls.key=path/to/foo.key\n"})}),"\n",(0,s.jsx)(n.h5,{id:"key-1",children:(0,s.jsx)(n.code,{children:"key"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Optional"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"key"})," is the path to the private key used for the secure connection to the OpenTelemetry Collector.\nWhen using this option, setting the ",(0,s.jsx)(n.code,{children:"cert"})," option is required."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"log:\n  otlp:\n    grpc:\n      tls:\n        cert: path/to/foo.cert\n        key: path/to/foo.key\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[log.otlp.grpc.tls]\n  cert = "path/to/foo.cert"\n  key = "path/to/foo.key"\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'tab="CLI"',children:"--log.otlp.grpc.tls.cert=path/to/foo.cert\n--log.otlp.grpc.tls.key=path/to/foo.key\n"})}),"\n",(0,s.jsx)(n.h5,{id:"insecureskipverify-1",children:(0,s.jsx)(n.code,{children:"insecureSkipVerify"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Optional, Default=false"})}),"\n",(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)(n.code,{children:"insecureSkipVerify"})," is ",(0,s.jsx)(n.code,{children:"true"}),",\nthe TLS connection to the OpenTelemetry Collector accepts any certificate presented by the server regardless of the hostnames it covers."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"log:\n  otlp:\n    grpc:\n      tls:\n        insecureSkipVerify: true\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[log.otlp.grpc.tls]\n  insecureSkipVerify = true\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'tab="CLI"',children:"--log.otlp.grpc.tls.insecureSkipVerify=true\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var l=t(6540);const s={},o=l.createContext(s);function a(e){const n=l.useContext(o);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),l.createElement(o.Provider,{value:n},e.children)}}}]);