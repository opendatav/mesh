"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[5205],{4860:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"reference/routing-configuration/kubernetes/crd/tcp/middlewaretcp","title":"Kubernetes MiddlewareTCP","description":"Learn how to configure a Mesh Proxy Kubernetes Middleware to reach TCP Services, which handle incoming requests. Read the technical documentation.","source":"@site/docs/reference/routing-configuration/kubernetes/crd/tcp/middlewaretcp.md","sourceDirName":"reference/routing-configuration/kubernetes/crd/tcp","slug":"/reference/routing-configuration/kubernetes/crd/tcp/middlewaretcp","permalink":"/doc/docs/reference/routing-configuration/kubernetes/crd/tcp/middlewaretcp","draft":false,"unlisted":false,"editUrl":"https://github.com/opendatav/mesh/tree/main/packages/create-docusaurus/templates/shared/docs/reference/routing-configuration/kubernetes/crd/tcp/middlewaretcp.md","tags":[],"version":"current","frontMatter":{"title":"Kubernetes MiddlewareTCP","description":"Learn how to configure a Mesh Proxy Kubernetes Middleware to reach TCP Services, which handle incoming requests. Read the technical documentation."},"sidebar":"tutorialSidebar","previous":{"title":"Kubernetes IngressRouteTCP","permalink":"/doc/docs/reference/routing-configuration/kubernetes/crd/tcp/ingressroutetcp"},"next":{"title":"ServersTransportTCP","permalink":"/doc/docs/reference/routing-configuration/kubernetes/crd/tcp/serverstransporttcp"}}');var o=r(4848),i=r(8453);const a={title:"Kubernetes MiddlewareTCP",description:"Learn how to configure a Mesh Proxy Kubernetes Middleware to reach TCP Services, which handle incoming requests. Read the technical documentation."},s=void 0,c={},d=[{value:"Configuration Example",id:"configuration-example",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"MiddlewareTCP"})," is the CRD implementation of a ",(0,o.jsx)(n.a,{href:"/doc/docs/reference/routing-configuration/tcp/middlewares/overview",children:"Mesh TCP middleware"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Before creating ",(0,o.jsx)(n.code,{children:"MiddlewareTCP"})," objects, you need to apply the ",(0,o.jsx)(n.a,{href:"https://doc.Mesh.io/Mesh/reference/dynamic-configuration/kubernetes-crd/#definitions",children:"Mesh Kubernetes CRDs"})," to your Kubernetes cluster."]}),"\n",(0,o.jsxs)(n.p,{children:["This registers the ",(0,o.jsx)(n.code,{children:"MiddlewareTCP"})," kind and other mesh-specific resources."]}),"\n",(0,o.jsxs)(n.p,{children:['!!! tip "Cross-provider namespace"\nAs Kubernetes also has its own notion of namespace, one should not confuse the kubernetes namespace of a resource (in the reference to the middleware) with the ',(0,o.jsx)(n.a,{href:"/doc/docs/reference/install-configuration/providers/overview#provider-namespace",children:"provider namespace"}),", when the definition of the middleware comes from another provider. In this context, specifying a namespace when referring to the resource does not make any sense, and will be ignored. Additionally, when you want to reference a Middleware from the CRD Provider, you have to append the namespace of the resource in the resource-name as Mesh appends the namespace internally automatically."]}),"\n",(0,o.jsx)(n.h2,{id:"configuration-example",children:"Configuration Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:'tab="MiddlewareTCP"',children:"apiVersion: Mesh.io/v1alpha1\nkind: MiddlewareTCP\nmetadata:\n  name: ipallowlist\nspec:\n  ipAllowList:\n    sourceRange:\n      - 127.0.0.1/32\n      - 192.168.1.7\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:'tab="IngressRouteTCP"',children:"apiVersion: Mesh.io/v1alpha1\nkind: IngressRouteTCP\nmetadata:\n  name: ingressroutebar\n\nspec:\n  entryPoints:\n    - web\n  routes:\n  - match: Host(`example.com`) && PathPrefix(`/allowlist`)\n    kind: Rule\n    services:\n    - name: whoami\n      port: 80\n    middlewares:\n    - name: ipallowlist\n      namespace: foo\n"})}),"\n",(0,o.jsxs)(n.p,{children:["More information about available TCP middlewares in the dedicated ",(0,o.jsx)(n.a,{href:"/doc/docs/reference/routing-configuration/tcp/middlewares/overview",children:"middlewares section"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>s});var t=r(6540);const o={},i=t.createContext(o);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);