"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[5287],{8453:(e,a,t)=>{t.d(a,{R:()=>l,x:()=>c});var n=t(6540);const r={},s=n.createContext(r);function l(e){const a=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function c(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),n.createElement(s.Provider,{value:a},e.children)}},9748:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>i,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"middlewares/http/replacepathregex","title":"Mesh ReplacePathRegex Documentation","description":"In Mesh Proxy\'s HTTP middleware, ReplacePathRegex updates paths before forwarding requests, using a regex. Read the technical documentation.","source":"@site/docs/middlewares/http/replacepathregex.md","sourceDirName":"middlewares/http","slug":"/middlewares/http/replacepathregex","permalink":"/doc/docs/middlewares/http/replacepathregex","draft":false,"unlisted":false,"editUrl":"https://github.com/opendatav/mesh/tree/main/packages/create-docusaurus/templates/shared/docs/middlewares/http/replacepathregex.md","tags":[],"version":"current","frontMatter":{"title":"Mesh ReplacePathRegex Documentation","description":"In Mesh Proxy\'s HTTP middleware, ReplacePathRegex updates paths before forwarding requests, using a regex. Read the technical documentation."},"sidebar":"tutorialSidebar","previous":{"title":"Mesh ReplacePath Documentation","permalink":"/doc/docs/middlewares/http/replacepath"},"next":{"title":"Mesh HTTP Retry Documentation","permalink":"/doc/docs/middlewares/http/retry"}}');var r=t(4848),s=t(8453);const l={title:"Mesh ReplacePathRegex Documentation",description:"In Mesh Proxy's HTTP middleware, ReplacePathRegex updates paths before forwarding requests, using a regex. Read the technical documentation."},c="ReplacePathRegex",i={},d=[{value:"Configuration Examples",id:"configuration-examples",level:2},{value:"Configuration Options",id:"configuration-options",level:2},{value:"General",id:"general",level:3},{value:"<code>regex</code>",id:"regex",level:3},{value:"<code>replacement</code>",id:"replacement",level:3}];function h(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.header,{children:(0,r.jsx)(a.h1,{id:"replacepathregex",children:"ReplacePathRegex"})}),"\n",(0,r.jsx)(a.p,{children:"Updating the Path Before Forwarding the Request (Using a Regex)"}),"\n",(0,r.jsx)(a.p,{children:"The ReplaceRegex replaces the path of a URL using regex matching and replacement."}),"\n",(0,r.jsx)(a.h2,{id:"configuration-examples",children:"Configuration Examples"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-yaml",metastring:'tab="Docker & Swarm"',children:'# Replace path with regex\nlabels:\n  - "Mesh.http.middlewares.test-replacepathregex.replacepathregex.regex=^/foo/(.*)"\n  - "Mesh.http.middlewares.test-replacepathregex.replacepathregex.replacement=/bar/$$1"\n'})}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-yaml",metastring:'tab="Kubernetes"',children:"# Replace path with regex\napiVersion: Mesh.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-replacepathregex\nspec:\n  replacePathRegex:\n    regex: ^/foo/(.*)\n    replacement: /bar/$1\n"})}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-yaml",metastring:'tab="Consul Catalog"',children:'# Replace path with regex\n- "Mesh.http.middlewares.test-replacepathregex.replacepathregex.regex=^/foo/(.*)"\n- "Mesh.http.middlewares.test-replacepathregex.replacepathregex.replacement=/bar/$1"\n'})}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:'# Replace path with regex\nhttp:\n  middlewares:\n    test-replacepathregex:\n      replacePathRegex:\n        regex: "^/foo/(.*)"\n        replacement: "/bar/$1"\n'})}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'# Replace path with regex\n[http.middlewares]\n  [http.middlewares.test-replacepathregex.replacePathRegex]\n    regex = "^/foo/(.*)"\n    replacement = "/bar/$1"\n'})}),"\n",(0,r.jsx)(a.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,r.jsx)(a.h3,{id:"general",children:"General"}),"\n",(0,r.jsx)(a.p,{children:"The ReplacePathRegex middleware will:"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:"replace the matching path with the specified one."}),"\n",(0,r.jsxs)(a.li,{children:["store the original path in a ",(0,r.jsx)(a.code,{children:"X-Replaced-Path"})," header."]}),"\n"]}),"\n",(0,r.jsx)(a.p,{children:"!!! tip"}),"\n",(0,r.jsxs)(a.p,{children:["Regular expressions and replacements can be tested using online tools such as ",(0,r.jsx)(a.a,{href:"https://play.golang.org/p/mWU9p-wk2ru",children:"Go Playground"})," or the ",(0,r.jsx)(a.a,{href:"https://regex101.com/r/58sIgx/2",children:"Regex101"}),"."]}),"\n",(0,r.jsxs)(a.p,{children:["When defining a regular expression within YAML, any escaped character needs to be escaped twice: ",(0,r.jsx)(a.code,{children:"example\\.com"})," needs to be written as ",(0,r.jsx)(a.code,{children:"example\\\\.com"}),"."]}),"\n",(0,r.jsx)(a.h3,{id:"regex",children:(0,r.jsx)(a.code,{children:"regex"})}),"\n",(0,r.jsxs)(a.p,{children:["The ",(0,r.jsx)(a.code,{children:"regex"})," option is the regular expression to match and capture the path from the request URL."]}),"\n",(0,r.jsx)(a.h3,{id:"replacement",children:(0,r.jsx)(a.code,{children:"replacement"})}),"\n",(0,r.jsxs)(a.p,{children:["The ",(0,r.jsx)(a.code,{children:"replacement"})," option defines the replacement path format, which can include captured variables."]}),"\n",(0,r.jsx)(a.p,{children:"!!! warning"}),"\n",(0,r.jsxs)(a.p,{children:["Care should be taken when defining replacement expand variables: ",(0,r.jsx)(a.code,{children:"$1x"})," is equivalent to ",(0,r.jsx)(a.code,{children:"${1x}"}),", not ",(0,r.jsx)(a.code,{children:"${1}x"})," (see ",(0,r.jsx)(a.a,{href:"https://golang.org/pkg/regexp/#Regexp.Expand",children:"Regexp.Expand"}),"), so use ",(0,r.jsx)(a.code,{children:"${1}"})," syntax."]})]})}function p(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);