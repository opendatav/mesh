"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[9219],{2697:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"reference/routing-configuration/http/middlewares/chain","title":"Mesh Chain Middleware Documentation","description":"The HTTP chain middleware lets you define reusable combinations of other middleware, to reuse the same groups. Read the technical documentation.","source":"@site/docs/reference/routing-configuration/http/middlewares/chain.md","sourceDirName":"reference/routing-configuration/http/middlewares","slug":"/reference/routing-configuration/http/middlewares/chain","permalink":"/doc/docs/reference/routing-configuration/http/middlewares/chain","draft":false,"unlisted":false,"editUrl":"https://github.com/opendatav/mesh/tree/main/packages/create-docusaurus/templates/shared/docs/reference/routing-configuration/http/middlewares/chain.md","tags":[],"version":"current","frontMatter":{"title":"Mesh Chain Middleware Documentation","description":"The HTTP chain middleware lets you define reusable combinations of other middleware, to reuse the same groups. Read the technical documentation."},"sidebar":"tutorialSidebar","previous":{"title":"Mesh Buffering Documentation","permalink":"/doc/docs/reference/routing-configuration/http/middlewares/buffering"},"next":{"title":"Mesh CircuitBreaker Documentation","permalink":"/doc/docs/reference/routing-configuration/http/middlewares/circuitbreaker"}}');var r=t(4848),i=t(8453);const a={title:"Mesh Chain Middleware Documentation",description:"The HTTP chain middleware lets you define reusable combinations of other middleware, to reuse the same groups. Read the technical documentation."},o=void 0,d={},c=[{value:"Configuration Example",id:"configuration-example",level:2},{value:"Configuration Options",id:"configuration-options",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"chain"})," middleware enables you to define reusable combinations of other pieces of middleware.\nIt makes it effortless to reuse the same groups."]}),"\n",(0,r.jsx)(n.h2,{id:"configuration-example",children:"Configuration Example"}),"\n",(0,r.jsxs)(n.p,{children:["Below is an example of a Chain containing ",(0,r.jsx)(n.code,{children:"AllowList"}),", ",(0,r.jsx)(n.code,{children:"BasicAuth"}),", and ",(0,r.jsx)(n.code,{children:"RedirectScheme"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'tab="Structured (YAML)"',children:'# ...\nhttp:\n  routers:\n    router1:\n      service: service1\n      middlewares:\n        - secured\n      rule: "Host(`mydomain`)"\n\n  middlewares:\n    secured:\n      chain:\n        middlewares:\n          - https-only\n          - known-ips\n          - auth-users\n\n    auth-users:\n      basicAuth:\n        users:\n          - "test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/"\n\n    https-only:\n      redirectScheme:\n        scheme: https\n\n    known-ips:\n      ipAllowList:\n        sourceRange:\n          - "192.168.1.7"\n          - "127.0.0.1/32"\n\n  services:\n    service1:\n      loadBalancer:\n        servers:\n          - url: "http://127.0.0.1:80"\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",metastring:'tab="Structured (TOML)"',children:'# ...\n[http.routers]\n  [http.routers.router1]\n    service = "service1"\n    middlewares = ["secured"]\n    rule = "Host(`mydomain`)"\n\n[http.middlewares]\n  [http.middlewares.secured.chain]\n    middlewares = ["https-only", "known-ips", "auth-users"]\n\n  [http.middlewares.auth-users.basicAuth]\n    users = ["test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/"]\n\n  [http.middlewares.https-only.redirectScheme]\n    scheme = "https"\n\n  [http.middlewares.known-ips.ipAllowList]\n    sourceRange = ["192.168.1.7", "127.0.0.1/32"]\n\n[http.services]\n  [http.services.service1]\n    [http.services.service1.loadBalancer]\n      [[http.services.service1.loadBalancer.servers]]\n        url = "http://127.0.0.1:80"\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'tab="Labels"',children:'labels:\n  - "Mesh.http.routers.router1.service=service1"\n  - "Mesh.http.routers.router1.middlewares=secured"\n  - "Mesh.http.routers.router1.rule=Host(`mydomain`)"\n  - "Mesh.http.middlewares.secured.chain.middlewares=https-only,known-ips,auth-users"\n  - "Mesh.http.middlewares.auth-users.basicauth.users=test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/"\n  - "Mesh.http.middlewares.https-only.redirectscheme.scheme=https"\n  - "Mesh.http.middlewares.known-ips.ipallowlist.sourceRange=192.168.1.7,127.0.0.1/32"\n  - "Mesh.http.services.service1.loadbalancer.server.port=80"\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'tab="Tags"',children:'{\n  // ...\n  "Tags": [\n    "Mesh.http.routers.router1.service=service1",\n    "Mesh.http.routers.router1.middlewares=secured",\n    "Mesh.http.routers.router1.rule=Host(`mydomain`)",\n    "Mesh.http.middlewares.secured.chain.middlewares=https-only,known-ips,auth-users",\n    "Mesh.http.middlewares.auth-users.basicauth.users=test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/",\n    "Mesh.http.middlewares.https-only.redirectscheme.scheme=https",\n    "Mesh.http.middlewares.known-ips.ipallowlist.sourceRange=192.168.1.7,127.0.0.1/32",\n    "Mesh.http.services.service1.loadbalancer.server.port=80"\n  ]\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'tab="Kubernetes"',children:"apiVersion: Mesh.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: test\n  namespace: default\nspec:\n  entryPoints:\n    - web\n  routes:\n    - match: Host(`mydomain`)\n      kind: Rule\n      services:\n        - name: whoami\n          port: 80\n      middlewares:\n        - name: secured\n---\napiVersion: Mesh.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: secured\nspec:\n  chain:\n    middlewares:\n    - name: https-only\n    - name: known-ips\n    - name: auth-users\n---\napiVersion: Mesh.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: auth-users\nspec:\n  basicAuth:\n    users:\n    - test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\n---\napiVersion: Mesh.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: https-only\nspec:\n  redirectScheme:\n    scheme: https\n---\napiVersion: Mesh.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: known-ips\nspec:\n  ipAllowList:\n    sourceRange:\n    - 192.168.1.7\n    - 127.0.0.1/32\n"})}),"\n",(0,r.jsx)(n.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"Field"}),(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"Description"}),(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"Default"}),(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"Required"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"middlewares"})}),(0,r.jsxs)(n.td,{style:{textAlign:"left"},children:["List of middlewares to chain.",(0,r.jsx)("br",{})," The middlewares have to be in the same namespace as the ",(0,r.jsx)(n.code,{children:"chain"})," middleware."]}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"[]"}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"Yes"})]})})]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(6540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);