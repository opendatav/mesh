"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[784],{5622:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"contributing/building-testing","title":"Mesh Building & Testing Documentation","description":"Compile and test your own Mesh Proxy! Learn how to build your own Mesh binary from the sources, and read the technical documentation.","source":"@site/docs/contributing/building-testing.md","sourceDirName":"contributing","slug":"/contributing/building-testing","permalink":"/doc/docs/contributing/building-testing","draft":false,"unlisted":false,"editUrl":"https://github.com/opendatav/mesh/tree/main/packages/create-docusaurus/templates/shared/docs/contributing/building-testing.md","tags":[],"version":"current","frontMatter":{"title":"Mesh Building & Testing Documentation","description":"Compile and test your own Mesh Proxy! Learn how to build your own Mesh binary from the sources, and read the technical documentation."},"sidebar":"tutorialSidebar","previous":{"title":"Mesh Advocation Documentation","permalink":"/doc/docs/contributing/advocating"},"next":{"title":"Mesh Data Collection Documentation","permalink":"/doc/docs/contributing/data-collection"}}');var s=t(4848),o=t(8453);const r={title:"Mesh Building & Testing Documentation",description:"Compile and test your own Mesh Proxy! Learn how to build your own Mesh binary from the sources, and read the technical documentation."},c="Building and Testing",d={},l=[{value:"Building",id:"building",level:2},{value:"Build Mesh",id:"build-mesh",level:3},{value:"Testing",id:"testing",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"building-and-testing",children:"Building and Testing"})}),"\n",(0,s.jsx)(n.p,{children:"Compile and Test Your Own Mesh!"}),"\n",(0,s.jsx)(n.p,{children:"You want to build your own Mesh binary from the sources?\nLet's see how."}),"\n",(0,s.jsx)(n.h2,{id:"building",children:"Building"}),"\n",(0,s.jsx)(n.p,{children:"You need:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/docker/docker",title:"Link to website of Docker",children:"Docker"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"make"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://go.dev/",title:"Link to website of Go",children:"Go"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/golangci/misspell",children:"misspell"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/koalaman/shellcheck",children:"shellcheck"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://tailscale.com/",children:"Tailscale"})," if you are using Docker Desktop"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:'!!! tip "Source Directory"'}),"\n",(0,s.jsxs)(n.p,{children:["It is recommended that you clone Mesh into the ",(0,s.jsx)(n.code,{children:"~/go/src/github.com/Mesh/Mesh"})," directory.\nThis is the official golang workspace hierarchy that will allow dependencies to be properly resolved."]}),"\n",(0,s.jsx)(n.p,{children:'!!! note "Environment"'}),"\n",(0,s.jsxs)(n.p,{children:["Set your ",(0,s.jsx)(n.code,{children:"GOPATH"})," and ",(0,s.jsx)(n.code,{children:"PATH"})," variable to be set to ",(0,s.jsx)(n.code,{children:"~/go"})," via:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"export GOPATH=~/go\nexport PATH=$PATH:$GOPATH/bin\n"})}),"\n",(0,s.jsxs)(n.p,{children:["For convenience, add ",(0,s.jsx)(n.code,{children:"GOPATH"})," and ",(0,s.jsx)(n.code,{children:"PATH"})," to your ",(0,s.jsx)(n.code,{children:".bashrc"})," or ",(0,s.jsx)(n.code,{children:".bash_profile"})]}),"\n",(0,s.jsxs)(n.p,{children:["Verify your environment is setup properly by running ",(0,s.jsx)(n.code,{children:"$ go env"}),".\nDepending on your OS and environment, you should see an output similar to:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'GOARCH="amd64"\nGOBIN=""\nGOEXE=""\nGOHOSTARCH="amd64"\nGOHOSTOS="linux"\nGOOS="linux"\nGOPATH="/home/<yourusername>/go"\nGORACE=""\n## ... and the list goes on\n'})}),"\n",(0,s.jsx)(n.h3,{id:"build-mesh",children:"Build Mesh"}),"\n",(0,s.jsx)(n.p,{children:"Once you've set up your go environment and cloned the source repository, you can build Mesh."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'$ make binary\nSHA: 8fddfe118288bb5280eb5e77fa952f52def360b4 cheddar 2024-01-11_03:14:57PM\nCGO_ENABLED=0 GOGC=off GOOS=darwin GOARCH=arm64 go build  -ldflags "-s -w \\\n    -X github.com/Mesh/Mesh/v2/pkg/version.Version=8fddfe118288bb5280eb5e77fa952f52def360b4 \\\n    -X github.com/Mesh/Mesh/v2/pkg/version.Codename=cheddar \\\n    -X github.com/Mesh/Mesh/v2/pkg/version.BuildDate=2024-01-11_03:14:57PM" \\\n    -installsuffix nocgo -o "./dist/darwin/arm64/Mesh" ./cmd/Mesh\n\n$ ls dist/\nMesh*\n'})}),"\n",(0,s.jsxs)(n.p,{children:["You will find the Mesh executable (",(0,s.jsx)(n.code,{children:"Mesh"}),") in the ",(0,s.jsx)(n.code,{children:"./dist"})," directory."]}),"\n",(0,s.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,s.jsxs)(n.p,{children:["Run unit tests using the ",(0,s.jsx)(n.code,{children:"test-unit"})," target.\nRun integration tests using the ",(0,s.jsx)(n.code,{children:"test-integration"})," target.\nRun all tests (unit and integration) using the ",(0,s.jsx)(n.code,{children:"test"})," target."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'$ make test-unit\nGOOS=darwin GOARCH=arm64 go test -cover "-coverprofile=cover.out" -v ./pkg/... ./cmd/...\n+ go test -cover -coverprofile=cover.out .\nok      github.com/Mesh/Mesh   0.005s  coverage: 4.1% of statements\n\nTest success\n'})}),"\n",(0,s.jsxs)(n.p,{children:["For development purposes, you can specify which tests to run by using (only works the ",(0,s.jsx)(n.code,{children:"test-integration"})," target):"]}),"\n",(0,s.jsx)(n.p,{children:'??? note "Configuring Tailscale for Docker Desktop user"'}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"tailscale.secret"})," file in ",(0,s.jsx)(n.code,{children:"integration"})," directory."]}),"\n",(0,s.jsxs)(n.p,{children:["This file needs to contain a ",(0,s.jsx)(n.a,{href:"https://tailscale.com/kb/1085/auth-keys",children:"Tailscale auth key"}),"\n(an ephemeral, but reusable, one is recommended)."]}),"\n",(0,s.jsx)(n.p,{children:"Add this section to your tailscale ACLs to auto-approve the routes for the\ncontainers in the docker subnet:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'    "autoApprovers": {\n      // Allow myself to automatically\n      // advertize routes for docker networks\n      "routes": {\n        "172.31.42.0/24": ["your_tailscale_identity"],\n      },\n    },\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Run every tests in the MyTest suite\nTESTFLAGS="-test.run TestAccessLogSuite" make test-integration\n\n# Run the test "MyTest" in the MyTest suite\nTESTFLAGS="-test.run TestAccessLogSuite -testify.m ^TestAccessLog$" make test-integration\n'})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var i=t(6540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);