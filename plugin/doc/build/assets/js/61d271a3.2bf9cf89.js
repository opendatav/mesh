"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[1282],{8453:(e,t,i)=>{i.d(t,{R:()=>o,x:()=>l});var n=i(6540);const r={},s=n.createContext(r);function o(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(s.Provider,{value:t},e.children)}},8489:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"reference/install-configuration/providers/others/file","title":"Mesh File Documentation","description":"The file provider in Mesh Proxy lets you define the dynamic configuration in a YAML or TOML file. Read the technical documentation.","source":"@site/docs/reference/install-configuration/providers/others/file.md","sourceDirName":"reference/install-configuration/providers/others","slug":"/reference/install-configuration/providers/others/file","permalink":"/doc/docs/reference/install-configuration/providers/others/file","draft":false,"unlisted":false,"editUrl":"https://github.com/opendatav/mesh/tree/main/packages/create-docusaurus/templates/shared/docs/reference/install-configuration/providers/others/file.md","tags":[],"version":"current","frontMatter":{"title":"Mesh File Documentation","description":"The file provider in Mesh Proxy lets you define the dynamic configuration in a YAML or TOML file. Read the technical documentation."},"sidebar":"tutorialSidebar","previous":{"title":"Mesh AWS ECS Documentation","permalink":"/doc/docs/reference/install-configuration/providers/others/ecs"},"next":{"title":"Mesh HTTP Documentation","permalink":"/doc/docs/reference/install-configuration/providers/others/http"}}');var r=i(4848),s=i(8453);const o={title:"Mesh File Documentation",description:"The file provider in Mesh Proxy lets you define the dynamic configuration in a YAML or TOML file. Read the technical documentation."},l="File",d={},c=[{value:"Configuration Example",id:"configuration-example",level:2},{value:"Configuration Options",id:"configuration-options",level:2}];function a(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"file",children:"File"})}),"\n",(0,r.jsxs)(t.p,{children:["The file provider lets you define the ",(0,r.jsx)(t.a,{href:"/doc/docs/reference/install-configuration/providers/overview",children:"install configuration"})," in a YAML or TOML file."]}),"\n",(0,r.jsx)(t.p,{children:"It supports providing configuration through a single configuration file or multiple separate files."}),"\n",(0,r.jsx)(t.p,{children:"!!! info"}),"\n",(0,r.jsx)(t.p,{children:"The file provider is the default format used throughout the documentation to show samples of the configuration for many features."}),"\n",(0,r.jsx)(t.p,{children:"!!! tip"}),"\n",(0,r.jsx)(t.p,{children:"The file provider can be a good solution for reusing common elements from other providers (e.g. declaring allowlist middlewares, basic authentication, ...)"}),"\n",(0,r.jsx)(t.h2,{id:"configuration-example",children:"Configuration Example"}),"\n",(0,r.jsx)(t.p,{children:"You can enable the file provider as detailed below:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:'providers:\n  file:\n    directory: "/path/to/dynamic/conf"\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[providers.file]\n  directory = "/path/to/dynamic/conf"\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'tab="CLI"',children:"--providers.file.directory=/path/to/dynamic/conf\n"})}),"\n",(0,r.jsx)(t.p,{children:"Declaring the Routers, Middlewares & Services:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",metastring:'tab="YAML"',children:"http:\n  # Add the router\n  routers:\n    router0:\n      entryPoints:\n      - web\n      middlewares:\n      - my-basic-auth\n      service: service-foo\n      rule: Path(`/foo`)\n\n  # Add the middleware\n  middlewares:\n    my-basic-auth:\n      basicAuth:\n        users:\n        - test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\n        - test2:$apr1$d9hr9HBB$4HxwgUir3HP4EsggP/QNo0\n        usersFile: etc/Mesh/.htpasswd\n\n  # Add the service\n  services:\n    service-foo:\n      loadBalancer:\n        servers:\n        - url: http://foo/\n        - url: http://bar/\n        passHostHeader: false\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-toml",metastring:'tab="TOML"',children:'[http]\n  # Add the router\n  [http.routers]\n    [http.routers.router0]\n      entryPoints = ["web"]\n      middlewares = ["my-basic-auth"]\n      service = "service-foo"\n      rule = "Path(`/foo`)"\n\n  # Add the middleware\n  [http.middlewares]\n    [http.middlewares.my-basic-auth.basicAuth]\n      users = ["test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/",\n                "test2:$apr1$d9hr9HBB$4HxwgUir3HP4EsggP/QNo0"]\n      usersFile = "etc/Mesh/.htpasswd"\n\n  # Add the service\n  [http.services]\n    [http.services.service-foo]\n      [http.services.service-foo.loadBalancer]\n        [[http.services.service-foo.loadBalancer.servers]]\n          url = "http://foo/"\n        [[http.services.service-foo.loadBalancer.servers]]\n          url = "http://bar/"\n'})}),"\n",(0,r.jsx)(t.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Field"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Description"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Default"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Required"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"providers.providersThrottleDuration"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:["Minimum amount of time to wait for, after a configuration reload, before taking into account any new configuration refresh event.",(0,r.jsx)("br",{}),"If multiple events occur within this time, only the most recent one is taken into account, and all others are discarded.",(0,r.jsx)("br",{}),(0,r.jsx)(t.strong,{children:"This option cannot be set per provider, but the throttling algorithm applies to each of them independently."})]}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"2s"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"No"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"providers.file.filename"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Defines the path to the configuration file."}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:'""'}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Yes"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"providers.file.directory"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:["Defines the path to the directory that contains the configuration files. The ",(0,r.jsx)(t.code,{children:"filename"})," and ",(0,r.jsx)(t.code,{children:"directory"})," options are mutually exclusive. It is recommended to use ",(0,r.jsx)(t.code,{children:"directory"}),"."]}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:'""'}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Yes"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"providers.file.watch"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:["Set the ",(0,r.jsx)(t.code,{children:"watch"})," option to ",(0,r.jsx)(t.code,{children:"true"})," to allow Mesh to automatically watch for file changes. It works with both the ",(0,r.jsx)(t.code,{children:"filename"})," and the ",(0,r.jsx)(t.code,{children:"directory"})," options."]}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"true"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"No"})]})]})]}),"\n",(0,r.jsx)(t.p,{children:'!!! warning "Limitations"'}),"\n",(0,r.jsx)(t.p,{children:"With the file provider, Mesh listens for file system notifications to update the dynamic configuration."}),"\n",(0,r.jsx)(t.p,{children:"If you use a mounted/bound file system in your orchestrator (like docker or kubernetes), the way the files are linked may be a source of errors.\nIf the link between the file systems is broken, when a source file/directory is changed/renamed, nothing will be reported to the linked file/directory, so the file system notifications will be neither triggered nor caught."}),"\n",(0,r.jsx)(t.p,{children:"For example, in Docker, if the host file is renamed, the link to the mounted file is broken and the container's file is no longer updated.\nTo avoid this kind of issue, it is recommended to:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["set the Mesh ",(0,r.jsx)(t.a,{href:"#directory",children:(0,r.jsx)(t.strong,{children:"directory"})})," configuration with the parent directory"]}),"\n",(0,r.jsx)(t.li,{children:"mount/bind the parent directory"}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["As it is very difficult to listen to all file system notifications, Mesh uses ",(0,r.jsx)(t.a,{href:"https://github.com/fsnotify/fsnotify",children:"fsnotify"}),".\nIf using a directory with a mounted directory does not fix your issue, please check your file system compatibility with fsnotify."]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);