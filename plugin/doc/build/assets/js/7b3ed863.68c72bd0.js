"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[6685],{1545:(e,t,s)=>{s.d(t,{A:()=>r});const r=s.p+"assets/images/mesh-concepts-2-21a614b2979191de30725d1879f2893b.png"},3876:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>l,frontMatter:()=>o,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"getting-started/concepts","title":"Concepts","description":"Mesh - base concepts and main features","source":"@site/docs/getting-started/concepts.md","sourceDirName":"getting-started","slug":"/getting-started/concepts","permalink":"/doc/docs/getting-started/concepts","draft":false,"unlisted":false,"editUrl":"https://github.com/opendatav/mesh/tree/main/packages/create-docusaurus/templates/shared/docs/getting-started/concepts.md","tags":[],"version":"current","frontMatter":{"title":"Concepts","description":"Mesh - base concepts and main features"},"sidebar":"tutorialSidebar","previous":{"title":"\u5f00\u59cb\u4f7f\u7528","permalink":"/doc/docs/category/\u5f00\u59cb\u4f7f\u7528"},"next":{"title":"Mesh Configuration Documentation","permalink":"/doc/docs/getting-started/configuration-overview"}}');var n=s(4848),i=s(8453);const o={title:"Concepts",description:"Mesh - base concepts and main features"},c="Concepts",d={},a=[{value:"Introduction",id:"introduction",level:2},{value:"Edge Router",id:"edge-router",level:2},{value:"Auto Service Discovery",id:"auto-service-discovery",level:2}];function h(e){const t={a:"a",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"concepts",children:"Concepts"})}),"\n",(0,n.jsx)(t.p,{children:"This page explains the base concepts of Mesh."}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,n.jsx)(t.p,{children:"Mesh is based on the concept of EntryPoints, Routers, Middlewares and Services."}),"\n",(0,n.jsx)(t.p,{children:"The main features include dynamic configuration, automatic service discovery, and support for multiple backends and protocols."}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"/doc/docs/routing/entrypoints",title:"Link to docs about EntryPoints",children:"EntryPoints"}),": EntryPoints are the network entry points into Mesh. They define the port which will receive the packets, and whether to listen for TCP or UDP."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"/doc/docs/routing/routers/",title:"Link to docs about routers",children:"Routers"}),": A router is in charge of connecting incoming requests to the services that can handle them."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"/doc/docs/middlewares/overview",title:"Link to docs about middlewares",children:"Middlewares"}),": Attached to the routers, middlewares can modify the requests or responses before they are sent to your service"]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"/doc/docs/routing/services/",title:"Link to docs about services",children:"Services"}),": Services are responsible for configuring how to reach the actual services that will eventually handle the incoming requests."]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"edge-router",children:"Edge Router"}),"\n",(0,n.jsxs)(t.p,{children:["Mesh is an ",(0,n.jsx)(t.em,{children:"Edge Router"}),"; this means that it's the door to your platform, and that it intercepts and routes every incoming request:\nit knows all the logic and every ",(0,n.jsx)(t.a,{href:"/doc/docs/routing/routers/#rule",title:"Link to docs about routing rules",children:"rule"})," that determine which services handle which requests (based on the ",(0,n.jsx)(t.em,{children:"path"}),", the ",(0,n.jsx)(t.em,{children:"host"}),", ",(0,n.jsx)(t.em,{children:"headers"}),", etc.)."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"The Door to Your Infrastructure",src:s(5458).A+"",title:"Picture explaining the infrastructure",width:"959",height:"622"})}),"\n",(0,n.jsx)(t.h2,{id:"auto-service-discovery",children:"Auto Service Discovery"}),"\n",(0,n.jsx)(t.p,{children:"Where traditionally edge routers (or reverse proxies) need a configuration file that contains every possible route to your services, Mesh gets them from the services themselves."}),"\n",(0,n.jsx)(t.p,{children:"Deploying your services, you attach information that tells Mesh the characteristics of the requests the services can handle."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Decentralized Configuration",src:s(1545).A+"",title:"Picture about Decentralized Configuration",width:"906",height:"587"})}),"\n",(0,n.jsx)(t.p,{children:"This means that when a service is deployed, Mesh detects it immediately and updates the routing rules in real time.\nSimilarly, when a service is removed from the infrastructure, the corresponding route is deleted accordingly."}),"\n",(0,n.jsx)(t.p,{children:"You no longer need to create and synchronize configuration files cluttered with IP addresses or other rules."}),"\n",(0,n.jsx)(t.p,{children:'!!! info "Many different rules"'}),"\n",(0,n.jsxs)(t.p,{children:["In the example above, we used the request ",(0,n.jsx)(t.a,{href:"/doc/docs/routing/routers/#rule",title:"Link to docs about routing rules",children:"path rule"})," to determine which service was in charge.\nCertainly, you can use many other different ",(0,n.jsx)(t.a,{href:"/doc/docs/routing/routers/#rule",title:"Link to docs about routing rules",children:"rules"}),"."]}),"\n",(0,n.jsx)(t.p,{children:'!!! info "Updating the requests"'}),"\n",(0,n.jsxs)(t.p,{children:["In the ",(0,n.jsx)(t.a,{href:"/doc/docs/middlewares/overview",title:"Link to middleware documentation",children:"middleware"})," section, you can learn about how to update the requests before forwarding them to the services."]}),"\n",(0,n.jsx)(t.p,{children:'!!! question "How does Mesh discover the services?"'}),"\n",(0,n.jsxs)(t.p,{children:["Mesh is able to use your cluster API to discover the services and read the attached information.\nIn Mesh, these connectors are called ",(0,n.jsx)(t.a,{href:"/doc/docs/providers/overview",title:"Link to overview about Mesh providers",children:"providers"})," because they ",(0,n.jsx)(t.em,{children:"provide"})," the configuration to Mesh."]})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},5458:(e,t,s)=>{s.d(t,{A:()=>r});const r=s.p+"assets/images/mesh-concepts-1-8f4211bcebb1f9dce57fb05927780d8b.png"},8453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>c});var r=s(6540);const n={},i=r.createContext(n);function o(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);