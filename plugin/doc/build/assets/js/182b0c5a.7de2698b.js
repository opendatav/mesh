"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[7189],{3558:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"observability/access-logs","title":"Mesh Access Logs Documentation","description":"Access logs are a key part of observability in Mesh Proxy. Read the technical documentation to learn their configurations, rotations, and time zones.","source":"@site/docs/observability/access-logs.md","sourceDirName":"observability","slug":"/observability/access-logs","permalink":"/doc/docs/observability/access-logs","draft":false,"unlisted":false,"editUrl":"https://github.com/opendatav/mesh/tree/main/packages/create-docusaurus/templates/shared/docs/observability/access-logs.md","tags":[],"version":"current","frontMatter":{"title":"Mesh Access Logs Documentation","description":"Access logs are a key part of observability in Mesh Proxy. Read the technical documentation to learn their configurations, rotations, and time zones."},"sidebar":"tutorialSidebar","previous":{"title":"Mesh Proxy TCP Middleware Overview","permalink":"/doc/docs/middlewares/tcp/overview"},"next":{"title":"Mesh Logs Documentation","permalink":"/doc/docs/observability/logs"}}');var c=n(4848),l=n(8453);const r={title:"Mesh Access Logs Documentation",description:"Access logs are a key part of observability in Mesh Proxy. Read the technical documentation to learn their configurations, rotations, and time zones."},i="Access Logs",o={},a=[{value:"Configuration",id:"configuration",level:2},{value:"<code>addInternals</code>",id:"addinternals",level:3},{value:"<code>filePath</code>",id:"filepath",level:3},{value:"<code>format</code>",id:"format",level:3},{value:"<code>bufferingSize</code>",id:"bufferingsize",level:3},{value:"Filtering",id:"filtering",level:3},{value:"Limiting the Fields/Including Headers",id:"limiting-the-fieldsincluding-headers",level:3},{value:"Log Rotation",id:"log-rotation",level:2},{value:"Time Zones",id:"time-zones",level:2},{value:"OpenTelemetry",id:"opentelemetry",level:2},{value:"HTTP configuration",id:"http-configuration",level:3},{value:"<code>endpoint</code>",id:"endpoint",level:4},{value:"<code>headers</code>",id:"headers",level:4},{value:"<code>tls</code>",id:"tls",level:4},{value:"<code>ca</code>",id:"ca",level:5},{value:"<code>cert</code>",id:"cert",level:5},{value:"<code>key</code>",id:"key",level:5},{value:"<code>insecureSkipVerify</code>",id:"insecureskipverify",level:5},{value:"gRPC configuration",id:"grpc-configuration",level:3},{value:"<code>endpoint</code>",id:"endpoint-1",level:4},{value:"<code>insecure</code>",id:"insecure",level:4},{value:"<code>headers</code>",id:"headers-1",level:4},{value:"<code>tls</code>",id:"tls-1",level:4},{value:"<code>ca</code>",id:"ca-1",level:5},{value:"<code>cert</code>",id:"cert-1",level:5},{value:"<code>key</code>",id:"key-1",level:5},{value:"<code>insecureSkipVerify</code>",id:"insecureskipverify-1",level:5}];function d(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(s.header,{children:(0,c.jsx)(s.h1,{id:"access-logs",children:"Access Logs"})}),"\n",(0,c.jsx)(s.p,{children:"Who Calls Whom?"}),"\n",(0,c.jsx)(s.p,{children:"By default, logs are written to stdout, in text format."}),"\n",(0,c.jsx)(s.h2,{id:"configuration",children:"Configuration"}),"\n",(0,c.jsx)(s.p,{children:"To enable the access logs:"}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"accessLog: {}\n"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[accessLog]\n"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-bash",metastring:'tab="CLI"',children:"--accesslog=true\n"})}),"\n",(0,c.jsx)(s.h3,{id:"addinternals",children:(0,c.jsx)(s.code,{children:"addInternals"})}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.em,{children:'Optional, Default="false"'})}),"\n",(0,c.jsxs)(s.p,{children:["Enables access logs for internal resources (e.g.: ",(0,c.jsx)(s.code,{children:"ping@internal"}),")."]}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"accesslog:\n  addInternals: true\n"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[accesslog]\n  addInternals = true\n"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-bash",metastring:'tab="CLI"',children:"--accesslog.addinternals\n"})}),"\n",(0,c.jsx)(s.h3,{id:"filepath",children:(0,c.jsx)(s.code,{children:"filePath"})}),"\n",(0,c.jsxs)(s.p,{children:["By default access logs are written to the standard output.\nTo write the logs into a log file, use the ",(0,c.jsx)(s.code,{children:"filePath"})," option."]}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:'accessLog:\n  filePath: "/path/to/access.log"\n'})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[accessLog]\n  filePath = "/path/to/access.log"\n'})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-bash",metastring:'tab="CLI"',children:"--accesslog.filepath=/path/to/access.log\n"})}),"\n",(0,c.jsx)(s.h3,{id:"format",children:(0,c.jsx)(s.code,{children:"format"})}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.em,{children:'Optional, Default="common"'})}),"\n",(0,c.jsxs)(s.p,{children:["By default, logs are written using the Common Log Format (CLF).\nTo write logs in JSON, use ",(0,c.jsx)(s.code,{children:"json"})," in the ",(0,c.jsx)(s.code,{children:"format"})," option.\nIf the given format is unsupported, the default (CLF) is used instead."]}),"\n",(0,c.jsx)(s.p,{children:'!!! info "Common Log Format"'}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-html",children:'<remote_IP_address> - <client_user_name_if_available> [<timestamp>] "<request_method> <request_path> <request_protocol>" <HTTP_status> <content-length> "<request_referrer>" "<request_user_agent>" <number_of_requests_received_since_Mesh_started> "<Mesh_router_name>" "<Mesh_server_URL>" <request_duration_in_ms>ms\n'})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:'accessLog:\n  format: "json"\n'})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[accessLog]\n  format = "json"\n'})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-bash",metastring:'tab="CLI"',children:"--accesslog.format=json\n"})}),"\n",(0,c.jsx)(s.h3,{id:"bufferingsize",children:(0,c.jsx)(s.code,{children:"bufferingSize"})}),"\n",(0,c.jsxs)(s.p,{children:["To write the logs in an asynchronous fashion, specify a  ",(0,c.jsx)(s.code,{children:"bufferingSize"})," option.\nThis option represents the number of log lines Mesh will keep in memory before writing them to the selected output.\nIn some cases, this option can greatly help performances."]}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:'# Configuring a buffer of 100 lines\naccessLog:\n  filePath: "/path/to/access.log"\n  bufferingSize: 100\n'})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'# Configuring a buffer of 100 lines\n[accessLog]\n  filePath = "/path/to/access.log"\n  bufferingSize = 100\n'})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-bash",metastring:'tab="CLI"',children:"# Configuring a buffer of 100 lines\n--accesslog.filepath=/path/to/access.log\n--accesslog.bufferingsize=100\n"})}),"\n",(0,c.jsx)(s.h3,{id:"filtering",children:"Filtering"}),"\n",(0,c.jsx)(s.p,{children:'To filter logs, you can specify a set of filters which are logically "OR-connected".\nThus, specifying multiple filters will keep more access logs than specifying only one.'}),"\n",(0,c.jsx)(s.p,{children:"The available filters are:"}),"\n",(0,c.jsxs)(s.ul,{children:["\n",(0,c.jsxs)(s.li,{children:[(0,c.jsx)(s.code,{children:"statusCodes"}),", to limit the access logs to requests with a status codes in the specified range"]}),"\n",(0,c.jsxs)(s.li,{children:[(0,c.jsx)(s.code,{children:"retryAttempts"}),", to keep the access logs when at least one retry has happened"]}),"\n",(0,c.jsxs)(s.li,{children:[(0,c.jsx)(s.code,{children:"minDuration"}),", to keep access logs when requests take longer than the specified duration (provided in seconds or as a valid duration format, see ",(0,c.jsx)(s.a,{href:"https://golang.org/pkg/time/#ParseDuration",children:"time.ParseDuration"}),")"]}),"\n"]}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:'# Configuring Multiple Filters\naccessLog:\n  filePath: "/path/to/access.log"\n  format: json\n  filters:\n    statusCodes:\n      - "200"\n      - "300-302"\n    retryAttempts: true\n    minDuration: "10ms"\n'})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'# Configuring Multiple Filters\n[accessLog]\n  filePath = "/path/to/access.log"\n  format = "json"\n\n  [accessLog.filters]\n    statusCodes = ["200", "300-302"]\n    retryAttempts = true\n    minDuration = "10ms"\n'})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-bash",metastring:'tab="CLI"',children:"# Configuring Multiple Filters\n--accesslog.filepath=/path/to/access.log\n--accesslog.format=json\n--accesslog.filters.statuscodes=200,300-302\n--accesslog.filters.retryattempts\n--accesslog.filters.minduration=10ms\n"})}),"\n",(0,c.jsx)(s.h3,{id:"limiting-the-fieldsincluding-headers",children:"Limiting the Fields/Including Headers"}),"\n",(0,c.jsxs)(s.p,{children:["You can decide to limit the logged fields/headers to a given list with the ",(0,c.jsx)(s.code,{children:"fields.names"})," and ",(0,c.jsx)(s.code,{children:"fields.headers"})," options."]}),"\n",(0,c.jsx)(s.p,{children:"Each field can be set to:"}),"\n",(0,c.jsxs)(s.ul,{children:["\n",(0,c.jsxs)(s.li,{children:[(0,c.jsx)(s.code,{children:"keep"})," to keep the value"]}),"\n",(0,c.jsxs)(s.li,{children:[(0,c.jsx)(s.code,{children:"drop"})," to drop the value"]}),"\n"]}),"\n",(0,c.jsxs)(s.p,{children:["Header fields may also optionally be set to ",(0,c.jsx)(s.code,{children:"redact"}),' to replace the value with "REDACTED".']}),"\n",(0,c.jsxs)(s.p,{children:["The ",(0,c.jsx)(s.code,{children:"defaultMode"})," for ",(0,c.jsx)(s.code,{children:"fields.names"})," is ",(0,c.jsx)(s.code,{children:"keep"}),"."]}),"\n",(0,c.jsxs)(s.p,{children:["The ",(0,c.jsx)(s.code,{children:"defaultMode"})," for ",(0,c.jsx)(s.code,{children:"fields.headers"})," is ",(0,c.jsx)(s.code,{children:"drop"}),"."]}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:'# Limiting the Logs to Specific Fields\naccessLog:\n  filePath: "/path/to/access.log"\n  format: json\n  fields:\n    defaultMode: keep\n    names:\n      ClientUsername: drop\n    headers:\n      defaultMode: keep\n      names:\n        User-Agent: redact\n        Authorization: drop\n        Content-Type: keep\n'})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'# Limiting the Logs to Specific Fields\n[accessLog]\n  filePath = "/path/to/access.log"\n  format = "json"\n\n  [accessLog.fields]\n    defaultMode = "keep"\n\n    [accessLog.fields.names]\n      "ClientUsername" = "drop"\n\n    [accessLog.fields.headers]\n      defaultMode = "keep"\n\n      [accessLog.fields.headers.names]\n        "User-Agent" = "redact"\n        "Authorization" = "drop"\n        "Content-Type" = "keep"\n'})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-bash",metastring:'tab="CLI"',children:"# Limiting the Logs to Specific Fields\n--accesslog.filepath=/path/to/access.log\n--accesslog.format=json\n--accesslog.fields.defaultmode=keep\n--accesslog.fields.names.ClientUsername=drop\n--accesslog.fields.headers.defaultmode=keep\n--accesslog.fields.headers.names.User-Agent=redact\n--accesslog.fields.headers.names.Authorization=drop\n--accesslog.fields.headers.names.Content-Type=keep\n"})}),"\n",(0,c.jsx)(s.p,{children:'??? info "Available Fields"'}),"\n",(0,c.jsxs)(s.table,{children:[(0,c.jsx)(s.thead,{children:(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.th,{children:"Field"}),(0,c.jsx)(s.th,{children:"Description"})]})}),(0,c.jsxs)(s.tbody,{children:[(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"StartUTC"})}),(0,c.jsx)(s.td,{children:"The time at which request processing started."})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"StartLocal"})}),(0,c.jsx)(s.td,{children:"The local time at which request processing started."})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"Duration"})}),(0,c.jsx)(s.td,{children:"The total time taken (in nanoseconds) by processing the response, including the origin server's time but not the log writing time."})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"RouterName"})}),(0,c.jsx)(s.td,{children:"The name of the Mesh  router."})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"ServiceName"})}),(0,c.jsx)(s.td,{children:"The name of the Mesh backend."})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"ServiceURL"})}),(0,c.jsx)(s.td,{children:"The URL of the Mesh backend."})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"ServiceAddr"})}),(0,c.jsxs)(s.td,{children:["The IP",":port"," of the Mesh backend (extracted from ",(0,c.jsx)(s.code,{children:"ServiceURL"}),")"]})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"ClientAddr"})}),(0,c.jsxs)(s.td,{children:["The remote address in its original form (usually IP",":port",")."]})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"ClientHost"})}),(0,c.jsx)(s.td,{children:"The remote IP address from which the client request was received."})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"ClientPort"})}),(0,c.jsx)(s.td,{children:"The remote TCP port from which the client request was received."})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"ClientUsername"})}),(0,c.jsx)(s.td,{children:"The username provided in the URL, if present."})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"RequestAddr"})}),(0,c.jsxs)(s.td,{children:["The HTTP Host header (usually IP",":port","). This is treated as not a header by the Go API."]})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"RequestHost"})}),(0,c.jsx)(s.td,{children:"The HTTP Host server name (not including port)."})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"RequestPort"})}),(0,c.jsx)(s.td,{children:"The TCP port from the HTTP Host."})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"RequestMethod"})}),(0,c.jsx)(s.td,{children:"The HTTP method."})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"RequestPath"})}),(0,c.jsx)(s.td,{children:"The HTTP request URI, not including the scheme, host or port."})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"RequestProtocol"})}),(0,c.jsx)(s.td,{children:"The version of HTTP requested."})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"RequestScheme"})}),(0,c.jsxs)(s.td,{children:["The HTTP scheme requested ",(0,c.jsx)(s.code,{children:"http"})," or ",(0,c.jsx)(s.code,{children:"https"}),"."]})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"RequestLine"})}),(0,c.jsxs)(s.td,{children:[(0,c.jsx)(s.code,{children:"RequestMethod"})," + ",(0,c.jsx)(s.code,{children:"RequestPath"})," + ",(0,c.jsx)(s.code,{children:"RequestProtocol"})]})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"RequestContentSize"})}),(0,c.jsx)(s.td,{children:"The number of bytes in the request entity (a.k.a. body) sent by the client."})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"OriginDuration"})}),(0,c.jsx)(s.td,{children:"The time taken (in nanoseconds) by the origin server ('upstream') to return its response."})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"OriginContentSize"})}),(0,c.jsx)(s.td,{children:"The content length specified by the origin server, or 0 if unspecified."})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"OriginStatus"})}),(0,c.jsx)(s.td,{children:"The HTTP status code returned by the origin server. If the request was handled by this Mesh instance (e.g. with a redirect), then this value will be absent (0)."})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"DownstreamStatus"})}),(0,c.jsx)(s.td,{children:"The HTTP status code returned to the client."})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"DownstreamContentSize"})}),(0,c.jsx)(s.td,{children:'The number of bytes in the response entity returned to the client. This is in addition to the "Content-Length" header, which may be present in the origin response.'})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"RequestCount"})}),(0,c.jsx)(s.td,{children:"The number of requests received since the Mesh instance started."})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"GzipRatio"})}),(0,c.jsx)(s.td,{children:"The response body compression ratio achieved."})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"Overhead"})}),(0,c.jsx)(s.td,{children:"The processing time overhead (in nanoseconds) caused by Mesh."})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"RetryAttempts"})}),(0,c.jsx)(s.td,{children:"The amount of attempts the request was retried."})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"TLSVersion"})}),(0,c.jsxs)(s.td,{children:["The TLS version used by the connection (e.g. ",(0,c.jsx)(s.code,{children:"1.2"}),") (if connection is TLS)."]})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"TLSCipher"})}),(0,c.jsxs)(s.td,{children:["The TLS cipher used by the connection (e.g. ",(0,c.jsx)(s.code,{children:"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA"}),") (if connection is TLS)"]})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"TLSClientSubject"})}),(0,c.jsxs)(s.td,{children:["The string representation of the TLS client certificate's Subject (e.g. ",(0,c.jsx)(s.code,{children:"CN=username,O=organization"}),")"]})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"TraceId"})}),(0,c.jsx)(s.td,{children:"A consistent identifier for tracking requests across services, including upstream ones managed by Mesh, shown as a 32-hex digit string"})]}),(0,c.jsxs)(s.tr,{children:[(0,c.jsx)(s.td,{children:(0,c.jsx)(s.code,{children:"SpanId"})}),(0,c.jsx)(s.td,{children:"A unique identifier for Mesh\u2019s root span (EntryPoint) within a request trace, formatted as a 16-hex digit string."})]})]})]}),"\n",(0,c.jsx)(s.h2,{id:"log-rotation",children:"Log Rotation"}),"\n",(0,c.jsxs)(s.p,{children:["Mesh will close and reopen its log files, assuming they're configured, on receipt of a USR1 signal.\nThis allows the logs to be rotated and processed by an external program, such as ",(0,c.jsx)(s.code,{children:"logrotate"}),"."]}),"\n",(0,c.jsx)(s.p,{children:"!!! warning\nThis does not work on Windows due to the lack of USR signals."}),"\n",(0,c.jsx)(s.h2,{id:"time-zones",children:"Time Zones"}),"\n",(0,c.jsx)(s.p,{children:"Mesh will timestamp each log line in UTC time by default."}),"\n",(0,c.jsx)(s.p,{children:"It is possible to configure the Mesh to timestamp in a specific timezone by ensuring the following configuration has been made in your environment:"}),"\n",(0,c.jsxs)(s.ol,{children:["\n",(0,c.jsxs)(s.li,{children:["Provide time zone data to ",(0,c.jsx)(s.code,{children:"/etc/localtime"})," or ",(0,c.jsx)(s.code,{children:"/usr/share/zoneinfo"})," (based on your distribution) or set the environment variable TZ to the desired timezone"]}),"\n",(0,c.jsxs)(s.li,{children:["Specify the field ",(0,c.jsx)(s.code,{children:"StartLocal"})," by dropping the field named ",(0,c.jsx)(s.code,{children:"StartUTC"})," (available on the default Common Log Format (CLF) as well as JSON)"]}),"\n"]}),"\n",(0,c.jsx)(s.p,{children:"Example utilizing Docker Compose:"}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-yaml",children:'version: "3.7"\n\nservices:\n  Mesh:\n    image: Mesh:v3.4\n    environment:\n      - TZ=US/Alaska\n    command:\n      - --accesslog.fields.names.StartUTC=drop\n      - --providers.docker\n    ports:\n      - 80:80\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n'})}),"\n",(0,c.jsx)(s.h2,{id:"opentelemetry",children:"OpenTelemetry"}),"\n",(0,c.jsx)(s.p,{children:'!!! warning "Experimental Feature"'}),"\n",(0,c.jsx)(s.p,{children:"The OpenTelemetry access logs feature is currently experimental and must be explicitly enabled in the experimental section prior to use."}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"experimental:\n  otlpLogs: true\n"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[experimental.otlpLogs]\n"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-bash",metastring:'tab="CLI"',children:"--experimental.otlpLogs=true\n"})}),"\n",(0,c.jsx)(s.p,{children:"To enable the OpenTelemetry Logger for access logs:"}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"accesslog:\n  otlp: {}\n"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[accesslog.otlp]\n"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-bash",metastring:'tab="CLI"',children:"--accesslog.otlp=true\n"})}),"\n",(0,c.jsx)(s.p,{children:'!!! info "Default protocol"'}),"\n",(0,c.jsxs)(s.p,{children:["The OpenTelemetry Logger exporter will export access logs to the collector using HTTPS by default to ",(0,c.jsx)(s.a,{href:"https://localhost:4318/v1/logs",children:"https://localhost:4318/v1/logs"}),", see the ",(0,c.jsx)(s.a,{href:"#grpc-configuration",children:"gRPC Section"})," to use gRPC."]}),"\n",(0,c.jsx)(s.h3,{id:"http-configuration",children:"HTTP configuration"}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.em,{children:"Optional"})}),"\n",(0,c.jsx)(s.p,{children:"This instructs the exporter to send access logs to the OpenTelemetry Collector using HTTP."}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"accesslog:\n  otlp:\n    http: {}\n"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[accesslog.otlp.http]\n"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-bash",metastring:'tab="CLI"',children:"--accesslog.otlp.http=true\n"})}),"\n",(0,c.jsx)(s.h4,{id:"endpoint",children:(0,c.jsx)(s.code,{children:"endpoint"})}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsxs)(s.em,{children:['Optional, Default="',(0,c.jsx)(s.code,{children:"https://localhost:4318/v1/logs"}),'", Format="',(0,c.jsx)(s.code,{children:"<scheme>://<host>:<port><path>"}),'"']})}),"\n",(0,c.jsx)(s.p,{children:"URL of the OpenTelemetry Collector to send access logs to."}),"\n",(0,c.jsx)(s.p,{children:'!!! info "Insecure mode"'}),"\n",(0,c.jsxs)(s.p,{children:["To disable TLS, use ",(0,c.jsx)(s.code,{children:"http://"})," instead of ",(0,c.jsx)(s.code,{children:"https://"})," in the ",(0,c.jsx)(s.code,{children:"endpoint"})," configuration."]}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"accesslog:\n  otlp:\n    http:\n      endpoint: https://collector:4318/v1/logs\n"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[accesslog.otlp.http]\n  endpoint = "https://collector:4318/v1/logs"\n'})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-bash",metastring:'tab="CLI"',children:"--accesslog.otlp.http.endpoint=https://collector:4318/v1/logs\n"})}),"\n",(0,c.jsx)(s.h4,{id:"headers",children:(0,c.jsx)(s.code,{children:"headers"})}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.em,{children:"Optional, Default="})}),"\n",(0,c.jsx)(s.p,{children:"Additional headers sent with access logs by the exporter to the OpenTelemetry Collector."}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"accesslog:\n  otlp:\n    http:\n      headers:\n        foo: bar\n        baz: buz\n"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[accesslog.otlp.http.headers]\n  foo = "bar"\n  baz = "buz"\n'})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-bash",metastring:'tab="CLI"',children:"--accesslog.otlp.http.headers.foo=bar --accesslog.otlp.http.headers.baz=buz\n"})}),"\n",(0,c.jsx)(s.h4,{id:"tls",children:(0,c.jsx)(s.code,{children:"tls"})}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.em,{children:"Optional"})}),"\n",(0,c.jsx)(s.p,{children:"Defines the Client TLS configuration used by the exporter to send access logs to the OpenTelemetry Collector."}),"\n",(0,c.jsx)(s.h5,{id:"ca",children:(0,c.jsx)(s.code,{children:"ca"})}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.em,{children:"Optional"})}),"\n",(0,c.jsxs)(s.p,{children:[(0,c.jsx)(s.code,{children:"ca"})," is the path to the certificate authority used for the secure connection to the OpenTelemetry Collector,\nit defaults to the system bundle."]}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"accesslog:\n  otlp:\n    http:\n      tls:\n        ca: path/to/ca.crt\n"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[accesslog.otlp.http.tls]\n  ca = "path/to/ca.crt"\n'})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-bash",metastring:'tab="CLI"',children:"--accesslog.otlp.http.tls.ca=path/to/ca.crt\n"})}),"\n",(0,c.jsx)(s.h5,{id:"cert",children:(0,c.jsx)(s.code,{children:"cert"})}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.em,{children:"Optional"})}),"\n",(0,c.jsxs)(s.p,{children:[(0,c.jsx)(s.code,{children:"cert"})," is the path to the public certificate used for the secure connection to the OpenTelemetry Collector.\nWhen using this option, setting the ",(0,c.jsx)(s.code,{children:"key"})," option is required."]}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"accesslog:\n  otlp:\n    http:\n      tls:\n        cert: path/to/foo.cert\n        key: path/to/foo.key\n"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[accesslog.otlp.http.tls]\n  cert = "path/to/foo.cert"\n  key = "path/to/foo.key"\n'})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-bash",metastring:'tab="CLI"',children:"--accesslog.otlp.http.tls.cert=path/to/foo.cert\n--accesslog.otlp.http.tls.key=path/to/foo.key\n"})}),"\n",(0,c.jsx)(s.h5,{id:"key",children:(0,c.jsx)(s.code,{children:"key"})}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.em,{children:"Optional"})}),"\n",(0,c.jsxs)(s.p,{children:[(0,c.jsx)(s.code,{children:"key"})," is the path to the private key used for the secure connection to the OpenTelemetry Collector.\nWhen using this option, setting the ",(0,c.jsx)(s.code,{children:"cert"})," option is required."]}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"accesslog:\n  otlp:\n    http:\n      tls:\n        cert: path/to/foo.cert\n        key: path/to/foo.key\n"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[accesslog.otlp.http.tls]\n  cert = "path/to/foo.cert"\n  key = "path/to/foo.key"\n'})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-bash",metastring:'tab="CLI"',children:"--accesslog.otlp.http.tls.cert=path/to/foo.cert\n--accesslog.otlp.http.tls.key=path/to/foo.key\n"})}),"\n",(0,c.jsx)(s.h5,{id:"insecureskipverify",children:(0,c.jsx)(s.code,{children:"insecureSkipVerify"})}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.em,{children:"Optional, Default=false"})}),"\n",(0,c.jsxs)(s.p,{children:["If ",(0,c.jsx)(s.code,{children:"insecureSkipVerify"})," is ",(0,c.jsx)(s.code,{children:"true"}),",\nthe TLS connection to the OpenTelemetry Collector accepts any certificate presented by the server regardless of the hostnames it covers."]}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"accesslog:\n  otlp:\n    http:\n      tls:\n        insecureSkipVerify: true\n"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[accesslog.otlp.http.tls]\n  insecureSkipVerify = true\n"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-bash",metastring:'tab="CLI"',children:"--accesslog.otlp.http.tls.insecureSkipVerify=true\n"})}),"\n",(0,c.jsx)(s.h3,{id:"grpc-configuration",children:"gRPC configuration"}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.em,{children:"Optional"})}),"\n",(0,c.jsx)(s.p,{children:"This instructs the exporter to send access logs to the OpenTelemetry Collector using gRPC."}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"accesslog:\n  otlp:\n    grpc: {}\n"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[accesslog.otlp.grpc]\n"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-bash",metastring:'tab="CLI"',children:"--accesslog.otlp.grpc=true\n"})}),"\n",(0,c.jsx)(s.h4,{id:"endpoint-1",children:(0,c.jsx)(s.code,{children:"endpoint"})}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsxs)(s.em,{children:['Required, Default="localhost:4317", Format="',(0,c.jsx)(s.code,{children:"<host>:<port>"}),'"']})}),"\n",(0,c.jsx)(s.p,{children:"Address of the OpenTelemetry Collector to send access logs to."}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"accesslog:\n  otlp:\n    grpc:\n      endpoint: localhost:4317\n"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[accesslog.otlp.grpc]\n  endpoint = "localhost:4317"\n'})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-bash",metastring:'tab="CLI"',children:"--accesslog.otlp.grpc.endpoint=localhost:4317\n"})}),"\n",(0,c.jsx)(s.h4,{id:"insecure",children:(0,c.jsx)(s.code,{children:"insecure"})}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.em,{children:"Optional, Default=false"})}),"\n",(0,c.jsx)(s.p,{children:"Allows exporter to send access logs to the OpenTelemetry Collector without using a secured protocol."}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"accesslog:\n  otlp:\n    grpc:\n      insecure: true\n"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[accesslog.otlp.grpc]\n  insecure = true\n"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-bash",metastring:'tab="CLI"',children:"--accesslog.otlp.grpc.insecure=true\n"})}),"\n",(0,c.jsx)(s.h4,{id:"headers-1",children:(0,c.jsx)(s.code,{children:"headers"})}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.em,{children:"Optional, Default="})}),"\n",(0,c.jsx)(s.p,{children:"Additional headers sent with access logs by the exporter to the OpenTelemetry Collector."}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"accesslog:\n  otlp:\n    grpc:\n      headers:\n        foo: bar\n        baz: buz\n"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[accesslog.otlp.grpc.headers]\n  foo = "bar"\n  baz = "buz"\n'})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-bash",metastring:'tab="CLI"',children:"--accesslog.otlp.grpc.headers.foo=bar --accesslog.otlp.grpc.headers.baz=buz\n"})}),"\n",(0,c.jsx)(s.h4,{id:"tls-1",children:(0,c.jsx)(s.code,{children:"tls"})}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.em,{children:"Optional"})}),"\n",(0,c.jsx)(s.p,{children:"Defines the Client TLS configuration used by the exporter to send access logs to the OpenTelemetry Collector."}),"\n",(0,c.jsx)(s.h5,{id:"ca-1",children:(0,c.jsx)(s.code,{children:"ca"})}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.em,{children:"Optional"})}),"\n",(0,c.jsxs)(s.p,{children:[(0,c.jsx)(s.code,{children:"ca"})," is the path to the certificate authority used for the secure connection to the OpenTelemetry Collector,\nit defaults to the system bundle."]}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"accesslog:\n  otlp:\n    grpc:\n      tls:\n        ca: path/to/ca.crt\n"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[accesslog.otlp.grpc.tls]\n  ca = "path/to/ca.crt"\n'})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-bash",metastring:'tab="CLI"',children:"--accesslog.otlp.grpc.tls.ca=path/to/ca.crt\n"})}),"\n",(0,c.jsx)(s.h5,{id:"cert-1",children:(0,c.jsx)(s.code,{children:"cert"})}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.em,{children:"Optional"})}),"\n",(0,c.jsxs)(s.p,{children:[(0,c.jsx)(s.code,{children:"cert"})," is the path to the public certificate used for the secure connection to the OpenTelemetry Collector.\nWhen using this option, setting the ",(0,c.jsx)(s.code,{children:"key"})," option is required."]}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"accesslog:\n  otlp:\n    grpc:\n      tls:\n        cert: path/to/foo.cert\n        key: path/to/foo.key\n"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[accesslog.otlp.grpc.tls]\n  cert = "path/to/foo.cert"\n  key = "path/to/foo.key"\n'})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-bash",metastring:'tab="CLI"',children:"--accesslog.otlp.grpc.tls.cert=path/to/foo.cert\n--accesslog.otlp.grpc.tls.key=path/to/foo.key\n"})}),"\n",(0,c.jsx)(s.h5,{id:"key-1",children:(0,c.jsx)(s.code,{children:"key"})}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.em,{children:"Optional"})}),"\n",(0,c.jsxs)(s.p,{children:[(0,c.jsx)(s.code,{children:"key"})," is the path to the private key used for the secure connection to the OpenTelemetry Collector.\nWhen using this option, setting the ",(0,c.jsx)(s.code,{children:"cert"})," option is required."]}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"accesslog:\n  otlp:\n    grpc:\n      tls:\n        cert: path/to/foo.cert\n        key: path/to/foo.key\n"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'[accesslog.otlp.grpc.tls]\n  cert = "path/to/foo.cert"\n  key = "path/to/foo.key"\n'})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-bash",metastring:'tab="CLI"',children:"--accesslog.otlp.grpc.tls.cert=path/to/foo.cert\n--accesslog.otlp.grpc.tls.key=path/to/foo.key\n"})}),"\n",(0,c.jsx)(s.h5,{id:"insecureskipverify-1",children:(0,c.jsx)(s.code,{children:"insecureSkipVerify"})}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.em,{children:"Optional, Default=false"})}),"\n",(0,c.jsxs)(s.p,{children:["If ",(0,c.jsx)(s.code,{children:"insecureSkipVerify"})," is ",(0,c.jsx)(s.code,{children:"true"}),",\nthe TLS connection to the OpenTelemetry Collector accepts any certificate presented by the server regardless of the hostnames it covers."]}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:"accesslog:\n  otlp:\n    grpc:\n      tls:\n        insecureSkipVerify: true\n"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:"[accesslog.otlp.grpc.tls]\n  insecureSkipVerify = true\n"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-bash",metastring:'tab="CLI"',children:"--accesslog.otlp.grpc.tls.insecureSkipVerify=true\n"})})]})}function h(e={}){const{wrapper:s}={...(0,l.R)(),...e.components};return s?(0,c.jsx)(s,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>i});var t=n(6540);const c={},l=t.createContext(c);function r(e){const s=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:r(e.components),t.createElement(l.Provider,{value:s},e.children)}}}]);