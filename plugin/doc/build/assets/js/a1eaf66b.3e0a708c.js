"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[6171],{8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>i});var r=n(6540);const a={},s=r.createContext(a);function l(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),r.createElement(s.Provider,{value:t},e.children)}},9908:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"reference/routing-configuration/http/middlewares/replacepathregex","title":"Mesh ReplacePathRegex Documentation","description":"In Mesh Proxy\'s HTTP middleware, ReplacePathRegex updates paths before forwarding requests, using a regex. Read the technical documentation.","source":"@site/docs/reference/routing-configuration/http/middlewares/replacepathregex.md","sourceDirName":"reference/routing-configuration/http/middlewares","slug":"/reference/routing-configuration/http/middlewares/replacepathregex","permalink":"/doc/docs/reference/routing-configuration/http/middlewares/replacepathregex","draft":false,"unlisted":false,"editUrl":"https://github.com/opendatav/mesh/tree/main/packages/create-docusaurus/templates/shared/docs/reference/routing-configuration/http/middlewares/replacepathregex.md","tags":[],"version":"current","frontMatter":{"title":"Mesh ReplacePathRegex Documentation","description":"In Mesh Proxy\'s HTTP middleware, ReplacePathRegex updates paths before forwarding requests, using a regex. Read the technical documentation."},"sidebar":"tutorialSidebar","previous":{"title":"Mesh ReplacePath Documentation","permalink":"/doc/docs/reference/routing-configuration/http/middlewares/replacepath"},"next":{"title":"Mesh HTTP Retry Documentation","permalink":"/doc/docs/reference/routing-configuration/http/middlewares/retry"}}');var a=n(4848),s=n(8453);const l={title:"Mesh ReplacePathRegex Documentation",description:"In Mesh Proxy's HTTP middleware, ReplacePathRegex updates paths before forwarding requests, using a regex. Read the technical documentation."},i=void 0,c={},o=[{value:"Configuration Examples",id:"configuration-examples",level:2},{value:"Configuration Options",id:"configuration-options",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"replacePathRegex"})," middleware will:"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Replace the matching path with the specified one."}),"\n",(0,a.jsxs)(t.li,{children:["Store the original path in an ",(0,a.jsx)(t.code,{children:"X-Replaced-Path"})," header"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"configuration-examples",children:"Configuration Examples"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:'# Replace path with regex\nhttp:\n  middlewares:\n    test-replacepathregex:\n      replacePathRegex:\n        regex: "^/foo/(.*)"\n        replacement: "/bar/$1"\n'})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'# Replace path with regex\n[http.middlewares]\n  [http.middlewares.test-replacepathregex.replacePathRegex]\n    regex = "^/foo/(.*)"\n    replacement = "/bar/$1"\n'})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",metastring:'tab="Kubernetes"',children:'# Replace path with regex\napiVersion: Mesh.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-replacepathregex\nspec:\n  replacePathRegex:\n    regex: "^/foo/(.*)"\n    replacement: "/bar/$1"\n'})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",metastring:'tab="Docker & Swarm"',children:'# Replace path with regex\nlabels:\n  - "Mesh.http.middlewares.test-replacepathregex.replacepathregex.regex=^/foo/(.*)"\n  - "Mesh.http.middlewares.test-replacepathregex.replacepathregex.replacement=/bar/$$1"\n'})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",metastring:'tab="Consul Catalog"',children:'# Replace path with regex\n- "Mesh.http.middlewares.test-replacepathregex.replacepathregex.regex=^/foo/(.*)"\n- "Mesh.http.middlewares.test-replacepathregex.replacepathregex.replacement=/bar/$1"\n'})}),"\n",(0,a.jsx)(t.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{style:{textAlign:"left"},children:"Field"}),(0,a.jsx)(t.th,{style:{textAlign:"left"},children:"Description"}),(0,a.jsx)(t.th,{style:{textAlign:"left"},children:"Default"}),(0,a.jsx)(t.th,{style:{textAlign:"left"},children:"Required"})]})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{style:{textAlign:"left"},children:(0,a.jsx)(t.code,{children:"regex"})}),(0,a.jsx)(t.td,{style:{textAlign:"left"},children:"Regular expression to match and capture the path from the request URL."}),(0,a.jsx)(t.td,{style:{textAlign:"left"}}),(0,a.jsx)(t.td,{style:{textAlign:"left"},children:"Yes"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{style:{textAlign:"left"},children:(0,a.jsx)(t.code,{children:"replacement"})}),(0,a.jsxs)(t.td,{style:{textAlign:"left"},children:["Replacement path format, which can include captured variables.",(0,a.jsx)("br",{})," ",(0,a.jsx)(t.code,{children:"$1x"})," is equivalent to ",(0,a.jsx)(t.code,{children:"${1x}"}),", not ",(0,a.jsx)(t.code,{children:"${1}x"})," (see ",(0,a.jsx)(t.a,{href:"https://golang.org/pkg/regexp/#Regexp.Expand",children:"Regexp.Expand"}),"), so use ",(0,a.jsx)(t.code,{children:"${1}"})," syntax."]}),(0,a.jsx)(t.td,{style:{textAlign:"left"}}),(0,a.jsx)(t.td,{style:{textAlign:"left"},children:"No"})]})]})]}),"\n",(0,a.jsx)(t.p,{children:"!!! tip"}),"\n",(0,a.jsxs)(t.p,{children:["Regular expressions and replacements can be tested using online tools such as ",(0,a.jsx)(t.a,{href:"https://play.golang.org/p/mWU9p-wk2ru",children:"Go Playground"})," or the ",(0,a.jsx)(t.a,{href:"https://regex101.com/r/58sIgx/2",children:"Regex101"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["When defining a regular expression within YAML, any escaped character needs to be escaped twice: ",(0,a.jsx)(t.code,{children:"example\\.com"})," needs to be written as ",(0,a.jsx)(t.code,{children:"example\\\\.com"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);