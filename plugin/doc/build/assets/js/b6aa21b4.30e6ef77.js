"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[3776],{6656:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"middlewares/tcp/ipwhitelist","title":"Mesh TCP Middlewares IPWhiteList","description":"Learn how to use IPWhiteList in TCP middleware for limiting clients to specific IPs in Mesh Proxy. Read the technical documentation.","source":"@site/docs/middlewares/tcp/ipwhitelist.md","sourceDirName":"middlewares/tcp","slug":"/middlewares/tcp/ipwhitelist","permalink":"/doc/docs/middlewares/tcp/ipwhitelist","draft":false,"unlisted":false,"editUrl":"https://github.com/opendatav/mesh/tree/main/packages/create-docusaurus/templates/shared/docs/middlewares/tcp/ipwhitelist.md","tags":[],"version":"current","frontMatter":{"title":"Mesh TCP Middlewares IPWhiteList","description":"Learn how to use IPWhiteList in TCP middleware for limiting clients to specific IPs in Mesh Proxy. Read the technical documentation."},"sidebar":"tutorialSidebar","previous":{"title":"Mesh TCP Middlewares IPAllowList","permalink":"/doc/docs/middlewares/tcp/ipallowlist"},"next":{"title":"Mesh Proxy TCP Middleware Overview","permalink":"/doc/docs/middlewares/tcp/overview"}}');var n=t(4848),r=t(8453);const a={title:"Mesh TCP Middlewares IPWhiteList",description:"Learn how to use IPWhiteList in TCP middleware for limiting clients to specific IPs in Mesh Proxy. Read the technical documentation."},c="IPWhiteList",o={},d=[{value:"Configuration Examples",id:"configuration-examples",level:2},{value:"Configuration Options",id:"configuration-options",level:2},{value:"<code>sourceRange</code>",id:"sourcerange",level:3}];function l(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.header,{children:(0,n.jsx)(i.h1,{id:"ipwhitelist",children:"IPWhiteList"})}),"\n",(0,n.jsx)(i.p,{children:"Limiting Clients to Specific IPs"}),"\n",(0,n.jsx)(i.p,{children:"IPWhiteList accepts / refuses connections based on the client IP."}),"\n",(0,n.jsx)(i.p,{children:"!!! warning"}),"\n",(0,n.jsxs)(i.p,{children:["This middleware is deprecated, please use the ",(0,n.jsx)(i.a,{href:"/doc/docs/middlewares/tcp/ipallowlist",children:"IPAllowList"})," middleware instead."]}),"\n",(0,n.jsx)(i.h2,{id:"configuration-examples",children:"Configuration Examples"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-yaml",metastring:'tab="Docker"',children:'# Accepts connections from defined IP\nlabels:\n  - "Mesh.tcp.middlewares.test-ipwhitelist.ipwhitelist.sourcerange=127.0.0.1/32, 192.168.1.7"\n'})}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-yaml",metastring:'tab="Kubernetes"',children:"apiVersion: Mesh.io/v1alpha1\nkind: MiddlewareTCP\nmetadata:\n  name: test-ipwhitelist\nspec:\n  ipWhiteList:\n    sourceRange:\n      - 127.0.0.1/32\n      - 192.168.1.7\n"})}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-yaml",metastring:'tab="Consul Catalog"',children:'# Accepts request from defined IP\n- "Mesh.tcp.middlewares.test-ipwhitelist.ipwhitelist.sourcerange=127.0.0.1/32, 192.168.1.7"\n'})}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-toml",metastring:'tab="File (TOML)"',children:'# Accepts request from defined IP\n[tcp.middlewares]\n  [tcp.middlewares.test-ipwhitelist.ipWhiteList]\n    sourceRange = ["127.0.0.1/32", "192.168.1.7"]\n'})}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-yaml",metastring:'tab="File (YAML)"',children:'# Accepts request from defined IP\ntcp:\n  middlewares:\n    test-ipwhitelist:\n      ipWhiteList:\n        sourceRange:\n          - "127.0.0.1/32"\n          - "192.168.1.7"\n'})}),"\n",(0,n.jsx)(i.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,n.jsx)(i.h3,{id:"sourcerange",children:(0,n.jsx)(i.code,{children:"sourceRange"})}),"\n",(0,n.jsxs)(i.p,{children:["The ",(0,n.jsx)(i.code,{children:"sourceRange"})," option sets the allowed IPs (or ranges of allowed IPs by using CIDR notation)."]})]})}function h(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,i,t)=>{t.d(i,{R:()=>a,x:()=>c});var s=t(6540);const n={},r=s.createContext(n);function a(e){const i=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),s.createElement(r.Provider,{value:i},e.children)}}}]);