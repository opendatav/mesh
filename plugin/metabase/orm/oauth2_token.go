/*
 * Copyright (c) 2019, 2025, firmer.tech and/or its affiliates. All rights reserved.
 * Firmer Corporation PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 *
 */

// Code generated by mesh; DO NOT EDIT.

package orm

import (
	"context"
	"database/sql"
	"time"

	"git.firmer.tech/firmer/mesh/client/golang/cause"
	"git.firmer.tech/firmer/mesh/client/golang/orm/dao"
	"git.firmer.tech/firmer/mesh/client/golang/orm/planner/specs"
	"git.firmer.tech/firmer/mesh/client/golang/types"
)

// oauth2Token OAuth2令牌表
type Oauth2Token struct {
	Code     string    `index:"1" json:"code" xml:"code" yaml:"code" comment:"授权码"`
	Access   string    `index:"2" json:"access" xml:"access" yaml:"access" comment:"准入TOKEN"`
	Refresh  string    `index:"3" json:"refresh" xml:"refresh" yaml:"refresh" comment:"刷新TOKEN"`
	Data     string    `index:"4" json:"data" xml:"data" yaml:"data" comment:"补充数据"`
	CreateAt time.Time `index:"5" json:"create_at" xml:"create_at" yaml:"create_at" comment:"创建时间"`
	ExpireAt time.Time `index:"6" json:"expire_at" xml:"expire_at" yaml:"expire_at" comment:"过期时间"`
}
type Oauth2TokenDao interface {

	// DeleteToken
	// DELETE FROM `oauth2_token` WHERE `code` = '?.code'
	DeleteToken(ctx context.Context, code string) (int64, error)

	// IndexToken
	// SELECT * FROM `oauth2_token` ORDER BY `code` ASC LIMIT '?.index', '?.limit'
	IndexToken(ctx context.Context, index int64, limit int64) (*types.Page[*Oauth2Token], error)

	// InsertOauth2Token
	// INSERT INTO `oauth2_token` (`code`, `access`, `refresh`, `data`, `create_at`, `expire_at`) VALUES ('?.code', '?.access', '?.refresh', '?.data', '?.createAt', '?.expireAt')
	InsertOauth2Token(ctx context.Context, it *Oauth2Token) (int64, error)

	// UpdateOauth2TokenByCode
	// UPDATE `oauth2_token` SET `access` = '?.access', `refresh` = '?.refresh', `data` = '?.data', `create_at` = '?.createAt', `expire_at` = '?.expireAt' WHERE `code` = '?.code'
	UpdateOauth2TokenByCode(ctx context.Context, it *Oauth2Token) (int64, error)

	// DeleteOauth2TokenByCode
	// DELETE FROM `oauth2_token` WHERE `code` = '?.code'
	DeleteOauth2TokenByCode(ctx context.Context, code string) (int64, error)

	// SelectOauth2TokenByCode
	// SELECT * FROM `oauth2_token` WHERE `code` = '?.code'
	SelectOauth2TokenByCode(ctx context.Context, code string) (*Oauth2Token, error)
}

type meshOauth2TokenDiv struct {
}

func (that *meshOauth2TokenDiv) DeleteToken(ctx context.Context, code string) (int64, error) {
	return dao.Exec(ctx, &specs.Vars{
		Expr: "DELETE FROM `oauth2_token` WHERE `code` = '?.code'",
		Args: map[string]any{
			"code": code,
		},
	})
}

func (that *meshOauth2TokenDiv) IndexToken(ctx context.Context, index int64, limit int64) (*types.Page[*Oauth2Token], error) {
	return dao.Page[Oauth2Token](ctx, &specs.Vars{
		Expr: "SELECT * FROM `oauth2_token` ORDER BY `code` ASC LIMIT '?.index', '?.limit'",
		Args: map[string]any{
			"index": index,
			"limit": limit,
		},
		Flags: int64(types.PageResultSet),
	})
}

func (that *meshOauth2TokenDiv) InsertOauth2Token(ctx context.Context, it *Oauth2Token) (int64, error) {
	return dao.Exec(ctx, &specs.Vars{
		Expr: "INSERT INTO `oauth2_token` (`code`, `access`, `refresh`, `data`, `create_at`, `expire_at`) VALUES ('?.code', '?.access', '?.refresh', '?.data', '?.createAt', '?.expireAt')",
		Args: map[string]any{
			"code":     it.Code,
			"access":   it.Access,
			"refresh":  it.Refresh,
			"data":     it.Data,
			"createAt": it.CreateAt,
			"expireAt": it.ExpireAt,
		},
	})
}

func (that *meshOauth2TokenDiv) UpdateOauth2TokenByCode(ctx context.Context, it *Oauth2Token) (int64, error) {
	return dao.Exec(ctx, &specs.Vars{
		Expr: "UPDATE `oauth2_token` SET `access` = '?.access', `refresh` = '?.refresh', `data` = '?.data', `create_at` = '?.createAt', `expire_at` = '?.expireAt' WHERE `code` = '?.code'",
		Args: map[string]any{
			"access":   it.Access,
			"refresh":  it.Refresh,
			"data":     it.Data,
			"createAt": it.CreateAt,
			"expireAt": it.ExpireAt,
			"code":     it.Code,
		},
	})
}

func (that *meshOauth2TokenDiv) DeleteOauth2TokenByCode(ctx context.Context, code string) (int64, error) {
	return dao.Exec(ctx, &specs.Vars{
		Expr: "DELETE FROM `oauth2_token` WHERE `code` = '?.code'",
		Args: map[string]any{
			"code": code,
		},
	})
}

func (that *meshOauth2TokenDiv) SelectOauth2TokenByCode(ctx context.Context, code string) (*Oauth2Token, error) {
	rs, err := dao.Query[Oauth2Token](ctx, &specs.Vars{
		Expr: "SELECT * FROM `oauth2_token` WHERE `code` = '?.code'",
		Args: map[string]any{
			"code": code,
		},
	})
	if nil != err {
		return nil, cause.Error(err)
	}
	if len(rs) < 1 {
		return nil, cause.Error(sql.ErrNoRows)
	}
	return rs[0], nil
}
