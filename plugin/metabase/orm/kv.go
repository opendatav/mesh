/*
 * Copyright (c) 2019, 2025, firmer.tech and/or its affiliates. All rights reserved.
 * Firmer Corporation PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 *
 */

// Code generated by mesh; DO NOT EDIT.

package orm

import (
	"context"
	"database/sql"
	"time"

	"git.firmer.tech/firmer/mesh/client/golang/cause"
	"git.firmer.tech/firmer/mesh/client/golang/orm/dao"
	"git.firmer.tech/firmer/mesh/client/golang/orm/planner/specs"
	"git.firmer.tech/firmer/mesh/client/golang/types"
)

// meshKv KV表
type MeshKv struct {
	Key      string    `index:"1" json:"key" xml:"key" yaml:"key" comment:"配置KEY"`
	Value    string    `index:"2" json:"value" xml:"value" yaml:"value" comment:"配置内容"`
	CreateAt time.Time `index:"3" json:"create_at" xml:"create_at" yaml:"create_at" comment:"创建时间"`
	UpdateAt time.Time `index:"4" json:"update_at" xml:"update_at" yaml:"update_at" comment:"更新时间"`
	CreateBy string    `index:"5" json:"create_by" xml:"create_by" yaml:"create_by" comment:"创建人"`
	UpdateBy string    `index:"6" json:"update_by" xml:"update_by" yaml:"update_by" comment:"更新人"`
}
type KvDao interface {

	// Index
	// SELECT * FROM `mesh_kv` ORDER BY `key` ASC LIMIT '?.index', '?.limit'
	Index(ctx context.Context, index int64, limit int64) (*types.Page[*MeshKv], error)

	// SelectKeys
	// SELECT `key` FROM `mesh_kv` WHERE `key` LIKE '%?.key%'
	SelectKeys(ctx context.Context, key string) ([]string, error)

	// SelectKeyPrefix
	// SELECT * FROM `mesh_kv` WHERE `key` LIKE '%?.key%'
	SelectKeyPrefix(ctx context.Context, key string) ([]*MeshKv, error)

	// InsertMeshKv
	// INSERT INTO `mesh_kv` (`key`, `value`, `create_at`, `update_at`, `create_by`, `update_by`) VALUES ('?.key', '?.value', '?.createAt', '?.updateAt', '?.createBy', '?.updateBy')
	InsertMeshKv(ctx context.Context, it *MeshKv) (int64, error)

	// UpdateMeshKvByKey
	// UPDATE `mesh_kv` SET `value` = '?.value', `create_at` = '?.createAt', `update_at` = '?.updateAt', `create_by` = '?.createBy', `update_by` = '?.updateBy' WHERE `key` = '?.key'
	UpdateMeshKvByKey(ctx context.Context, it *MeshKv) (int64, error)

	// DeleteMeshKvByKey
	// DELETE FROM `mesh_kv` WHERE `key` = '?.key'
	DeleteMeshKvByKey(ctx context.Context, key string) (int64, error)

	// SelectMeshKvByKey
	// SELECT * FROM `mesh_kv` WHERE `key` = '?.key'
	SelectMeshKvByKey(ctx context.Context, key string) (*MeshKv, error)
}

type meshKvDiv struct {
}

func (that *meshKvDiv) Index(ctx context.Context, index int64, limit int64) (*types.Page[*MeshKv], error) {
	return dao.Page[MeshKv](ctx, &specs.Vars{
		Expr: "SELECT * FROM `mesh_kv` ORDER BY `key` ASC LIMIT '?.index', '?.limit'",
		Args: map[string]any{
			"index": index,
			"limit": limit,
		},
		Flags: int64(types.PageResultSet),
	})
}

func (that *meshKvDiv) SelectKeys(ctx context.Context, key string) ([]string, error) {
	rs, err := dao.Query[string](ctx, &specs.Vars{
		Expr: "SELECT `key` FROM `mesh_kv` WHERE `key` LIKE '%?.key%'",
		Args: map[string]any{
			"key": key,
		},
	})
	if nil != err {
		return nil, cause.Error(err)
	}
	ns := make([]string, len(rs))
	for idx, r := range rs {
		ns[idx] = *r
	}
	return ns, nil
}

func (that *meshKvDiv) SelectKeyPrefix(ctx context.Context, key string) ([]*MeshKv, error) {
	rs, err := dao.Query[MeshKv](ctx, &specs.Vars{
		Expr: "SELECT * FROM `mesh_kv` WHERE `key` LIKE '%?.key%'",
		Args: map[string]any{
			"key": key,
		},
	})
	if nil != err {
		return nil, cause.Error(err)
	}
	return rs, nil
}

func (that *meshKvDiv) InsertMeshKv(ctx context.Context, it *MeshKv) (int64, error) {
	return dao.Exec(ctx, &specs.Vars{
		Expr: "INSERT INTO `mesh_kv` (`key`, `value`, `create_at`, `update_at`, `create_by`, `update_by`) VALUES ('?.key', '?.value', '?.createAt', '?.updateAt', '?.createBy', '?.updateBy')",
		Args: map[string]any{
			"key":      it.Key,
			"value":    it.Value,
			"createAt": it.CreateAt,
			"updateAt": it.UpdateAt,
			"createBy": it.CreateBy,
			"updateBy": it.UpdateBy,
		},
	})
}

func (that *meshKvDiv) UpdateMeshKvByKey(ctx context.Context, it *MeshKv) (int64, error) {
	return dao.Exec(ctx, &specs.Vars{
		Expr: "UPDATE `mesh_kv` SET `value` = '?.value', `create_at` = '?.createAt', `update_at` = '?.updateAt', `create_by` = '?.createBy', `update_by` = '?.updateBy' WHERE `key` = '?.key'",
		Args: map[string]any{
			"value":    it.Value,
			"createAt": it.CreateAt,
			"updateAt": it.UpdateAt,
			"createBy": it.CreateBy,
			"updateBy": it.UpdateBy,
			"key":      it.Key,
		},
	})
}

func (that *meshKvDiv) DeleteMeshKvByKey(ctx context.Context, key string) (int64, error) {
	return dao.Exec(ctx, &specs.Vars{
		Expr: "DELETE FROM `mesh_kv` WHERE `key` = '?.key'",
		Args: map[string]any{
			"key": key,
		},
	})
}

func (that *meshKvDiv) SelectMeshKvByKey(ctx context.Context, key string) (*MeshKv, error) {
	rs, err := dao.Query[MeshKv](ctx, &specs.Vars{
		Expr: "SELECT * FROM `mesh_kv` WHERE `key` = '?.key'",
		Args: map[string]any{
			"key": key,
		},
	})
	if nil != err {
		return nil, cause.Error(err)
	}
	if len(rs) < 1 {
		return nil, cause.Error(sql.ErrNoRows)
	}
	return rs[0], nil
}
