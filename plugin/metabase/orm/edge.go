/*
 * Copyright (c) 2019, 2025, firmer.tech and/or its affiliates. All rights reserved.
 * Firmer Corporation PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 *
 */

// Code generated by mesh; DO NOT EDIT.

package orm

import (
	"context"
	"database/sql"
	"time"

	"git.firmer.tech/firmer/mesh/client/golang/cause"
	"git.firmer.tech/firmer/mesh/client/golang/orm/dao"
	"git.firmer.tech/firmer/mesh/client/golang/orm/planner/specs"
	"git.firmer.tech/firmer/mesh/client/golang/types"
)

// edge 网络节点联通表，两点之间最多一条边
type Edge struct {
	NodeId      string    `index:"1" json:"node_id" xml:"node_id" yaml:"node_id" comment:"节点编号"`
	InstId      string    `index:"2" json:"inst_id" xml:"inst_id" yaml:"inst_id" comment:"机构编号"`
	InstName    string    `index:"3" json:"inst_name" xml:"inst_name" yaml:"inst_name" comment:"机构名称"`
	Address     string    `index:"4" json:"address" xml:"address" yaml:"address" comment:"节点地址"`
	Describe    string    `index:"5" json:"describe" xml:"describe" yaml:"describe" comment:"节点说明"`
	Certificate string    `index:"6" json:"certificate" xml:"certificate" yaml:"certificate" comment:"节点证书"`
	Status      int64     `index:"7" json:"status" xml:"status" yaml:"status" comment:"状态"`
	Version     int64     `index:"8" json:"version" xml:"version" yaml:"version" comment:"乐观锁版本"`
	AuthCode    string    `index:"9" json:"auth_code" xml:"auth_code" yaml:"auth_code" comment:"授权码"`
	StaticIp    string    `index:"10" json:"static_ip" xml:"static_ip" yaml:"static_ip" comment:"静态IP"`
	PublicIp    string    `index:"11" json:"public_ip" xml:"public_ip" yaml:"public_ip" comment:"公网IP"`
	Requests    int64     `index:"12" json:"requests" xml:"requests" yaml:"requests" comment:"请求并发限制"`
	Extra       string    `index:"13" json:"extra" xml:"extra" yaml:"extra" comment:"补充信息"`
	ExpireAt    time.Time `index:"14" json:"expire_at" xml:"expire_at" yaml:"expire_at" comment:"过期时间"`
	CreateAt    time.Time `index:"15" json:"create_at" xml:"create_at" yaml:"create_at" comment:"创建时间"`
	UpdateAt    time.Time `index:"16" json:"update_at" xml:"update_at" yaml:"update_at" comment:"更新时间"`
	CreateBy    string    `index:"17" json:"create_by" xml:"create_by" yaml:"create_by" comment:"创建人"`
	UpdateBy    string    `index:"18" json:"update_by" xml:"update_by" yaml:"update_by" comment:"更新人"`
	Group       string    `index:"19" json:"group" xml:"group" yaml:"group" comment:"联盟中心节点机构id-多个用逗号分割"`
}
type EdgeDao interface {

	// DeleteEdge
	// DELETE FROM `edge` WHERE `node_id` = '?.node_id'
	DeleteEdge(ctx context.Context, node_id string) (int64, error)

	// IndexEdge
	// SELECT * FROM `edge` ORDER BY `node_id` ASC LIMIT '?.index', '?.limit'
	IndexEdge(ctx context.Context, index int64, limit int64) (*types.Page[*Edge], error)

	// SelectByIds
	// SELECT * FROM `edge` WHERE `node_id` = '?.node_id' OR `inst_id` = '?.inst_id' LIMIT 1
	SelectByIds(ctx context.Context, node_id string, inst_id string) (*Edge, error)

	// SelectAll
	// SELECT * FROM `edge`
	SelectAll(ctx context.Context) ([]*Edge, error)

	// InsertEdge
	// INSERT INTO `edge` (`node_id`, `inst_id`, `inst_name`, `address`, `describe`, `certificate`, `status`, `version`, `auth_code`, `static_ip`, `public_ip`, `requests`, `extra`, `expire_at`, `create_at`, `update_at`, `create_by`, `update_by`, `group`) VALUES ('?.nodeId', '?.instId', '?.instName', '?.address', '?.describe', '?.certificate', '?.status', '?.version', '?.authCode', '?.staticIp', '?.publicIp', '?.requests', '?.extra', '?.expireAt', '?.createAt', '?.updateAt', '?.createBy', '?.updateBy', '?.group')
	InsertEdge(ctx context.Context, it *Edge) (int64, error)

	// UpdateEdgeByNodeId
	// UPDATE `edge` SET `inst_id` = '?.instId', `inst_name` = '?.instName', `address` = '?.address', `describe` = '?.describe', `certificate` = '?.certificate', `status` = '?.status', `version` = '?.version', `auth_code` = '?.authCode', `static_ip` = '?.staticIp', `public_ip` = '?.publicIp', `requests` = '?.requests', `extra` = '?.extra', `expire_at` = '?.expireAt', `create_at` = '?.createAt', `update_at` = '?.updateAt', `create_by` = '?.createBy', `update_by` = '?.updateBy', `group` = '?.group' WHERE `node_id` = '?.nodeId'
	UpdateEdgeByNodeId(ctx context.Context, it *Edge) (int64, error)

	// DeleteEdgeByNodeId
	// DELETE FROM `edge` WHERE `node_id` = '?.nodeId'
	DeleteEdgeByNodeId(ctx context.Context, nodeId string) (int64, error)

	// SelectEdgeByNodeId
	// SELECT * FROM `edge` WHERE `node_id` = '?.nodeId'
	SelectEdgeByNodeId(ctx context.Context, nodeId string) (*Edge, error)
}

type meshEdgeDiv struct {
}

func (that *meshEdgeDiv) DeleteEdge(ctx context.Context, node_id string) (int64, error) {
	return dao.Exec(ctx, &specs.Vars{
		Expr: "DELETE FROM `edge` WHERE `node_id` = '?.node_id'",
		Args: map[string]any{
			"node_id": node_id,
		},
	})
}

func (that *meshEdgeDiv) IndexEdge(ctx context.Context, index int64, limit int64) (*types.Page[*Edge], error) {
	return dao.Page[Edge](ctx, &specs.Vars{
		Expr: "SELECT * FROM `edge` ORDER BY `node_id` ASC LIMIT '?.index', '?.limit'",
		Args: map[string]any{
			"index": index,
			"limit": limit,
		},
		Flags: int64(types.PageResultSet),
	})
}

func (that *meshEdgeDiv) SelectByIds(ctx context.Context, node_id string, inst_id string) (*Edge, error) {
	rs, err := dao.Query[Edge](ctx, &specs.Vars{
		Expr: "SELECT * FROM `edge` WHERE `node_id` = '?.node_id' OR `inst_id` = '?.inst_id' LIMIT 1",
		Args: map[string]any{
			"node_id": node_id,
			"inst_id": inst_id,
		},
	})
	if nil != err {
		return nil, cause.Error(err)
	}
	if len(rs) < 1 {
		return nil, cause.Error(sql.ErrNoRows)
	}
	return rs[0], nil
}

func (that *meshEdgeDiv) SelectAll(ctx context.Context) ([]*Edge, error) {
	rs, err := dao.Query[Edge](ctx, &specs.Vars{
		Expr: "SELECT * FROM `edge`",
		Args: map[string]any{},
	})
	if nil != err {
		return nil, cause.Error(err)
	}
	return rs, nil
}

func (that *meshEdgeDiv) InsertEdge(ctx context.Context, it *Edge) (int64, error) {
	return dao.Exec(ctx, &specs.Vars{
		Expr: "INSERT INTO `edge` (`node_id`, `inst_id`, `inst_name`, `address`, `describe`, `certificate`, `status`, `version`, `auth_code`, `static_ip`, `public_ip`, `requests`, `extra`, `expire_at`, `create_at`, `update_at`, `create_by`, `update_by`, `group`) VALUES ('?.nodeId', '?.instId', '?.instName', '?.address', '?.describe', '?.certificate', '?.status', '?.version', '?.authCode', '?.staticIp', '?.publicIp', '?.requests', '?.extra', '?.expireAt', '?.createAt', '?.updateAt', '?.createBy', '?.updateBy', '?.group')",
		Args: map[string]any{
			"nodeId":      it.NodeId,
			"instId":      it.InstId,
			"instName":    it.InstName,
			"address":     it.Address,
			"describe":    it.Describe,
			"certificate": it.Certificate,
			"status":      it.Status,
			"version":     it.Version,
			"authCode":    it.AuthCode,
			"staticIp":    it.StaticIp,
			"publicIp":    it.PublicIp,
			"requests":    it.Requests,
			"extra":       it.Extra,
			"expireAt":    it.ExpireAt,
			"createAt":    it.CreateAt,
			"updateAt":    it.UpdateAt,
			"createBy":    it.CreateBy,
			"updateBy":    it.UpdateBy,
			"group":       it.Group,
		},
	})
}

func (that *meshEdgeDiv) UpdateEdgeByNodeId(ctx context.Context, it *Edge) (int64, error) {
	return dao.Exec(ctx, &specs.Vars{
		Expr: "UPDATE `edge` SET `inst_id` = '?.instId', `inst_name` = '?.instName', `address` = '?.address', `describe` = '?.describe', `certificate` = '?.certificate', `status` = '?.status', `version` = '?.version', `auth_code` = '?.authCode', `static_ip` = '?.staticIp', `public_ip` = '?.publicIp', `requests` = '?.requests', `extra` = '?.extra', `expire_at` = '?.expireAt', `create_at` = '?.createAt', `update_at` = '?.updateAt', `create_by` = '?.createBy', `update_by` = '?.updateBy', `group` = '?.group' WHERE `node_id` = '?.nodeId'",
		Args: map[string]any{
			"instId":      it.InstId,
			"instName":    it.InstName,
			"address":     it.Address,
			"describe":    it.Describe,
			"certificate": it.Certificate,
			"status":      it.Status,
			"version":     it.Version,
			"authCode":    it.AuthCode,
			"staticIp":    it.StaticIp,
			"publicIp":    it.PublicIp,
			"requests":    it.Requests,
			"extra":       it.Extra,
			"expireAt":    it.ExpireAt,
			"createAt":    it.CreateAt,
			"updateAt":    it.UpdateAt,
			"createBy":    it.CreateBy,
			"updateBy":    it.UpdateBy,
			"group":       it.Group,
			"nodeId":      it.NodeId,
		},
	})
}

func (that *meshEdgeDiv) DeleteEdgeByNodeId(ctx context.Context, nodeId string) (int64, error) {
	return dao.Exec(ctx, &specs.Vars{
		Expr: "DELETE FROM `edge` WHERE `node_id` = '?.nodeId'",
		Args: map[string]any{
			"nodeId": nodeId,
		},
	})
}

func (that *meshEdgeDiv) SelectEdgeByNodeId(ctx context.Context, nodeId string) (*Edge, error) {
	rs, err := dao.Query[Edge](ctx, &specs.Vars{
		Expr: "SELECT * FROM `edge` WHERE `node_id` = '?.nodeId'",
		Args: map[string]any{
			"nodeId": nodeId,
		},
	})
	if nil != err {
		return nil, cause.Error(err)
	}
	if len(rs) < 1 {
		return nil, cause.Error(sql.ErrNoRows)
	}
	return rs[0], nil
}
