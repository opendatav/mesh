/*
 * Copyright (c) 2019, 2025, firmer.tech and/or its affiliates. All rights reserved.
 * Firmer Corporation PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 *
 */

// Code generated by mesh; DO NOT EDIT.

package orm

import (
	"context"
	"database/sql"

	"git.firmer.tech/firmer/mesh/client/golang/cause"
	"git.firmer.tech/firmer/mesh/client/golang/orm/dao"
	"git.firmer.tech/firmer/mesh/client/golang/orm/planner/specs"
)

// oauth2Client OAuth2客户端表
type Oauth2Client struct {
	Id     string `index:"1" json:"id" xml:"id" yaml:"id" comment:"客户端ID"`
	Name   string `index:"2" json:"name" xml:"name" yaml:"name" comment:"客户端名称"`
	Secret string `index:"3" json:"secret" xml:"secret" yaml:"secret" comment:"客户端密钥"`
	Domain string `index:"4" json:"domain" xml:"domain" yaml:"domain" comment:"客户端域名"`
	Data   string `index:"5" json:"data" xml:"data" yaml:"data" comment:"补充数据"`
}
type Oauth2ClientDao interface {

	// DeleteClient
	// DELETE FROM oauth2_client WHERE `id` = '?.id'
	DeleteClient(ctx context.Context, id string) (int64, error)

	// IndexClient
	// SELECT * FROM `oauth2_client` ORDER BY `id` ASC LIMIT '?.index', '?.limit'
	IndexClient(ctx context.Context, index int64, limit int64) ([]*Oauth2Client, error)

	// InsertOauth2Client
	// INSERT INTO `oauth2_client` (`id`, `name`, `secret`, `domain`, `data`) VALUES ('?.id', '?.name', '?.secret', '?.domain', '?.data')
	InsertOauth2Client(ctx context.Context, id string, name string, secret string, domain string, data string) (int64, error)

	// UpdateOauth2ClientById
	// UPDATE `oauth2_client` SET `name` = '?.name', `secret` = '?.secret', `domain` = '?.domain', `data` = '?.data' WHERE `id` = '?.id'
	UpdateOauth2ClientById(ctx context.Context, name string, secret string, domain string, data string, id string) (int64, error)

	// DeleteOauth2ClientById
	// DELETE FROM `oauth2_client` WHERE `id` = '?.id'
	DeleteOauth2ClientById(ctx context.Context, id string) (int64, error)

	// SelectOauth2ClientById
	// SELECT * FROM `oauth2_client` WHERE `id` = '?.id'
	SelectOauth2ClientById(ctx context.Context, id string) (*Oauth2Client, error)
}

type meshOauth2ClientDiv struct {
}

func (that *meshOauth2ClientDiv) DeleteClient(ctx context.Context, id string) (int64, error) {
	return dao.Exec(ctx, &specs.Vars{
		Expr: "DELETE FROM oauth2_client WHERE `id` = '?.id'",
		Args: map[string]any{
			"id": id,
		},
	})
}

func (that *meshOauth2ClientDiv) IndexClient(ctx context.Context, index int64, limit int64) ([]*Oauth2Client, error) {
	rs, err := dao.Query[Oauth2Client](ctx, &specs.Vars{
		Expr: "SELECT * FROM `oauth2_client` ORDER BY `id` ASC LIMIT '?.index', '?.limit'",
		Args: map[string]any{
			"index": index,
			"limit": limit,
		},
	})
	if nil != err {
		return nil, cause.Error(err)
	}
	return rs, nil
}

func (that *meshOauth2ClientDiv) InsertOauth2Client(ctx context.Context, id string, name string, secret string, domain string, data string) (int64, error) {
	return dao.Exec(ctx, &specs.Vars{
		Expr: "INSERT INTO `oauth2_client` (`id`, `name`, `secret`, `domain`, `data`) VALUES ('?.id', '?.name', '?.secret', '?.domain', '?.data')",
		Args: map[string]any{
			"id":     id,
			"name":   name,
			"secret": secret,
			"domain": domain,
			"data":   data,
		},
	})
}

func (that *meshOauth2ClientDiv) UpdateOauth2ClientById(ctx context.Context, name string, secret string, domain string, data string, id string) (int64, error) {
	return dao.Exec(ctx, &specs.Vars{
		Expr: "UPDATE `oauth2_client` SET `name` = '?.name', `secret` = '?.secret', `domain` = '?.domain', `data` = '?.data' WHERE `id` = '?.id'",
		Args: map[string]any{
			"name":   name,
			"secret": secret,
			"domain": domain,
			"data":   data,
			"id":     id,
		},
	})
}

func (that *meshOauth2ClientDiv) DeleteOauth2ClientById(ctx context.Context, id string) (int64, error) {
	return dao.Exec(ctx, &specs.Vars{
		Expr: "DELETE FROM `oauth2_client` WHERE `id` = '?.id'",
		Args: map[string]any{
			"id": id,
		},
	})
}

func (that *meshOauth2ClientDiv) SelectOauth2ClientById(ctx context.Context, id string) (*Oauth2Client, error) {
	rs, err := dao.Query[Oauth2Client](ctx, &specs.Vars{
		Expr: "SELECT * FROM `oauth2_client` WHERE `id` = '?.id'",
		Args: map[string]any{
			"id": id,
		},
	})
	if nil != err {
		return nil, cause.Error(err)
	}
	if len(rs) < 1 {
		return nil, cause.Error(sql.ErrNoRows)
	}
	return rs[0], nil
}
